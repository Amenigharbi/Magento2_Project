require.config({"config": {
        "jsbuild":{"PayPal_Braintree/js/customer/modals/address-modal.js":"define([\r\n    'jquery',\r\n    'ko',\r\n    'PayPal_Braintree/js/customer/utilities',\r\n    'mageUtils'\r\n], function ($, ko, utilities, utils) {\r\n    'use strict';\r\n\r\n    return {\r\n        viewModel: {\r\n            visible: ko.observable(false),\r\n            newAddressFormVisible: ko.observable(false),\r\n            selectExistingVisible: ko.observable(false),\r\n            currentAddresses: ko.observableArray([]),\r\n            initialSubscriptionAddressId: ko.observable(null),\r\n            currentShippingId: ko.observable(null),\r\n            currentEntityId: ko.observable(null),\r\n            currentOrderIsGrouped: ko.observable(false),\r\n            useForSelected: ko.observable(false),\r\n            saveAddressDisabled: ko.observable(true),\r\n            confirmationVisibleType: ko.observable(null),\r\n            defaultForAllAddressId: ko.observable(null),\r\n            isLookup: ko.observable(true),\r\n            newAddress: {\r\n                firstName: document.getElementById('firstname').value,\r\n                lastName: document.getElementById('lastname').value,\r\n                street: document.getElementById('street_1').value,\r\n                street2: document.getElementById('street_2').value,\r\n                city: document.getElementById('city').value,\r\n                postcode: document.getElementById('zip').value,\r\n                country: document.getElementById('country').value,\r\n                telephone: document.getElementById('telephone').value,\r\n                region: document.getElementById('region_id').value\r\n            },\r\n            currentCountryId: ko.observable(null),\r\n            countries: ko.observableArray(null)\r\n        },\r\n\r\n        fetchAllAddressUrl: 'rest/V1/repeat-orders/user-addresses',\r\n        assignAddressUrl: 'rest/V1/repeat-orders/grouped/set-shipping-address/',\r\n        useForAllUrl: 'rest/V1/repeat-orders/set-shipping-address-for-all/',\r\n        addAddressUrl: 'rest/V1/repeat-orders/add-shipping-address/',\r\n        validatedPostCodeExample: [],\r\n\r\n        showAddressModal: function (entity_id, groupedOrdersLength, shippingId, countryId) {\r\n            var self = this;\r\n\r\n            this.viewModel.visible(true);\r\n            this.viewModel.selectExistingVisible(true);\r\n            this.viewModel.currentEntityId(entity_id);\r\n            this.viewModel.initialSubscriptionAddressId(shippingId);\r\n            this.viewModel.currentOrderIsGrouped(groupedOrdersLength > 1);\r\n            this.viewModel.useForSelected(false);\r\n            this.clearAddressField();\r\n\r\n            fetch('/graphql', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    query: `{\r\n                customer {\r\n                    addresses {\r\n                        id,\r\n                        street,\r\n                        country_id,\r\n                        region {\r\n                            region_code\r\n                        },\r\n                        telephone,\r\n                        postcode,\r\n                        firstname,\r\n                        lastname,\r\n                        city\r\n                    }\r\n                }\r\n              }`\r\n                })\r\n            }).then(response => response.json()).then(response => {\r\n                const addresses = response.data.customer?.addresses || [];\r\n\r\n                self.viewModel.currentAddresses.removeAll();\r\n\r\n                //Get addresses from response and put them in an observable array\r\n                //The template looks at the array and builds the <select> dropdown form\r\n                for (let i = 0; i < addresses.length; i++) {\r\n                    const address = {\r\n                        id: addresses[i].id,\r\n                        firstname: addresses[i].firstname,\r\n                        lastname: addresses[i].lastname,\r\n                        region: {\r\n                            region_code: addresses[i].region.region_code\r\n                        },\r\n                        telephone: addresses[i].telephone,\r\n                        postcode: addresses[i].postcode,\r\n                        country_id: addresses[i].country_id,\r\n                        city: addresses[i].city,\r\n                        street: addresses[i].street.join(', ')\r\n                    };\r\n\r\n                    self.viewModel.currentAddresses.push(address);\r\n                }\r\n\r\n                self.viewModel.currentShippingId(shippingId);\r\n                self.viewModel.currentCountryId(countryId);\r\n                self.viewModel.saveAddressDisabled(true);\r\n            });\r\n        },\r\n\r\n        hideAddressModal: function () {\r\n            this.viewModel.newAddressFormVisible(false);\r\n            this.viewModel.selectExistingVisible(false);\r\n            this.viewModel.confirmationVisibleType(null);\r\n            this.viewModel.visible(false);\r\n\r\n            // Remove previous clickToAddress initialization block\r\n            $('#cc_c2a').remove();\r\n        },\r\n\r\n        showConfirmChangeAddress: function (event, context, type) {\r\n            if (type === 'new') {\r\n                let form = $(event.target).closest('form');\r\n\r\n                if (!(form.validation() && form.validation('isValid'))) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            this.viewModel.newAddressFormVisible(false);\r\n            this.viewModel.selectExistingVisible(false);\r\n            this.viewModel.confirmationVisibleType(type);\r\n        },\r\n\r\n        /**\r\n     * @param {*} postCode\r\n     * @param {*} countryId\r\n     * @return {Boolean}\r\n     */\r\n        validatePostCode: function (postCode, countryId) {\r\n            var pattern, regex,\r\n                patterns = window.checkout.postCodes[countryId];\r\n\r\n            this.validatedPostCodeExample = [];\r\n\r\n            if (!utils.isEmpty(postCode) && !utils.isEmpty(patterns)) {\r\n                for (pattern in patterns) {\r\n                    if (patterns.hasOwnProperty(pattern)) { //eslint-disable-line max-depth\r\n                        this.validatedPostCodeExample.push(patterns[pattern].example);\r\n                        regex = new RegExp(patterns[pattern].pattern);\r\n\r\n                        if (regex.test(postCode)) { //eslint-disable-line max-depth\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        postcodeValidation: function (postcodeElement) {\r\n            var countryId = $('select[name=\"country\"]:visible').val(),\r\n                validationResult,\r\n                warnMessage,\r\n                warnElement = $('.warning-postcode');\r\n\r\n            if (postcodeElement == null || postcodeElement.val() == null) {\r\n                return true;\r\n            }\r\n\r\n            warnElement.hide();\r\n            warnElement.text('');\r\n\r\n            validationResult = this.validatePostCode(postcodeElement.val(), countryId, []);\r\n\r\n            if (!validationResult) {\r\n                warnMessage = 'Please enter a valid post code.';\r\n                warnElement.show();\r\n                warnElement.text(warnMessage);\r\n\r\n                if (warnMessage) {\r\n                    warnElement.prev().addClass('input-postcode-error');\r\n                }\r\n\r\n            } else {\r\n                warnElement.prev().removeClass('input-postcode-error');\r\n            }\r\n\r\n            return validationResult;\r\n        },\r\n\r\n        toggleNewAddAddressForm: function (show) {\r\n            this.viewModel.newAddressFormVisible(show);\r\n            this.viewModel.selectExistingVisible(!show);\r\n            this.viewModel.isLookup(show);\r\n            this.clearAddressField();\r\n        },\r\n\r\n        clearAddressField: function () {\r\n            $('#cc_c2a').remove();\r\n            this.viewModel.currentShippingId(null);\r\n            this.viewModel.newAddress.street = null;\r\n            this.viewModel.newAddress.street = null;\r\n            this.viewModel.newAddress.street2 = null;\r\n            this.viewModel.newAddress.city = null;\r\n            this.viewModel.newAddress.postcode = null;\r\n            this.viewModel.newAddress.telephone = null;\r\n            this.viewModel.newAddress.country = this.viewModel.currentCountryId();\r\n        },\r\n\r\n        updateCurrentAddressId: function () {\r\n            var current = this.viewModel.currentShippingId(),\r\n                initial = this.viewModel.initialSubscriptionAddressId();\r\n\r\n            this.viewModel.saveAddressDisabled(current === initial);\r\n            this.viewModel.useForSelected(false);\r\n        },\r\n\r\n        onUseForAllChange: function (type, event) {\r\n            if (event && event.target) {\r\n                this.viewModel.useForSelected(event.target.checked);\r\n            }\r\n\r\n            if (type === 'existing') {\r\n                let currentId = this.viewModel.currentShippingId(),\r\n                    initialId = this.viewModel.initialSubscriptionAddressId(),\r\n                    defaultForAll = this.viewModel.defaultForAllAddressId();\r\n\r\n                if (currentId === initialId && defaultForAll === currentId && this.viewModel.useForSelected()) {\r\n                    this.viewModel.saveAddressDisabled(!this.viewModel.saveAddressDisabled());\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        submitChanges: function (event) {\r\n            if (this.viewModel.confirmationVisibleType() === 'new') {\r\n                return this.submitNewAddress(event);\r\n            }\r\n\r\n            return this.submitExistingAddress();\r\n        },\r\n\r\n        submitExistingAddress: function () {\r\n            var self = this,\r\n                entityId = this.viewModel.currentEntityId(),\r\n                addressId = this.viewModel.currentShippingId(),\r\n                useForAll = this.viewModel.useForSelected(),\r\n                url = (useForAll ? this.useForAllUrl : this.assignAddressUrl + entityId + '/') + addressId,\r\n                verb = useForAll ? 'POST' : 'PUT';\r\n\r\n            utilities.makeCall(url, verb, function () {\r\n                self.hideAddressModal();\r\n                utilities.viewModel.updatedOrderEntityId(entityId);\r\n            }, self.viewModel);\r\n\r\n            return true;\r\n        },\r\n\r\n        submitNewAddress: function () {\r\n            var self = this,\r\n                entityId = this.viewModel.currentEntityId,\r\n                firstName = this.viewModel.newAddress.firstName,\r\n                lastName = this.viewModel.newAddress.lastName,\r\n                street = this.viewModel.newAddress.street,\r\n                city = this.viewModel.newAddress.city,\r\n                postcode = this.viewModel.newAddress.postcode,\r\n                country = this.viewModel.currentCountryId,\r\n                telephone = this.viewModel.newAddress.telephone,\r\n                url = this.addAddressUrl +\r\n          '?entityId=' + entityId +\r\n          '&firstName=' + firstName +\r\n          '&lastName=' + lastName +\r\n          '&street=' + street +\r\n          '&postcode=' + postcode +\r\n          '&city=' + city +\r\n          '&countryId=' + country +\r\n          '&telephone=' + telephone;\r\n\r\n            utilities.makeCall(\r\n                url,\r\n                'POST',\r\n                function (response) {\r\n                    self.viewModel.currentShippingId(response.id);\r\n                    self.submitExistingAddress();\r\n                }, self.viewModel);\r\n\r\n            return true;\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/customer/payment/address-form-initializer.js":"define([\r\n    'jquery',\r\n    'uiComponent',\r\n    'ko',\r\n    'PayPal_Braintree/js/customer/modals/address-modal',\r\n    'mageUtils',\r\n    'Magento_Checkout/js/model/payment/additional-validators'\r\n], function (\r\n    $,\r\n    Component,\r\n    ko,\r\n    addressModal,\r\n    utils,\r\n    additionalValidators\r\n) {\r\n    'use strict';\r\n    return Component.extend({\r\n\r\n        defaults: {\r\n            template: 'Paypal_Braintree/customer/payment/address-wrapper',\r\n            addressModal: addressModal,\r\n            deliveryIntervals: ko.observableArray(null),\r\n            currentlySelectedInterval: ko.observable(null),\r\n            minDatePickerValue: 1,\r\n            standardDeliveryDays: 1,\r\n            baseUrl: ko.observable(),\r\n            updatedOrderEntityId: null,\r\n            countryId: 'GB',\r\n            submitBtnSelector: '#braintree_submit',\r\n            phoneNumberMaxLength: ko.observable(11),\r\n            phoneNumberMinLength: ko.observable(2),\r\n            phoneNumberMaxLengthErrorVisible: ko.observable(false),\r\n            phoneNumberMinLengthErrorVisible: ko.observable(false)\r\n        },\r\n\r\n        initialize: function () {\r\n            this._super();\r\n            let self = this;\r\n\r\n            additionalValidators.registerValidator({\r\n                validate: function () {\r\n                    const $form = $('#form-validate');\r\n\r\n                    $form.validation();\r\n                    return $form.validation('isValid');\r\n                }\r\n            });\r\n\r\n            fetch('/graphql', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    query: `{\r\n                        countries {\r\n                            full_name_locale,\r\n                            two_letter_abbreviation\r\n                        }\r\n                    }`\r\n                })\r\n            }).then(response => response.json()).then(response => {\r\n                const countries = response.data.countries || [];\r\n\r\n                countries.forEach(country => {\r\n                    self.addressModal.viewModel.countries.push({\r\n                        countryCode: country.two_letter_abbreviation,\r\n                        countryName: country.full_name_locale\r\n                    });\r\n                });\r\n            });\r\n        },\r\n\r\n        toggleSubmit: function (disable) {\r\n            var submitBtn = $(this.submitBtnSelector);\r\n\r\n            if (submitBtn.length) {\r\n                submitBtn.attr('disabled', disable);\r\n            }\r\n        },\r\n\r\n        showAddressModal: function (entity_id, groupedOrdersLength, shippingId, countryId) {\r\n            this.addressModal.viewModel.selectExistingVisible(true);\r\n            this.addressModal.viewModel.currentCountryId(this.countryId);\r\n            this.addressModal.showAddressModal(entity_id, groupedOrdersLength, shippingId, countryId);\r\n            let addressLength = this.addressModal.viewModel.currentAddresses().length;\r\n\r\n            this.addressModal.viewModel.newAddressFormVisible(addressLength === 0);\r\n            this.showLookupForm();\r\n            this.toggleSubmit(true);\r\n        },\r\n\r\n        showNewAddressForm: function () {\r\n            this.addressModal.toggleNewAddAddressForm(true);\r\n            if (this.addressModal.toggleNewAddAddressForm) {\r\n                document.getElementById('form-validate').style.display = 'block';\r\n            }\r\n            this.addressModal.viewModel.isLookup(false);\r\n\r\n            this.toggleSubmit(false);\r\n        },\r\n\r\n        showLookupForm: function () {\r\n            this.addressModal.toggleNewAddAddressForm(true);\r\n        },\r\n\r\n        showExistingSelector: function () {\r\n            this.addressModal.toggleNewAddAddressForm(false);\r\n            if (this.addressModal.toggleNewAddAddressForm) {\r\n                document.getElementById('form-validate').style.display = 'none';\r\n            }\r\n\r\n            this.toggleSubmit(false);\r\n        },\r\n\r\n        /**\r\n         * @param {*} postCode\r\n         * @param {*} countryId\r\n         * @param {Array} postCodesPatterns\r\n         * @return {Boolean}\r\n         */\r\n        validatePostCode: function (postCode, countryId) {\r\n            var pattern, regex,\r\n                patterns = window.checkout.postCodes[countryId];\r\n\r\n            this.validatedPostCodeExample = [];\r\n\r\n            if (!utils.isEmpty(postCode) && !utils.isEmpty(patterns)) {\r\n                for (pattern in patterns) {\r\n                    if (patterns.hasOwnProperty(pattern)) { //eslint-disable-line max-depth\r\n                        this.validatedPostCodeExample.push(patterns[pattern].example);\r\n                        regex = new RegExp(patterns[pattern].pattern);\r\n\r\n                        if (regex.test(postCode)) { //eslint-disable-line max-depth\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        postcodeValidation: function (postcodeElement) {\r\n            var countryId = this.countryId,\r\n                validationResult,\r\n                warnMessage,\r\n                warnElement = $('.warning-postcode');\r\n\r\n            if (postcodeElement == null || postcodeElement.val() == null) {\r\n                return true;\r\n            }\r\n\r\n            warnElement.hide();\r\n            warnElement.text('');\r\n\r\n            validationResult = this.validatePostCode(postcodeElement.val(), countryId, []);\r\n\r\n            if (!validationResult) {\r\n                warnMessage = 'Please enter a valid post code.';\r\n\r\n                warnElement.show();\r\n                warnElement.text(warnMessage);\r\n\r\n                if (warnMessage) {\r\n                    warnElement.prev().addClass('input-postcode-error');\r\n                }\r\n            } else {\r\n                warnElement.prev().removeClass('input-postcode-error');\r\n            }\r\n\r\n            return validationResult;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/customer/payment/braintree-card.js":"define([\r\n    'uiComponent',\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'mage/translate',\r\n    'uiRegistry',\r\n    'braintreeThreeDSecure',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'PayPal_Braintree/js/helper/get-braintree-config',\r\n    'PayPal_Braintree/js/view/payment/adapter'\r\n], function (Component, $, ko, _,  $t, uiRegistry, threeDSecure, additionalValidators, getBraintreeConfig, braintree) {\r\n    'use strict';\r\n\r\n    /**\r\n     * braintree is not an instance of Component so we need to merge in our changes\r\n     * and return an instance of Component with the final merged object.\r\n     */\r\n    var uiC = _.extend(braintree, {\r\n        clientToken: null,\r\n        uiConfig: null,\r\n        paymentMethodNonce: null,\r\n        selectedCardType: null,\r\n\r\n        isValidCardNumber: false,\r\n        isValidExpirationDate: false,\r\n        isValidCvvNumber: false,\r\n\r\n        viewModel: {\r\n            paymentMethodNonce: ko.observable(null),\r\n            publicHash: ko.observable(null),\r\n            paymentMethodCode: 'braintree',\r\n            total: ko.observable(0),\r\n            isThreeDSecureEnabled: ko.observable(false),\r\n            selectedMethod: {\r\n                price: ko.observable(0)\r\n            },\r\n            errorMessage: ko.observable()\r\n        },\r\n\r\n        /**\r\n         * Additional payment data\r\n         *\r\n         * {Object}\r\n         */\r\n        additionalData: {},\r\n\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        initialize: async function (uiConfig) {\r\n            this._super().observe([\r\n                'selectedCardType'\r\n            ]);\r\n\r\n            await this.getBraintreeConfig();\r\n\r\n            this.uiConfig = uiConfig;\r\n            this.icons = uiConfig.icons;\r\n            this.cvvImage = uiConfig.cvvImage;\r\n            this.viewModel.isThreeDSecureEnabled(uiConfig.isThreeDSecureEnabled);\r\n            this.viewModel.total(parseFloat(uiConfig.amount).toFixed(2));\r\n\r\n            let self = this;\r\n\r\n            const elm = await this._waitForElm('#co-transparent-form-braintree');\r\n\r\n            if (elm) {\r\n                this.clientConfig = {\r\n                    additionalData: {},\r\n\r\n                    /**\r\n                     * Device data initialization\r\n                     * @param {String} deviceData\r\n                     */\r\n                    onDeviceDataReceived: function (deviceData) {\r\n                        this.additionalData['device_data'] = deviceData;\r\n                    },\r\n\r\n                    /**\r\n                     * Triggers on any Braintree error\r\n                     * @param {Object} response\r\n                     */\r\n                    onError: function (response) {\r\n                        self.showError($t('Please enter a valid card number, expiry date and CVV Number.'));\r\n                        throw response.message;\r\n                    },\r\n\r\n                    /**\r\n                     * Triggers when customer click \"Cancel\"\r\n                     */\r\n                    onCancelled: function () {\r\n                        self.showError($t('The process has been cancelled'));\r\n                    },\r\n\r\n                    onReady: function (context) {\r\n                        context.setupHostedFields();\r\n                    },\r\n\r\n                    /**\r\n                     * Allow a new nonce to be generated\r\n                     */\r\n                    onPaymentMethodError: function () {\r\n                        this.isProcessing = false;\r\n                    },\r\n\r\n                    /**\r\n                     * Set payment nonce\r\n                     * @param {String} paymentMethodNonce\r\n                     */\r\n                    setPaymentMethodNonce: function (paymentMethodNonce) {\r\n                        this.paymentMethodNonce = paymentMethodNonce;\r\n                    },\r\n\r\n\r\n                    /**\r\n                     * After Braintree instance initialization\r\n                     */\r\n                    onInstanceReady: function (instance) {\r\n                        instance.on('validityChange', self.onValidityChange.bind(self));\r\n                        instance.on('cardTypeChange', self.onCardTypeChange.bind(self));\r\n                    },\r\n\r\n                    id: 'co-transparent-form-braintree',\r\n\r\n                    hostedFields: {\r\n                        number: {\r\n                            selector: '#braintree_cc_number',\r\n                            placeholder: '4111 1111 1111 1111'\r\n                        },\r\n                        expirationDate: {\r\n                            selector: '#braintree_expirationDate',\r\n                            placeholder: $t('MM/YYYY')\r\n                        },\r\n                        cvv: {\r\n                            selector: '#braintree_cc_cid',\r\n                            placeholder: $t('000')\r\n                        }\r\n                    },\r\n\r\n                    styles: {\r\n                        'input': {\r\n                            'font-size': '14px',\r\n                            'color': '#3A3A3A'\r\n                        },\r\n                        ':focus': {\r\n                            'color': 'black'\r\n                        },\r\n                        '.valid': {\r\n                            'color': 'green'\r\n                        },\r\n                        '.invalid': {\r\n                            'color': 'red'\r\n                        }\r\n                    },\r\n\r\n                    onPaymentMethodReceived: function (response) {\r\n                        $.ajax({\r\n                            url: '/rest/default/V1/braintree/mine/payment/vault',\r\n                            type: 'POST',\r\n                            data: JSON.stringify({\r\n                                billingAddress: {},\r\n                                payment: {\r\n                                    payment_method_code: self.viewModel.paymentMethodCode,\r\n                                    payment_method_nonce: response.nonce,\r\n                                    device_data: this.additionalData.device_data\r\n                                }\r\n                            }),\r\n                            contentType:'application/json; charset=utf-8',\r\n                            success: function () {\r\n                                window.location.reload();\r\n                            },\r\n                            error: function (error) {\r\n                                $('body').trigger('processStop');\r\n                                console.warn(error.message);\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n\r\n                this.setConfig(this.clientConfig);\r\n                this.clientToken = uiConfig.clientToken;\r\n                this.setup();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get list of card types\r\n         * @returns {Object}\r\n         */\r\n        getCcTypesMapper: function () {\r\n            return this.uiConfig.ccTypeMapper;\r\n        },\r\n\r\n        /**\r\n         * Find mage card type by Braintree type\r\n         * @param {String} type\r\n         * @param {Object} availableTypes\r\n         * @returns {*}\r\n         */\r\n        getMageCardType: function (type, availableTypes) {\r\n            var storedCardType = null,\r\n                mapper = this.getCcTypesMapper();\r\n\r\n            if (type && typeof mapper[type] !== 'undefined') {\r\n                storedCardType = mapper[type];\r\n\r\n                if (_.indexOf(availableTypes, storedCardType) !== -1) {\r\n                    return storedCardType;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        getBraintreeConfig: function () {\r\n            return getBraintreeConfig()\r\n                .then(response => {\r\n                    this.merchantAccountId = response.data.storeConfig.braintree_merchant_account_id;\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Triggers on Hosted Field changes\r\n         * @param {Object} event\r\n         * @returns {Boolean}\r\n         */\r\n        onValidityChange: function (event) {\r\n            // Handle a change in validation or card type\r\n            if (event.emittedBy === 'number') {\r\n                this.selectedCardType(null);\r\n\r\n                if (event.cards.length === 1) {\r\n                    this.isValidCardNumber = event.fields.number.isValid;\r\n                    this.selectedCardType(\r\n                        this.getMageCardType(event.cards[0].type, this.uiConfig.availableCardTypes));\r\n                    this.validateCardType();\r\n                } else {\r\n                    this.isValidCardNumber = event.fields.number.isValid;\r\n                    this.validateCardType();\r\n                }\r\n            }\r\n\r\n            // Other field validations\r\n            if (event.emittedBy === 'expirationDate') {\r\n                this.isValidExpirationDate = event.fields.expirationDate.isValid;\r\n            }\r\n            if (event.emittedBy === 'cvv') {\r\n                this.isValidCvvNumber = event.fields.cvv.isValid;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Triggers on Hosted Field card type changes\r\n         * @param {Object} event\r\n         * @returns {Boolean}\r\n         */\r\n        onCardTypeChange: function (event) {\r\n            if (event.cards.length === 1) {\r\n                this.selectedCardType(\r\n                    this.getMageCardType(event.cards[0].type, this.uiConfig.availableCardTypes)\r\n                );\r\n            } else {\r\n                this.selectedCardType(null);\r\n            }\r\n        },\r\n\r\n        _waitForElm: function (selector) {\r\n            return new Promise(resolve => {\r\n                if (document.querySelector(selector)) {\r\n                    return resolve(document.querySelector(selector));\r\n                }\r\n\r\n                const observer = new MutationObserver(() => {\r\n                    if (document.querySelector(selector)) {\r\n                        resolve(document.querySelector(selector));\r\n                        observer.disconnect();\r\n                    }\r\n                });\r\n\r\n                observer.observe(document.body, {\r\n                    childList: true,\r\n                    subtree: true\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        getClientToken: function () {\r\n            return this.clientToken;\r\n        },\r\n\r\n        /**\r\n         * Trigger order placing\r\n         */\r\n        placeOrderClick: function () {\r\n            if (this.validateFormFields() && additionalValidators.validate()) {\r\n                this.handleNonce();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get jQuery selector\r\n         * @param {String} field\r\n         * @returns {String}\r\n         */\r\n        getSelector: function (field) {\r\n            return '#' + this.code + '_' + field;\r\n        },\r\n\r\n        /**\r\n         * Get card icons\r\n         *\r\n         * @param {String} type\r\n         * @returns {Object|Boolean}\r\n         */\r\n        getIcons: function (findType) {\r\n            return this.icons.find(({ type }) => type === findType);\r\n        },\r\n\r\n        /**\r\n         * Toggle invalid class on selector\r\n         * @param selector\r\n         * @param state\r\n         * @returns {boolean}\r\n         */\r\n        validateField: function (selector, state) {\r\n            var $selector = $(this.getSelector(selector)),\r\n                invalidClass = 'braintree-hosted-fields-invalid';\r\n\r\n            if (state === true) {\r\n                $selector.removeClass(invalidClass);\r\n                return true;\r\n            }\r\n\r\n            $selector.addClass(invalidClass);\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validate all fields\r\n         * @returns {boolean}\r\n         */\r\n        validateFormFields: function () {\r\n            return (this.validateCardType() && this.validateExpirationDate() && this.validateCvvNumber()) === true;\r\n        },\r\n\r\n        /**\r\n         * Validate current credit card type\r\n         * @returns {Boolean}\r\n         */\r\n        validateCardType: function () {\r\n            return this.validateField(\r\n                'cc_number',\r\n                this.isValidCardNumber\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate current expiry date\r\n         * @returns {boolean}\r\n         */\r\n        validateExpirationDate: function () {\r\n            return this.validateField(\r\n                'expirationDate',\r\n                this.isValidExpirationDate === true\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate current CVV field\r\n         * @returns {boolean}\r\n         */\r\n        validateCvvNumber: function () {\r\n            return this.validateField(\r\n                'cc_cid',\r\n                this.isValidCvvNumber === true\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Get image for CVV\r\n         * @returns {String}\r\n         */\r\n        getCvvImageHtml: function () {\r\n            return '<img src=\"' + this.cvvImage +\r\n                '\" alt=\"' + $t('Card Verification Number Visual Reference') +\r\n                '\" title=\"' + $t('Card Verification Number Visual Reference') +\r\n                '\" />';\r\n        },\r\n\r\n        /**\r\n         * Prepare data to place order\r\n         */\r\n        handleNonce: function () {\r\n\r\n            $('body').trigger('processStart');\r\n            this.viewModel.errorMessage('');\r\n\r\n            let state = $.Deferred(),\r\n                addressBilling = uiRegistry.get('store-braintree-card-form.address'),\r\n                shippingId = addressBilling.addressModal.viewModel.currentShippingId(),\r\n\r\n                // If we have a shipping ID then get the selected address otherwise use the new address.\r\n                currentAddress = shippingId\r\n                    ? addressBilling.addressModal.viewModel.currentAddresses().find(function (address) {\r\n                        return address.id === shippingId;\r\n                    }) : {\r\n                        firstname: document.getElementById('firstname').value,\r\n                        lastname: document.getElementById('lastname').value,\r\n                        telephone: document.getElementById('telephone').value,\r\n                        street: [\r\n                            document.getElementById('street_1').value,\r\n                            document.getElementById('street_2').value\r\n                        ],\r\n                        city: document.getElementById('city').value,\r\n                        region: {\r\n                            region_code: document.getElementById('region_id').value\r\n                        },\r\n                        postcode: document.getElementById('zip').value,\r\n                        country_id: document.getElementById('country').value\r\n                    };\r\n\r\n            const billingAddress = {\r\n                givenName: currentAddress.firstname,\r\n                surname: currentAddress.lastname,\r\n                phoneNumber: currentAddress.telephone,\r\n                streetAddress: currentAddress.street[0],\r\n                extendedAddress: currentAddress.street[1],\r\n                locality: currentAddress.city,\r\n                region: currentAddress.region.region_code,\r\n                postalCode: currentAddress.postcode,\r\n                countryCodeAlpha2: currentAddress.country_id\r\n            };\r\n\r\n            this.hostedFieldsInstance\r\n                .tokenize({\r\n                    vault: true,\r\n                    billingAddress\r\n                }).then(function (payload) {\r\n                    this.viewModel.paymentMethodNonce(payload.nonce);\r\n                    let threeDSEnabled = this.viewModel.isThreeDSecureEnabled();\r\n\r\n                    const callback = () => {\r\n                        const nonce = this.viewModel.paymentMethodNonce();\r\n\r\n                        this.clientConfig.onPaymentMethodReceived({ nonce });\r\n                    };\r\n\r\n                    if (threeDSEnabled) {\r\n                        threeDSecure.create({\r\n                            version: 2,\r\n                            client: this.clientInstance\r\n                        }, function (threeDSecureErr, threeDSecureInstance) {\r\n                            if (threeDSecureErr) {\r\n                                console.warn(threeDSecureErr);\r\n                                return;\r\n                            }\r\n\r\n                            threeDSecureInstance.verifyCard({\r\n                                amount: this.viewModel.total(),\r\n                                nonce: payload.nonce,\r\n                                bin: payload.details.bin,\r\n                                cardAddChallengeRequested: true,\r\n                                vault: true,\r\n\r\n                                onLookupComplete: function (data, next) {\r\n                                    next();\r\n                                }\r\n                            }, function (err, response) {\r\n                                if (err) {\r\n                                    $('body').trigger('processStop');\r\n                                    this.viewModel.errorMessage($t('Please try again with another form of payment.'));\r\n                                    return state.reject($t('Please try again with another form of payment.'));\r\n                                }\r\n\r\n                                let liability = {\r\n                                    shifted: response.liabilityShifted,\r\n                                    shiftPossible: response.liabilityShiftPossible\r\n                                };\r\n\r\n                                if (liability.shifted || !liability.shifted && !liability.shiftPossible) {\r\n                                    this.viewModel.paymentMethodNonce(response.nonce);\r\n                                    state.resolve();\r\n\r\n                                    // Validation Passed\r\n                                    callback();\r\n\r\n                                } else {\r\n                                    // eslint-disable-next-line max-len\r\n                                    this.viewModel.errorMessage($t('We could not validate your payment method. Please try again with another form of payment.'));\r\n                                    $('body').trigger('processStop');\r\n                                    state.reject($t('Please try again with another form of payment.'));\r\n                                }\r\n                            }.bind(this));\r\n                        }.bind(this));\r\n                    } else {\r\n                        callback();\r\n                    }\r\n                }.bind(this))\r\n                .catch(function () {\r\n                    $('body').trigger('processStop');\r\n                });\r\n        }\r\n    });\r\n\r\n    return Component.extend(uiC);\r\n});\r\n","PayPal_Braintree/js/customer/payment/braintree-paypal.js":"define([\r\n    'uiComponent',\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'PayPal_Braintree/js/view/payment/adapter',\r\n    'braintreePayPalCheckout',\r\n    'mage/translate'\r\n], function (Component, $, ko, _, braintree, paypalCheckout, $t) {\r\n    'use strict';\r\n\r\n    /**\r\n     * braintree is not an instance of Component so we need to merge in our changes\r\n     * and return an instance of Component with the final merged object.\r\n     */\r\n    var uiC = _.extend(braintree, {\r\n        clientToken: null,\r\n        uiConfig: null,\r\n        paymentMethodNonce: null,\r\n\r\n        viewModel: {\r\n            errorMessage: ko.observable()\r\n        },\r\n\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        initialize: function (uiConfig) {\r\n            this._super();\r\n\r\n            this.uiConfig = uiConfig;\r\n            this.merchantName = uiConfig.merchantName;\r\n            this.locale = uiConfig.locale;\r\n            this.currency = uiConfig.currency;\r\n            this.orderAmount = uiConfig.orderAmount;\r\n            const self = this;\r\n\r\n            this.clientConfig = {\r\n\r\n                additionalData: {},\r\n                buttonId: 'paypal_container',\r\n\r\n                /**\r\n                 * Device data initialization\r\n                 * @param {String} deviceData\r\n                 */\r\n                onDeviceDataReceived: function (deviceData) {\r\n                    this.additionalData['device_data'] = deviceData;\r\n                },\r\n\r\n                /**\r\n                 * Triggers when widget is loaded\r\n                 * @param {Object} context\r\n                 */\r\n                onReady: function (context) {\r\n                    paypalCheckout.create({\r\n                        client: context.clientInstance\r\n                    }, async function (paypalCheckoutErr, paypalCheckoutInstance) {\r\n                        self.setPayPalInstance(paypalCheckoutInstance);\r\n\r\n                        await paypalCheckoutInstance.loadPayPalSDK({\r\n                            vault: true\r\n                        });\r\n\r\n                        window.paypal.Buttons({\r\n                            fundingSource: window.paypal.FUNDING.PAYPAL,\r\n\r\n                            createBillingAgreement: function () {\r\n                                return paypalCheckoutInstance.createPayment({\r\n                                    flow: 'vault',\r\n\r\n                                    enableShippingAddress: false,\r\n                                    shippingAddressEditable: false,\r\n\r\n                                    amount: self.orderAmount,\r\n                                    currency: self.currency,\r\n                                    locale: self.locale\r\n                                });\r\n                            },\r\n\r\n                            onApprove: function (data) {\r\n                                $('body').trigger('processStart');\r\n                                return paypalCheckoutInstance.tokenizePayment(data, function (err, payload) {\r\n                                    if (err) {\r\n                                        $('body').trigger('processStop');\r\n                                        self.viewModel.errorMessage(\r\n                                            $t('Please try again with another form of payment.'));\r\n                                        return;\r\n                                    }\r\n\r\n                                    $.ajax({\r\n                                        url: '/rest/default/V1/braintree/mine/payment/vault',\r\n                                        type: 'POST',\r\n                                        data: JSON.stringify({\r\n                                            payment: {\r\n                                                payment_method_code: 'braintree_paypal',\r\n                                                payment_method_nonce: payload.nonce,\r\n                                                device_data: self.deviceData\r\n                                            }\r\n                                        }),\r\n                                        contentType:'application/json; charset=utf-8',\r\n                                        success: function () {\r\n                                            window.location.reload();\r\n                                        },\r\n                                        error: function (error) {\r\n                                            $('body').trigger('processStop');\r\n                                            console.warn(error.message);\r\n                                        }\r\n                                    });\r\n                                });\r\n                            },\r\n\r\n                            onCancel: function (data) {\r\n                                console.log('PayPal payment canceled', JSON.stringify(data, 0, 2));\r\n                            },\r\n\r\n                            onError: function (err) {\r\n                                console.error('PayPal error', err);\r\n                            }\r\n                        }).render('#paypal_container_account');\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * Triggers on any Braintree error\r\n                 * @param {Object} response\r\n                 */\r\n                onError: function (response) {\r\n                    self.showError($t('PayPal error msg'));\r\n                    throw response.message;\r\n                },\r\n\r\n                /**\r\n                 * Triggers when customer click \"Cancel\"\r\n                 */\r\n                onCancelled: function () {\r\n                    self.showError($t('The process has been cancelled'));\r\n                },\r\n\r\n                onPaymentMethodReceived: function (response) {\r\n                    self.paymentMethodNonce = response.nonce;\r\n                    $('#braintree-paypal-payment-method-nonce').val(response.nonce);\r\n                    $('#braintree-paypal-form').trigger('submit');\r\n                },\r\n\r\n                dataCollector: {\r\n                    paypal: true\r\n                },\r\n                paypal: {\r\n                    container: 'paypal_container_account',\r\n                    flow: 'vault',\r\n                    singleUse: false,\r\n                    amount: self.orderAmount,\r\n                    currency: self.currency,\r\n                    locale: self.locale,\r\n                    enableShippingAddress: false,\r\n                    displayName: self.merchantName,\r\n\r\n                    /**\r\n                     * Triggers on any Braintree error\r\n                     */\r\n                    onError: function () {\r\n                        this.paymentMethodNonce = null;\r\n                    },\r\n\r\n                    /**\r\n                     * Triggers if browser doesn't support PayPal Checkout\r\n                     */\r\n                    onUnsupported: function () {\r\n                        this.paymentMethodNonce = null;\r\n                    }\r\n                }\r\n            };\r\n\r\n            this.setConfig(this.clientConfig);\r\n            this.clientToken = uiConfig.clientToken;\r\n        },\r\n\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        getClientToken: function () {\r\n            return this.clientToken;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getColor: function () {\r\n            return this.color;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getShape: function () {\r\n            return this.shape;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getLayout: function () {\r\n            return this.layout;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getSize: function () {\r\n            return this.size;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getEnvironment: function () {\r\n            return this.environment;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getDisabledFunding: function () {\r\n            return this.disabledFunding;\r\n        },\r\n\r\n        /**\r\n         * Set the PayPal instance or null it by setting the value of the property.\r\n         *\r\n         * @param val\r\n         */\r\n        setPayPalInstance: function (val) {\r\n            this.paypalInstance = val;\r\n        },\r\n\r\n        /**\r\n         * Run the teardown script to remove the PayPal instance.\r\n         */\r\n        teardownPayPalInstance: function () {\r\n            if (this.paypalInstance) {\r\n                this.paypalInstance.teardown(function () {\r\n                    $('#paypal_container_account').empty();\r\n                });\r\n                this.paypalInstance = null;\r\n            }\r\n\r\n            window.dispatchEvent(new Event('paypal:reinit-express'));\r\n        }\r\n    });\r\n\r\n    return Component.extend(uiC);\r\n});\r\n","PayPal_Braintree/js/customer/payment/update-payment.js":"define([\r\n    'uiComponent',\r\n    'jquery',\r\n    'ko',\r\n    'uiRegistry'\r\n], function (Component, $, ko, registry) {\r\n    'use strict';\r\n    return Component.extend({\r\n        defaults: {\r\n            addNewCardVM: {\r\n                visible: ko.observable(false)\r\n            },\r\n            addNewPayPalVM: {\r\n                visible: ko.observable(false)\r\n            },\r\n            errorModalVM: {\r\n                visible: ko.observable(false),\r\n                message: ko.observable(null),\r\n                header: ko.observable('Error')\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add the repeat order block to the frontend\r\n         */\r\n        initialize: function () {\r\n            this.modifyKnockoutRemovalBehaviour();\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * By moving the billing address form inside of Knockout it\r\n         * conflicts with the mage.directoryRegionUpdater widget.\r\n         *\r\n         * Knockout will run a cleanData method that removes jQuery events so removes the region updater events\r\n         * so User's will no longer see the correct region fields.\r\n         */\r\n        modifyKnockoutRemovalBehaviour: function () {\r\n            const normalFunction = ko.utils.domNodeDisposal.cleanExternalData;\r\n\r\n            ko.utils.domNodeDisposal.cleanExternalData = function (node) {\r\n                if (node.id === 'country') {\r\n                    return;\r\n                }\r\n\r\n                normalFunction(node);\r\n            };\r\n        },\r\n\r\n        showAddCardModal: function () {\r\n            this.addNewCardVM.visible(true);\r\n\r\n            $('html, body').animate({scrollTop: 0}, 400);\r\n        },\r\n\r\n        hideAddCardModal: function () {\r\n            this.addNewCardVM.visible(false);\r\n        },\r\n\r\n        showAddPayPalModal: function () {\r\n            var braintreePaypal = registry.get('new-form-braintree-paypal');\r\n\r\n            braintreePaypal.setup();\r\n            this.addNewPayPalVM.visible(true);\r\n        },\r\n\r\n        hideAddPayPalModal: function () {\r\n            var braintreePaypal = registry.get('new-form-braintree-paypal');\r\n\r\n            braintreePaypal.teardownPayPalInstance();\r\n            this.addNewPayPalVM.visible(false);\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/googlepay/api.js":"/**\r\n * Braintree Google Pay button api\r\n **/\r\ndefine([\r\n    'uiComponent',\r\n    'underscore',\r\n    'jquery',\r\n    'mage/translate',\r\n    'mage/storage',\r\n    'PayPal_Braintree/js/form-builder',\r\n    'PayPal_Braintree/js/googlepay/implementations/shortcut/3d-secure',\r\n    'PayPal_Braintree/js/googlepay/model/parsed-response',\r\n    'PayPal_Braintree/js/googlepay/model/payment-data',\r\n    'PayPal_Braintree/js/helper/remove-non-digit-characters',\r\n    'PayPal_Braintree/js/view/payment/validator-manager'\r\n], function (\r\n    Component,\r\n    _,\r\n    $,\r\n    $t,\r\n    storage,\r\n    formBuilder,\r\n    threeDSecureValidator,\r\n    parsedResponseModel,\r\n    paymentDataModel,\r\n    removeNonDigitCharacters,\r\n    validatorManager\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            validatorManager: validatorManager,\r\n            threeDSecureValidator: threeDSecureValidator,\r\n            clientToken: null,\r\n            merchantId: null,\r\n            currencyCode: null,\r\n            actionSuccess: null,\r\n            amount: null,\r\n            cardTypes: [],\r\n            btnColor: 0,\r\n            email: null,\r\n            paymentMethodNonce: null,\r\n            creditCardBin: null\r\n        },\r\n\r\n        /**\r\n         * Set & get environment\r\n         * \"PRODUCTION\" or \"TEST\"\r\n         */\r\n        setEnvironment: function (value) {\r\n            this.environment = value;\r\n        },\r\n        getEnvironment: function () {\r\n            return this.environment;\r\n        },\r\n\r\n        /**\r\n         * Set & get api token\r\n         */\r\n        setClientToken: function (value) {\r\n            this.clientToken = value;\r\n        },\r\n        getClientToken: function () {\r\n            return this.clientToken;\r\n        },\r\n\r\n        /**\r\n         * Set and get display name\r\n         */\r\n        setMerchantId: function (value) {\r\n            this.merchantId = value;\r\n        },\r\n        getMerchantId: function () {\r\n            return this.merchantId;\r\n        },\r\n\r\n        /**\r\n         * Set and get currency code\r\n         */\r\n        setAmount: function (value) {\r\n            this.amount = parseFloat(value).toFixed(2);\r\n        },\r\n        getAmount: function () {\r\n            return this.amount;\r\n        },\r\n\r\n        /**\r\n         * Set and get currency code\r\n         */\r\n        setCurrencyCode: function (value) {\r\n            this.currencyCode = value;\r\n        },\r\n        getCurrencyCode: function () {\r\n            return this.currencyCode;\r\n        },\r\n\r\n        /**\r\n         * Set and get success redirection url\r\n         */\r\n        setActionSuccess: function (value) {\r\n            this.actionSuccess = value;\r\n        },\r\n        getActionSuccess: function () {\r\n            return this.actionSuccess;\r\n        },\r\n\r\n        /**\r\n         * Set and get success redirection url\r\n         */\r\n        setCardTypes: function (value) {\r\n            this.cardTypes = value;\r\n        },\r\n        getCardTypes: function () {\r\n            return this.cardTypes;\r\n        },\r\n\r\n        /**\r\n         * BTN Color\r\n         */\r\n        setBtnColor: function (value) {\r\n            this.btnColor = value;\r\n        },\r\n        getBtnColor: function () {\r\n            return this.btnColor;\r\n        },\r\n\r\n        /**\r\n         * Add the 3D Secure validator config.\r\n         *\r\n         * @param {object} value\r\n         */\r\n        setThreeDSecureValidatorConfig: function (value) {\r\n            this.threeDSecureValidator.setConfig(value);\r\n        },\r\n\r\n        /**\r\n         * Add the 3D Secure validator to the validation manager with amount & billing address data set.\r\n         * It will be added only if 3D Secure is active.\r\n         */\r\n        addThreeDSecureValidator: function () {\r\n            this.threeDSecureValidator.setBillingAddress(this.getThreeDSecureBillingAddressData());\r\n            this.threeDSecureValidator.setShippingAddress(this.getThreeDSecureShippingAddressData());\r\n            this.threeDSecureValidator.setTotalAmount(this.getAmount());\r\n\r\n            this.validatorManager.add(this.threeDSecureValidator);\r\n        },\r\n\r\n        /**\r\n         * Payment request info\r\n         */\r\n        getPaymentRequest: function () {\r\n            let result = {\r\n                transactionInfo: {\r\n                    totalPriceStatus: 'ESTIMATED',\r\n                    totalPrice: this.getAmount(),\r\n                    currencyCode: this.getCurrencyCode()\r\n                },\r\n                allowedPaymentMethods: [\r\n                    {\r\n                        'type': 'CARD',\r\n                        'parameters': {\r\n                            'allowedCardNetworks': this.getCardTypes(),\r\n                            'billingAddressRequired': true,\r\n                            'billingAddressParameters': {\r\n                                format: 'FULL',\r\n                                phoneNumberRequired: true\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                ],\r\n                shippingAddressRequired: true,\r\n                shippingAddressParameters: {\r\n                    phoneNumberRequired: true\r\n                },\r\n                emailRequired: true\r\n            };\r\n\r\n            if (this.getEnvironment() !== 'TEST') {\r\n                result.merchantInfo = { merchantId: this.getMerchantId() };\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Place the order\r\n         */\r\n        startPlaceOrder: function (deviceData) {\r\n            let self = this,\r\n                payload = {\r\n                    details: {\r\n                        shippingAddress: self.getShippingAddressData(),\r\n                        billingAddress: self.getBillingAddressData()\r\n                    },\r\n                    nonce: self.paymentMethodNonce,\r\n                    isNetworkTokenized: parsedResponseModel.getIsNetworkTokenized(),\r\n                    deviceData: deviceData\r\n                };\r\n\r\n            self.email = paymentDataModel.getEmail();\r\n            self.paymentMethodNonce = parsedResponseModel.getNonce();\r\n            self.creditCardBin = parsedResponseModel.getBin();\r\n\r\n\r\n            if (parsedResponseModel.getIsNetworkTokenized() === false) {\r\n                /* Add 3D Secure verification to payment & validate payment for non network tokenized cards */\r\n                self.addThreeDSecureValidator();\r\n\r\n                self.validatorManager.validate(self, function () {\r\n                    /* Set the new nonce from the 3DS verification */\r\n                    payload.nonce = self.paymentMethodNonce;\r\n\r\n                    return formBuilder.build({\r\n                        action: self.getActionSuccess(),\r\n                        fields: {\r\n                            result: JSON.stringify(payload)\r\n                        }\r\n                    }).submit();\r\n                }, function () {\r\n                    self.paymentMethodNonce = null;\r\n                    self.creditCardBin = null;\r\n                });\r\n            } else {\r\n                formBuilder.build({\r\n                    action: this.getActionSuccess(),\r\n                    fields: {\r\n                        result: JSON.stringify(payload)\r\n                    }\r\n                }).submit();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the shipping address from the payment data model which should already be set by the calling script.\r\n         *\r\n         * @return {?Object}\r\n         */\r\n        getShippingAddressData: function () {\r\n            let shippingAddress = paymentDataModel.getShippingAddress();\r\n\r\n            if (shippingAddress === null) {\r\n                return null;\r\n            }\r\n\r\n            return {\r\n                streetAddress: shippingAddress.address1 + '\\n' + shippingAddress.address2,\r\n                locality: shippingAddress.locality,\r\n                postalCode: shippingAddress.postalCode,\r\n                countryCodeAlpha2: shippingAddress.countryCode,\r\n                email: paymentDataModel.getEmail(),\r\n                name: shippingAddress.name,\r\n                telephone: removeNonDigitCharacters(_.get(shippingAddress, 'phoneNumber', '')),\r\n                region: _.get(shippingAddress, 'administrativeArea', '')\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Get the billing address from the payment data model which should already be set by the calling script.\r\n         *\r\n         * @return {?Object}\r\n         */\r\n        getBillingAddressData: function () {\r\n            let paymentMethodData = paymentDataModel.getPaymentMethodData(),\r\n                billingAddress = _.get(paymentMethodData, ['info', 'billingAddress'], null);\r\n\r\n            if (paymentMethodData === null) {\r\n                return null;\r\n            }\r\n\r\n\r\n            if (billingAddress === null) {\r\n                return null;\r\n            }\r\n\r\n            return {\r\n                streetAddress: billingAddress.address1 + '\\n' + billingAddress.address2,\r\n                locality: billingAddress.locality,\r\n                postalCode: billingAddress.postalCode,\r\n                countryCodeAlpha2: billingAddress.countryCode,\r\n                email: paymentDataModel.getEmail(),\r\n                name: billingAddress.name,\r\n                telephone: removeNonDigitCharacters(_.get(billingAddress, 'phoneNumber', '')),\r\n                region: _.get(billingAddress, 'administrativeArea', '')\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Get the billing address data as required for 3D Secure verification.\r\n         *\r\n         * For First & last name, use a simple split by space.\r\n         *\r\n         * @return {?Object}\r\n         */\r\n        getThreeDSecureBillingAddressData: function () {\r\n            let paymentMethodData = paymentDataModel.getPaymentMethodData(),\r\n                billingAddress = _.get(paymentMethodData, ['info', 'billingAddress'], null);\r\n\r\n            if (paymentMethodData === null) {\r\n                return null;\r\n            }\r\n\r\n            if (billingAddress === null) {\r\n                return null;\r\n            }\r\n\r\n            return {\r\n                firstname: billingAddress.name.substring(0, billingAddress.name.indexOf(' ')),\r\n                lastname: billingAddress.name.substring(billingAddress.name.indexOf(' ') + 1),\r\n                telephone: removeNonDigitCharacters(_.get(billingAddress, 'phoneNumber', '')),\r\n                street: [\r\n                    billingAddress.address1,\r\n                    billingAddress.address2\r\n                ],\r\n                city: billingAddress.locality,\r\n                regionCode: _.get(billingAddress, 'administrativeArea', ''),\r\n                postcode: billingAddress.postalCode,\r\n                countryId: billingAddress.countryCode\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Get the shipping address data as required for 3D Secure verification.\r\n         *\r\n         * For First & last name, use a simple split by space.\r\n         *\r\n         * @return {?Object}\r\n         */\r\n        getThreeDSecureShippingAddressData: function () {\r\n            let shippingAddress = paymentDataModel.getShippingAddress();\r\n\r\n            if (shippingAddress === null) {\r\n                return null;\r\n            }\r\n\r\n            return {\r\n                firstname: shippingAddress.name.substring(0, shippingAddress.name.indexOf(' ')),\r\n                lastname: shippingAddress.name.substring(shippingAddress.name.indexOf(' ') + 1),\r\n                telephone: removeNonDigitCharacters(_.get(shippingAddress, 'phoneNumber', '')),\r\n                street: [\r\n                    shippingAddress.address1,\r\n                    shippingAddress.address2\r\n                ],\r\n                city: shippingAddress.locality,\r\n                regionCode: _.get(shippingAddress, 'administrativeArea', ''),\r\n                postcode: shippingAddress.postalCode,\r\n                countryId: shippingAddress.countryCode\r\n            };\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/googlepay/button.js":"/**\r\n * Braintree Google Pay button\r\n **/\r\ndefine(\r\n    [\r\n        'uiComponent',\r\n        'underscore',\r\n        'knockout',\r\n        'jquery',\r\n        'Magento_Checkout/js/model/payment/additional-validators',\r\n        'Magento_CheckoutAgreements/js/view/checkout-agreements',\r\n        'PayPal_Braintree/js/googlepay/model/parsed-response',\r\n        'PayPal_Braintree/js/googlepay/model/payment-data',\r\n        'PayPal_Braintree/js/view/payment/adapter',\r\n        'braintree',\r\n        'braintreeDataCollector',\r\n        'braintreeGooglePay',\r\n        'mage/translate',\r\n        'googlePayLibrary'\r\n    ],\r\n    function (\r\n        Component,\r\n        _,\r\n        ko,\r\n        $,\r\n        additionalValidators,\r\n        checkoutAgreements,\r\n        parsedResponseModel,\r\n        paymentDataModel,\r\n        braintreeMainAdapter,\r\n        braintree,\r\n        dataCollector,\r\n        googlePay,\r\n        $t\r\n    ) {\r\n        'use strict';\r\n\r\n        return {\r\n            init: function (element, context) {\r\n\r\n                // No element or context\r\n                if (!element || !context) {\r\n                    return;\r\n                }\r\n\r\n                // Context must implement these methods\r\n                if (typeof context.getClientToken !== 'function') {\r\n                    console.error(\r\n                        'Braintree GooglePay Context passed does not provide a getClientToken method',\r\n                        context\r\n                    );\r\n                    return;\r\n                }\r\n                if (typeof context.getPaymentRequest !== 'function') {\r\n                    console.error(\r\n                        'Braintree GooglePay Context passed does not provide a getPaymentRequest method',\r\n                        context\r\n                    );\r\n                    return;\r\n                }\r\n                if (typeof context.startPlaceOrder !== 'function') {\r\n                    console.error(\r\n                        'Braintree GooglePay Context passed does not provide a startPlaceOrder method',\r\n                        context\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                // init google pay object\r\n                let paymentsClient = new window.google.payments.api.PaymentsClient({\r\n                        environment: context.getEnvironment()\r\n                    }),\r\n\r\n                    // Create a button within the KO element, as Google Pay can only be instantiated through\r\n                    // a valid on click event (ko onclick bind interferes with this).\r\n                    button = document.createElement('button'),\r\n                    color = context.getBtnColor() === 1 ? 'black' : 'white';\r\n\r\n                button.className = 'braintree-googlepay-button long ' + color;\r\n                button.title = $t('Buy with Google Pay');\r\n\r\n                // init braintree api\r\n                braintree.create({\r\n                    authorization: context.getClientToken()\r\n                }, function (clientErr, clientInstance) {\r\n                    this.initGooglePay(clientErr, clientInstance, paymentsClient, button, element, context);\r\n                }.bind(this));\r\n            },\r\n\r\n            initGooglePay: function (clientErr, clientInstance, paymentsClient, button, element, context) {\r\n                if (clientErr) {\r\n                    console.error('Error creating client:', clientErr);\r\n                    return;\r\n                }\r\n                dataCollector.create({\r\n                    client: clientInstance\r\n                }, function (dataCollectorErr, dataCollectorInstance) {\r\n                    if (dataCollectorErr) {\r\n                        return;\r\n                    }\r\n                    googlePay.create({\r\n                        client: clientInstance,\r\n                        googlePayVersion: 2\r\n                    }, function (googlePayErr, googlePaymentInstance) {\r\n                        this.render(\r\n                            clientInstance,\r\n                            googlePayErr,\r\n                            googlePaymentInstance,\r\n                            dataCollectorInstance,\r\n                            paymentsClient,\r\n                            button,\r\n                            element,\r\n                            context\r\n                        );\r\n                    }.bind(this));\r\n                }.bind(this));\r\n            },\r\n\r\n            render: function (clientInstance, googlePayErr, googlePaymentInstance,\r\n                dataCollectorInstance, paymentsClient, button, element, context) {\r\n                // No instance\r\n                if (googlePayErr) {\r\n                    console.error('Braintree GooglePay Error creating googlePayInstance:', googlePayErr);\r\n                    return;\r\n                }\r\n\r\n                /**\r\n                 * Assign existing client instance to braintree adapter to use existing one\r\n                 * otherwise new client instance needs to be created for 3DS verification\r\n                 * which calls the Braintree Client & Device Collector SDK twice and\r\n                 * makes process slow.\r\n                 */\r\n                braintreeMainAdapter.clientInstance = clientInstance;\r\n                braintreeMainAdapter.deviceData = dataCollectorInstance.deviceData;\r\n\r\n                paymentsClient.isReadyToPay({\r\n                    apiVersion: 2,\r\n                    apiVersionMinor: 0,\r\n                    allowedPaymentMethods: googlePaymentInstance.createPaymentDataRequest().allowedPaymentMethods\r\n                }).then(function (response) {\r\n                    if (response.result) {\r\n                        button.addEventListener('click', function (event) {\r\n                            let agreements = checkoutAgreements().agreements,\r\n                                shouldDisableActions = false;\r\n\r\n                            _.each(agreements, function (item) {\r\n                                if (checkoutAgreements().isAgreementRequired(item)) {\r\n                                    let inputId = '#agreement_braintree_googlepay_' + item.agreementId,\r\n                                        inputEl = document.querySelector(inputId);\r\n\r\n                                    if (inputEl !== null && !inputEl.checked) {\r\n                                        shouldDisableActions = true;\r\n                                    }\r\n\r\n                                }\r\n                            });\r\n\r\n                            if ($(button).parents('#braintree-googlepay-express-payment').length === 0\r\n                                && !additionalValidators.validate(false)) {\r\n                                event.preventDefault();\r\n                                return false;\r\n                            }\r\n\r\n                            if (!shouldDisableActions) {\r\n                                event.preventDefault();\r\n                                $('body').loader('show');\r\n\r\n                                let paymentDataRequest = googlePaymentInstance.createPaymentDataRequest(\r\n                                    context.getPaymentRequest()\r\n                                );\r\n\r\n                                paymentsClient.loadPaymentData(paymentDataRequest).then(function (paymentData) {\r\n                                    // Persist the paymentData (shipping address etc.)\r\n                                    paymentDataModel.setPaymentMethodData(_.get(\r\n                                        paymentData,\r\n                                        'paymentMethodData',\r\n                                        null\r\n                                    ));\r\n                                    paymentDataModel.setEmail(_.get(paymentData, 'email', ''));\r\n                                    paymentDataModel.setShippingAddress(_.get(\r\n                                        paymentData,\r\n                                        'shippingAddress',\r\n                                        null\r\n                                    ));\r\n                                    // Return the braintree nonce promise\r\n                                    return googlePaymentInstance.parseResponse(paymentData);\r\n                                }).then(function (result) {\r\n                                    parsedResponseModel.setNonce(result.nonce);\r\n                                    parsedResponseModel.setIsNetworkTokenized(_.get(\r\n                                        result,\r\n                                        ['details', 'isNetworkTokenized'],\r\n                                        false\r\n                                    ));\r\n                                    parsedResponseModel.setBin(_.get(\r\n                                        result,\r\n                                        ['details', 'bin'],\r\n                                        null\r\n                                    ));\r\n\r\n                                    context.startPlaceOrder(dataCollectorInstance.deviceData);\r\n                                    $('body').loader('hide');\r\n                                }).catch(function (err) {\r\n                                    // Handle errors\r\n                                    // err = {statusCode: \"CANCELED\"}\r\n                                    console.error(err);\r\n                                    parsedResponseModel.resetDefaultData();\r\n                                    $('body').loader('hide');\r\n                                });\r\n                            }\r\n                        });\r\n                        element.appendChild(button);\r\n                    }\r\n                }).catch(function (err) {\r\n                    console.error(err);\r\n                    $('body').loader('hide');\r\n                });\r\n            }\r\n        };\r\n    }\r\n);\r\n","PayPal_Braintree/js/googlepay/implementations/shortcut.js":"/**\r\n * Braintree Google Pay mini cart payment method integration.\r\n **/\r\ndefine(\r\n    [\r\n        'uiComponent',\r\n        'PayPal_Braintree/js/googlepay/button',\r\n        'PayPal_Braintree/js/googlepay/api',\r\n        'domReady!'\r\n    ],\r\n    function (\r\n        Component,\r\n        button,\r\n        buttonApi\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n\r\n            defaults: {\r\n                id: null,\r\n                clientToken: null,\r\n                merchantId: null,\r\n                currencyCode: null,\r\n                actionSuccess: null,\r\n                amount: null,\r\n                environment: 'TEST',\r\n                cardType: [],\r\n                btnColor: 0,\r\n                threeDSecure: null\r\n            },\r\n\r\n            /**\r\n             * @returns {Object}\r\n             */\r\n            initialize: function () {\r\n                this._super();\r\n\r\n                /* Add client token & environment to 3DS Config */\r\n                this.threeDSecure.clientToken = this.clientToken;\r\n                this.threeDSecure.environment = this.environment;\r\n\r\n                let api = new buttonApi();\r\n\r\n                api.setEnvironment(this.environment);\r\n                api.setCurrencyCode(this.currencyCode);\r\n                api.setClientToken(this.clientToken);\r\n                api.setMerchantId(this.merchantId);\r\n                api.setActionSuccess(this.actionSuccess);\r\n                api.setAmount(this.amount);\r\n                api.setCardTypes(this.cardTypes);\r\n                api.setBtnColor(this.btnColor);\r\n                api.setThreeDSecureValidatorConfig(this.threeDSecure);\r\n\r\n                // Attach the button\r\n                button.init(\r\n                    document.getElementById(this.id),\r\n                    api\r\n                );\r\n\r\n                return this;\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/googlepay/implementations/core-checkout/method-googlepay.js":"define([\r\n    'uiComponent',\r\n    'Magento_Checkout/js/model/payment/renderer-list'\r\n], function (Component, rendererList) {\r\n    'use strict';\r\n\r\n    let config = window.checkoutConfig.payment;\r\n\r\n    if (config['braintree_googlepay'].clientToken) {\r\n        rendererList.push({\r\n            type: 'braintree_googlepay',\r\n            component: 'PayPal_Braintree/js/googlepay/implementations/core-checkout/method-renderer/googlepay'\r\n        });\r\n    }\r\n\r\n    return Component.extend({});\r\n});\r\n","PayPal_Braintree/js/googlepay/implementations/core-checkout/method-renderer/googlepay.js":"/**\r\n * Braintree Google Pay payment method integration.\r\n **/\r\ndefine([\r\n    'underscore',\r\n    'Magento_Checkout/js/view/payment/default',\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Vault/js/view/payment/vault-enabler',\r\n    'PayPal_Braintree/js/googlepay/button',\r\n    'PayPal_Braintree/js/googlepay/model/parsed-response',\r\n    'PayPal_Braintree/js/view/payment/validator-handler'\r\n], function (\r\n    _,\r\n    Component,\r\n    quote,\r\n    VaultEnabler,\r\n    GooglePayButton,\r\n    parsedResponseModel,\r\n    validatorManager\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/googlepay/core-checkout',\r\n            validatorManager: validatorManager,\r\n            paymentMethodNonce: null,\r\n            creditCardBin: null,\r\n            deviceData: null,\r\n            grandTotalAmount: 0,\r\n            vaultEnabler: null,\r\n            additionalData: {}\r\n        },\r\n\r\n        /**\r\n         * @returns {exports.initialize}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.vaultEnabler = new VaultEnabler();\r\n            this.vaultEnabler.setPaymentCode(this.getVaultCode());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Inject the Google Pay button into the target element\r\n         */\r\n        getGooglePayBtn: function (id) {\r\n            GooglePayButton.init(\r\n                document.getElementById(id),\r\n                this\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Subscribe to grand totals\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n            this.vaultEnabler = new VaultEnabler();\r\n            this.vaultEnabler.setPaymentCode(this.getVaultCode());\r\n\r\n            this.validatorManager.initialize();\r\n\r\n            this.grandTotalAmount = parseFloat(quote.totals()['base_grand_total']).toFixed(2);\r\n            this.currencyCode = quote.totals()['base_currency_code'];\r\n\r\n            quote.totals.subscribe(function () {\r\n                if (this.grandTotalAmount !== quote.totals()['base_grand_total']) {\r\n                    this.grandTotalAmount = parseFloat(quote.totals()['base_grand_total']).toFixed(2);\r\n                }\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Google Pay place order method\r\n         */\r\n        startPlaceOrder: function (device_data) {\r\n            let self = this;\r\n\r\n            /* Set the nonce & bin and trigger 3DS if card is not network tokenized */\r\n            self.paymentMethodNonce = parsedResponseModel.getNonce();\r\n            self.creditCardBin = parsedResponseModel.getBin();\r\n\r\n            if (parsedResponseModel.getIsNetworkTokenized() === false) {\r\n                // place order on success validation\r\n                self.validatorManager.validate(self, function () {\r\n                    self.setDeviceData(device_data);\r\n                    return self.placeOrder('parent');\r\n                }, function () {\r\n                    self.paymentMethodNonce = null;\r\n                    self.creditCardBin = null;\r\n                });\r\n            } else {\r\n                self.setDeviceData(device_data);\r\n                self.placeOrder();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save device_data\r\n         */\r\n        setDeviceData: function (device_data) {\r\n            this.deviceData = device_data;\r\n        },\r\n\r\n        /**\r\n         * Retrieve the client token\r\n         * @returns null|string\r\n         */\r\n        getClientToken: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n        },\r\n\r\n        /**\r\n         * Payment request info\r\n         */\r\n        getPaymentRequest: function () {\r\n            let result = {\r\n                transactionInfo: {\r\n                    totalPriceStatus: 'FINAL',\r\n                    totalPrice: this.grandTotalAmount,\r\n                    currencyCode: this.currencyCode\r\n                },\r\n                allowedPaymentMethods: [\r\n                    {\r\n                        'type': 'CARD',\r\n                        'parameters': {\r\n                            'allowedCardNetworks': this.getCardTypes(),\r\n                            'billingAddressRequired': true,\r\n                            'billingAddressParameters': {\r\n                                format: 'FULL',\r\n                                phoneNumberRequired: true\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                ],\r\n                shippingAddressRequired: false,\r\n                emailRequired: false\r\n            };\r\n\r\n            if (this.getEnvironment() !== 'TEST') {\r\n                result.merchantInfo = { merchantId: this.getMerchantId() };\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Merchant display name\r\n         */\r\n        getMerchantId: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].merchantId;\r\n        },\r\n\r\n        /**\r\n         * Environment\r\n         */\r\n        getEnvironment: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].environment;\r\n        },\r\n\r\n        /**\r\n         * Card Types\r\n         */\r\n        getCardTypes: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].cardTypes;\r\n        },\r\n\r\n        /**\r\n         * BTN Color\r\n         */\r\n        getBtnColor: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].btnColor;\r\n        },\r\n\r\n        /**\r\n         * Get data\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            let data = {\r\n                'method': this.getCode(),\r\n                'additional_data': {\r\n                    'payment_method_nonce': this.paymentMethodNonce,\r\n                    'device_data': this.deviceData,\r\n                    'is_network_tokenized': parsedResponseModel.getIsNetworkTokenized()\r\n                }\r\n            };\r\n\r\n            if (parsedResponseModel.getIsNetworkTokenized() === false) {\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n                this.vaultEnabler.visitAdditionalData(data);\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Return image url for the Google Pay mark\r\n         */\r\n        getPaymentMarkSrc: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].paymentMarkSrc;\r\n        },\r\n\r\n        /**\r\n         * @returns {Boolean}\r\n         */\r\n        isVaultEnabled: function () {\r\n            return this.vaultEnabler.isVaultEnabled();\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getVaultCode: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].vaultCode;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/googlepay/implementations/shortcut/3d-secure.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'mage/translate',\r\n    'braintreeThreeDSecure',\r\n    'PayPal_Braintree/js/googlepay/implementations/shortcut/adapter',\r\n    'PayPal_Braintree/js/helper/escape-non-ascii-characters',\r\n    'PayPal_Braintree/js/helper/remove-non-digit-characters',\r\n    'PayPal_Braintree/js/helper/format-amount',\r\n    'PayPal_Braintree/js/model/full-screen-loader'\r\n], function (\r\n    _,\r\n    $,\r\n    $t,\r\n    threeDSecure,\r\n    braintree,\r\n    escapeNonAsciiCharacters,\r\n    removeNonDigitCharacters,\r\n    formatAmount,\r\n    defaultFullScreenLoader\r\n) {\r\n    'use strict';\r\n\r\n    /**\r\n     * 3D Secure implementation generic enough to be used for GooglePay button payments.\r\n     *\r\n     * This can be used in other pages along with the basket page, but not in the checkout page when placing an order.\r\n     */\r\n    return {\r\n        code: 'three_d_secure',\r\n        fullScreenLoader: defaultFullScreenLoader,\r\n        config: null,\r\n        billingAddress: null,\r\n        shippingAddress: null,\r\n        totalAmount: null,\r\n\r\n        /**\r\n         * Get code.\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getCode: function () {\r\n            return this.code;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @return {boolean}\r\n         */\r\n        isEnabled: function () {\r\n            return this.config !== null ? _.get(this.config, ['enabled'], false) : false;\r\n        },\r\n\r\n        /**\r\n         * Set the full screen loader implementation.\r\n         *\r\n         * @param fullScreenLoader\r\n         */\r\n        setFullScreenLoader: function (fullScreenLoader) {\r\n            this.fullScreenLoader = fullScreenLoader;\r\n        },\r\n\r\n        /**\r\n         * Get the full screen loader implementation.\r\n         */\r\n        getFullScreenLoader: function () {\r\n            return this.fullScreenLoader;\r\n        },\r\n\r\n        /**\r\n         * Set 3d secure config.\r\n         *\r\n         * @param {object} config\r\n         */\r\n        setConfig: function (config) {\r\n            this.config = config;\r\n            this.config.thresholdAmount = parseFloat(_.get(config, 'thresholdAmount', '0.0'));\r\n        },\r\n\r\n        /**\r\n         * Get the billing address data.\r\n         */\r\n        getBillingAddress: function () {\r\n            return this.billingAddress;\r\n        },\r\n\r\n        /**\r\n         * Set the billing address data.\r\n         *\r\n         * @param {object} value\r\n         */\r\n        setBillingAddress: function (value) {\r\n            this.billingAddress = value;\r\n        },\r\n\r\n        /**\r\n         * Get the shipping address data.\r\n         */\r\n        getShippingAddress: function () {\r\n            return this.shippingAddress;\r\n        },\r\n\r\n        /**\r\n         * Set the shipping address data.\r\n         *\r\n         * @param {object} value\r\n         */\r\n        setShippingAddress: function (value) {\r\n            this.shippingAddress = value;\r\n        },\r\n\r\n        /**\r\n         * Get the total amount to be charged.\r\n         */\r\n        getTotalAmount: function () {\r\n            return this.totalAmount;\r\n        },\r\n\r\n        /**\r\n         * Set the full screen loader implementation.\r\n         *\r\n         * @param {string} value\r\n         */\r\n        setTotalAmount: function (value) {\r\n            this.totalAmount = formatAmount(value);\r\n        },\r\n\r\n        /**\r\n         * Get the Braintree environment.\r\n         *\r\n         * @return {string|null}\r\n         */\r\n        getEnvironment: function () {\r\n            return _.get(this.config, 'environment', 'TEST');\r\n        },\r\n\r\n        /**\r\n         * Get the Braintree Client Token.\r\n         *\r\n         * @return {string|null}\r\n         */\r\n        getClientToken: function () {\r\n            return _.get(this.config, 'clientToken', null);\r\n        },\r\n\r\n        /**\r\n         * Check minimal amount for 3d secure activation.\r\n         *\r\n         * @param {Number} amount\r\n         * @returns {Boolean}\r\n         */\r\n        isAmountAvailable: function (amount) {\r\n            amount = parseFloat(amount.toString());\r\n\r\n            return amount >= this.config.thresholdAmount;\r\n        },\r\n\r\n        /**\r\n         * Check if current country is available for 3d secure.\r\n         *\r\n         * @param {String} countryId\r\n         * @returns {Boolean}\r\n         */\r\n        isCountryAvailable: function (countryId) {\r\n            let key,\r\n                specificCountries = _.get(this.config, 'specificCountries', []);\r\n\r\n            // all countries are available\r\n            if (!specificCountries.length) {\r\n                return true;\r\n            }\r\n\r\n            for (key in specificCountries) {\r\n                if (countryId === specificCountries[key]) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Check billing/shipping address line lengths\r\n         *\r\n         * @param errorMessage\r\n         * @param billingAddress\r\n         * @param shippingAddress\r\n         * @returns {*}\r\n         */\r\n        checkBillingLineLengths: function (errorMessage, billingAddress, shippingAddress) {\r\n            let lineError = null;\r\n\r\n            if (billingAddress.street[0].length > 50 || shippingAddress.street[0].length > 50) {\r\n                lineError = 'line1';\r\n            } else if (billingAddress.street[1].length > 50 || shippingAddress.street[1].length > 50) {\r\n                lineError = 'line2';\r\n            }\r\n\r\n            if (lineError) {\r\n                let error = `Billing/Shipping ${lineError} must be string and less than 50 characters.`;\r\n\r\n                return $t(`${error} Please update the address and try again.`);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the challenge requested config (default false).\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        getChallengeRequested: function () {\r\n            return _.get(this.config, 'challengeRequested', false);\r\n        },\r\n\r\n        /**\r\n         * Get Customer's IP Address\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        getIpAddress: function () {\r\n            return _.get(this.config, 'ipAddress', '');\r\n        },\r\n\r\n        /**\r\n         * Trigger 3DS verification & validate Braintree payment nonce.\r\n         *\r\n         * @param {Object} context\r\n         * @returns {Object}\r\n         */\r\n        validate: function (context) {\r\n            let self = this,\r\n                clientInstance = braintree.getApiClient(),\r\n                state = $.Deferred(),\r\n                billingAddress = self.getBillingAddress(),\r\n                shippingAddress = self.getShippingAddress(),\r\n                setup3d;\r\n\r\n            // Handle billing address region code\r\n            if (billingAddress.regionCode == null) {\r\n                billingAddress.regionCode = undefined;\r\n            }\r\n            if (billingAddress.regionCode !== undefined && billingAddress.regionCode.length > 2) {\r\n                billingAddress.regionCode = undefined;\r\n            }\r\n\r\n            // Handle shipping address region code\r\n            if (shippingAddress.regionCode == null) {\r\n                shippingAddress.regionCode = undefined;\r\n            }\r\n            if (shippingAddress.regionCode !== undefined && shippingAddress.regionCode.length > 2) {\r\n                shippingAddress.regionCode = undefined;\r\n            }\r\n\r\n            if (!self.isAmountAvailable(self.getTotalAmount()) || !self.isCountryAvailable(billingAddress.countryId)) {\r\n                state.resolve();\r\n                return state.promise();\r\n            }\r\n\r\n            self.getFullScreenLoader().startLoader();\r\n\r\n            setup3d = function (client) {\r\n                threeDSecure.create({\r\n                    version: 2,\r\n                    client: client\r\n                }, function (threeDSecureErr, threeDSecureInstance) {\r\n                    if (threeDSecureErr) {\r\n                        self.getFullScreenLoader().stopLoader();\r\n                        return state.reject($t('Please try again with another form of payment.'));\r\n                    }\r\n\r\n                    let threeDSContainer = document.createElement('div'),\r\n                        tdMask = document.createElement('div'),\r\n                        tdFrame = document.createElement('div'),\r\n                        tdBody = document.createElement('div'),\r\n                        threeDSecureParameters;\r\n\r\n                    threeDSContainer.className = 'braintree-three-d-modal';\r\n                    tdMask.className = 'bt-mask';\r\n                    tdFrame.className = 'bt-modal-frame';\r\n                    tdBody.className = 'bt-modal-body';\r\n\r\n                    tdFrame.appendChild(tdBody);\r\n                    threeDSContainer.appendChild(tdMask);\r\n                    threeDSContainer.appendChild(tdFrame);\r\n\r\n                    threeDSecureParameters = {\r\n                        amount: self.getTotalAmount(),\r\n                        nonce: context.paymentMethodNonce,\r\n                        bin: context.creditCardBin,\r\n                        collectDeviceData: true,\r\n                        challengeRequested: self.getChallengeRequested(),\r\n                        billingAddress: {\r\n                            givenName: escapeNonAsciiCharacters(billingAddress.firstname),\r\n                            surname: escapeNonAsciiCharacters(billingAddress.lastname),\r\n                            phoneNumber: billingAddress.telephone !== null\r\n                                ? removeNonDigitCharacters(billingAddress.telephone)\r\n                                : billingAddress.telephone,\r\n                            streetAddress: billingAddress.street[0],\r\n                            extendedAddress: billingAddress.street[1],\r\n                            locality: billingAddress.city,\r\n                            region: billingAddress.regionCode,\r\n                            postalCode: billingAddress.postcode,\r\n                            countryCodeAlpha2: billingAddress.countryId\r\n                        },\r\n                        additionalInformation: {\r\n                            shippingGivenName: escapeNonAsciiCharacters(shippingAddress.firstname),\r\n                            shippingSurname: escapeNonAsciiCharacters(shippingAddress.lastname),\r\n                            shippingAddress: {\r\n                                streetAddress: shippingAddress.street[0],\r\n                                extendedAddress: shippingAddress.street[1],\r\n                                locality: shippingAddress.city,\r\n                                region: shippingAddress.regionCode,\r\n                                postalCode: shippingAddress.postcode,\r\n                                countryCodeAlpha2: shippingAddress.countryId\r\n                            },\r\n                            shippingPhone: shippingAddress.telephone !== null\r\n                                ? removeNonDigitCharacters(shippingAddress.telephone)\r\n                                : shippingAddress.telephone,\r\n                            ipAddress: self.getIpAddress()\r\n                        },\r\n                        onLookupComplete: function (data, next) {\r\n                            next();\r\n                        },\r\n                        addFrame: function (err, iframe) {\r\n                            self.getFullScreenLoader().stopLoader();\r\n\r\n                            if (err) {\r\n                                console.log('Unable to verify card over 3D Secure', err);\r\n                                return state.reject($t('Please try again with another form of payment.'));\r\n                            }\r\n\r\n                            tdBody.appendChild(iframe);\r\n                            document.body.appendChild(threeDSContainer);\r\n                        },\r\n                        removeFrame: function () {\r\n                            self.getFullScreenLoader().startLoader();\r\n                            document.body.removeChild(threeDSContainer);\r\n                        }\r\n                    };\r\n\r\n                    if (_.has(context, 'email') && context.email !== null) {\r\n                        threeDSecureParameters.email = context.email;\r\n                    }\r\n\r\n                    threeDSecureInstance.verifyCard(threeDSecureParameters, function (err, response) {\r\n                        self.getFullScreenLoader().stopLoader();\r\n\r\n                        if (err) {\r\n                            console.error('3DSecure validation failed', err);\r\n                            if (err.code === 'THREEDS_LOOKUP_VALIDATION_ERROR') {\r\n                                let errorMessage = err.details.originalError.details.originalError.error.message,\r\n                                    error = self.checkBillingLineLengths(errorMessage, billingAddress, shippingAddress);\r\n\r\n                                return error ? state.reject(error) : state.reject($t(errorMessage));\r\n                            }\r\n\r\n                            return state.reject($t('Please try again with another form of payment.'));\r\n                        }\r\n\r\n                        let liability = {\r\n                            shifted: response.liabilityShifted,\r\n                            shiftPossible: response.liabilityShiftPossible\r\n                        };\r\n\r\n                        if (liability.shifted || !liability.shifted && !liability.shiftPossible) {\r\n                            context.paymentMethodNonce = response.nonce;\r\n                            state.resolve();\r\n                        } else {\r\n                            state.reject($t('Please try again with another form of payment.'));\r\n                        }\r\n                    }.bind(this));\r\n                });\r\n            };\r\n\r\n            if (!clientInstance) {\r\n                self.createClientInstance(setup3d);\r\n            } else {\r\n                setup3d(clientInstance);\r\n            }\r\n\r\n            return state.promise();\r\n        },\r\n\r\n        /**\r\n         * Create a Braintree client instance with simplified form.\r\n         *\r\n         * @param {Function} setupThreeDSecureCallback\r\n         * @return {*}\r\n         */\r\n        createClientInstance: function (setupThreeDSecureCallback) {\r\n            let self = this;\r\n\r\n            return require(['PayPal_Braintree/js/googlepay/implementations/shortcut/form'], function (c) {\r\n                c.defaults.clientConfig.clientToken = self.getClientToken();\r\n                c.defaults.clientConfig.environment = self.getEnvironment();\r\n                braintree.setConfig(c.defaults.clientConfig);\r\n                braintree.setup(setupThreeDSecureCallback);\r\n            });\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/googlepay/implementations/shortcut/adapter.js":"/*browser:true*/\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'mage/translate',\r\n    'braintree',\r\n    'PayPal_Braintree/js/model/full-screen-loader',\r\n    'Magento_Ui/js/model/messageList'\r\n], function (\r\n    _,\r\n    $,\r\n    $t,\r\n    client,\r\n    defaultFullScreenLoader,\r\n    globalMessageList\r\n) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Braintree Client adapter implementation generic enough to be used for GooglePay button payments.\r\n     *\r\n     * This can be used in other pages along with the basket page, but not in the checkout page when placing an order.\r\n     */\r\n    return {\r\n        fullScreenLoader: defaultFullScreenLoader,\r\n        apiClient: null,\r\n        config: {},\r\n        checkout: null,\r\n        clientInstance: null,\r\n        code: 'braintree',\r\n\r\n        /**\r\n         * {Object}\r\n         */\r\n        events: {\r\n            onClick: null,\r\n            onCancel: null,\r\n            onError: null\r\n        },\r\n\r\n        /**\r\n         * Get Braintree api client.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getApiClient: function () {\r\n            return this.clientInstance;\r\n        },\r\n\r\n        /**\r\n         * Set configuration.\r\n         *\r\n         * @param {Object} config\r\n         */\r\n        setConfig: function (config) {\r\n            this.config = config;\r\n\r\n            if (_.has(this.config, 'code')) {\r\n                this.code = this.config.code;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get payment name.\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getCode: function () {\r\n            return this.code;\r\n        },\r\n\r\n        /**\r\n         * Get client token\r\n         *\r\n         * @returns {string|*}\r\n         */\r\n        getClientToken: function () {\r\n            return this.config.hasOwnProperty('clientToken') ? this.config.clientToken : null;\r\n        },\r\n\r\n        /**\r\n         * @returns {string}\r\n         */\r\n        getEnvironment: function () {\r\n            return this.config.hasOwnProperty('environment') ? this.config.environment : null;\r\n        },\r\n\r\n        /**\r\n         * Set fullscreen loader implementation allowing to use custom.\r\n         *\r\n         * @param {Function} fullScreenLoader\r\n         */\r\n        setFullScreenLoader: function (fullScreenLoader) {\r\n            this.fullScreenLoader = fullScreenLoader;\r\n        },\r\n\r\n        /**\r\n         * Get the full screen loader implementation.\r\n         *\r\n         * @return {Object}\r\n         */\r\n        getFullScreenLoader: function () {\r\n            return this.fullScreenLoader;\r\n        },\r\n\r\n        /**\r\n         * Show error message\r\n         *\r\n         * @param {string} errorMessage\r\n         */\r\n        showError: function (errorMessage) {\r\n            globalMessageList.addErrorMessage({\r\n                message: errorMessage\r\n            });\r\n\r\n            this.getFullScreenLoader().stopLoader(true);\r\n        },\r\n\r\n        /**\r\n         * Setup Braintree SDK.\r\n         *\r\n         * @param {Function|null} callback\r\n         */\r\n        setup: function (callback = null) {\r\n            if (!this.getClientToken()) {\r\n                this.showError($t('Sorry, but something went wrong.'));\r\n                return;\r\n            }\r\n\r\n            if (this.clientInstance) {\r\n                if (typeof this.config.onReady === 'function') {\r\n                    this.config.onReady(this);\r\n                }\r\n\r\n                if (typeof callback === 'function') {\r\n                    callback(this.clientInstance);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            client.create({\r\n                authorization: this.getClientToken()\r\n            }, function (clientErr, clientInstance) {\r\n                if (clientErr) {\r\n                    console.error('Braintree Setup Error', clientErr);\r\n                    return this.showError('Sorry, but something went wrong. Please contact the store owner.');\r\n                }\r\n\r\n                this.clientInstance = clientInstance;\r\n\r\n                if (typeof this.config.onReady === 'function') {\r\n                    this.config.onReady(this);\r\n                }\r\n\r\n                if (typeof callback === 'function') {\r\n                    callback(this.clientInstance);\r\n                }\r\n            }.bind(this));\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/googlepay/implementations/shortcut/form.js":"/*browser:true*/\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'uiComponent'\r\n], function (_, $, Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            braintreeClient: null,\r\n            code: 'braintree',\r\n            isProcessing: false,\r\n\r\n            /**\r\n             * Braintree client configuration\r\n             *\r\n             * {Object}\r\n             */\r\n            clientConfig: {\r\n                onReady: function () {},\r\n\r\n                /**\r\n                 * Triggers on payment nonce receive\r\n                 */\r\n                onPaymentMethodReceived: function () {\r\n                    this.isProcessing = false;\r\n                },\r\n\r\n                /**\r\n                 * Allow a new nonce to be generated\r\n                 */\r\n                onPaymentMethodError: function () {\r\n                    this.isProcessing = false;\r\n                },\r\n\r\n                /**\r\n                 * After Braintree instance initialization\r\n                 */\r\n                onInstanceReady: function () {},\r\n\r\n                /**\r\n                 * Triggers on any Braintree error\r\n                 * @param {Object} response\r\n                 */\r\n                onError: function (response) {\r\n                    this.isProcessing = false;\r\n                    throw response.message;\r\n                },\r\n\r\n                /**\r\n                 * Triggers when customer click \"Cancel\"\r\n                 */\r\n                onCancelled: function () {\r\n                    this.isProcessing = false;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         *\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n\r\n            this.initClientConfig();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get payment name\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return this.code;\r\n        },\r\n\r\n        /**\r\n         * Init config\r\n         */\r\n        initClientConfig: function () {\r\n            _.each(this.clientConfig, function (fn, name) {\r\n                if (typeof fn === 'function') {\r\n                    this.clientConfig[name] = fn.bind(this);\r\n                }\r\n            }, this);\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/googlepay/model/parsed-response.js":"define([\r\n    'underscore',\r\n    'ko'\r\n], function (_, ko) {\r\n    'use strict';\r\n\r\n    let nonce = ko.observable(null),\r\n        isNetworkTokenized = ko.observable(false),\r\n        bin = ko.observable(null);\r\n\r\n    return {\r\n        nonce: nonce,\r\n        isNetworkTokenized: isNetworkTokenized,\r\n        bin: bin,\r\n\r\n        /**\r\n         * Get the payment nonce.\r\n         *\r\n         * @return {?string}\r\n         */\r\n        getNonce: function () {\r\n            return this.nonce();\r\n        },\r\n\r\n        /**\r\n         * Set the payment nonce.\r\n         *\r\n         * @param {?string} value\r\n         * @return {void}\r\n         */\r\n        setNonce: function (value) {\r\n            this.nonce(_.isString(value) ? value : null);\r\n        },\r\n\r\n        /**\r\n         * Get is network tokenized property for used card.\r\n         *\r\n         * @return {boolean}\r\n         */\r\n        getIsNetworkTokenized: function () {\r\n            return this.isNetworkTokenized();\r\n        },\r\n\r\n        /**\r\n         * Set is network tokenized property for used card.\r\n         *\r\n         * @param {boolean} value\r\n         * @return {void}\r\n         */\r\n        setIsNetworkTokenized: function (value) {\r\n            this.isNetworkTokenized(_.isBoolean(value) ? value : false);\r\n        },\r\n\r\n        /**\r\n         * Get card bin.\r\n         *\r\n         * @return {?string}\r\n         */\r\n        getBin: function () {\r\n            return this.bin();\r\n        },\r\n\r\n        /**\r\n         * Set the card bin.\r\n         *\r\n         * @param {?string} value\r\n         * @return {void}\r\n         */\r\n        setBin: function (value) {\r\n            this.bin(_.isString(value) ? value : null);\r\n        },\r\n\r\n        /**\r\n         * Reset data to default.\r\n         */\r\n        resetDefaultData: function () {\r\n            this.setNonce(null);\r\n            this.setIsNetworkTokenized(false);\r\n            this.setBin(null);\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/googlepay/model/payment-data.js":"define([\r\n    'underscore',\r\n    'ko'\r\n], function (_, ko) {\r\n    'use strict';\r\n\r\n    let paymentMethodData = ko.observable(null),\r\n        email = ko.observable(null),\r\n        shippingAddress = ko.observable(null);\r\n\r\n    return {\r\n        paymentMethodData: paymentMethodData,\r\n        email: email,\r\n        shippingAddress: shippingAddress,\r\n\r\n        /**\r\n         * Get Google Pay payment method data details.\r\n         *\r\n         * @return {?Object}\r\n         */\r\n        getPaymentMethodData: function () {\r\n            return this.paymentMethodData();\r\n        },\r\n\r\n        /**\r\n         * Set Google Pay payment method data details.\r\n         *\r\n         * @param {?Object} value\r\n         * @return {void}\r\n         */\r\n        setPaymentMethodData: function (value) {\r\n            this.paymentMethodData(_.isObject(value) ? value : null);\r\n        },\r\n\r\n        /**\r\n         * Get Google Pay email.\r\n         *\r\n         * @return {?string}\r\n         */\r\n        getEmail: function () {\r\n            return this.email();\r\n        },\r\n\r\n        /**\r\n         * Set Google Pay email.\r\n         *\r\n         * @param {?string} value\r\n         * @return {void}\r\n         */\r\n        setEmail: function (value) {\r\n            this.email(_.isString(value) ? value : null);\r\n        },\r\n\r\n        /**\r\n         * Get Google Pay shipping address.\r\n         *\r\n         * @return {?Object}\r\n         */\r\n        getShippingAddress: function () {\r\n            return shippingAddress();\r\n        },\r\n\r\n        /**\r\n         * Set Google Pay shipping address.\r\n         *\r\n         * @param {?Object} value\r\n         * @return {void}\r\n         */\r\n        setShippingAddress: function (value) {\r\n            this.shippingAddress(_.isObject(value) ? value : null);\r\n        },\r\n\r\n        /**\r\n         * Reset data to default.\r\n         */\r\n        resetDefaultData: function () {\r\n            this.setPaymentMethodData(null);\r\n            this.setEmail(null);\r\n            this.setShippingAddress(null);\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/helper/create-client-token.js":"define(['jquery'], function ($) {\r\n    'use strict';\r\n\r\n    return function () {\r\n        return $.ajax({\r\n            method: 'POST',\r\n            url: '/graphql',\r\n            contentType: 'application/json',\r\n            data: JSON.stringify({\r\n                query: `\r\n                    mutation {\r\n                      createBraintreeClientToken\r\n                    }`\r\n            })\r\n        });\r\n    };\r\n});\r\n","PayPal_Braintree/js/helper/escape-non-ascii-characters.js":"define(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Convert Non-ASCII characters into unicode.\r\n     *\r\n     * @param {string} value\r\n     * @return {string}\r\n     */\r\n    return function (value) {\r\n        return value.split('').map(function (c) {\r\n            return /^[\\x00-\\x7F]$/.test(c) ? c : c.split('').map(function (a) {\r\n                return '\\\\u00' + a.charCodeAt(0).toString(16);\r\n            }).join('');\r\n        }).join('');\r\n    };\r\n});\r\n","PayPal_Braintree/js/helper/format-amount.js":"define(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Format amount (string) to two decimals.\r\n     *\r\n     * @param {string} str\r\n     * @return {string}\r\n     */\r\n    return function (amount) {\r\n        return parseFloat(amount).toFixed(2);\r\n    };\r\n});\r\n","PayPal_Braintree/js/helper/get-braintree-config.js":"define(['jquery'], function ($) {\r\n    'use strict';\r\n\r\n    return function () {\r\n        return $.ajax({\r\n            method: 'POST',\r\n            url: '/graphql',\r\n            contentType: 'application/json',\r\n            data: JSON.stringify({\r\n                query: `{\r\n                    storeConfig {\r\n                        braintree_merchant_account_id,\r\n                        braintree_3dsecure_verify_3dsecure,\r\n                        braintree_3dsecure_always_request_3ds,\r\n                        braintree_3dsecure_threshold_amount,\r\n                        braintree_3dsecure_allowspecific,\r\n                        braintree_3dsecure_specificcountry\r\n                    }\r\n                  }`\r\n            })\r\n        });\r\n    };\r\n});\r\n","PayPal_Braintree/js/helper/get-cart-line-items-helper.js":"define([\r\n    'jquery',\r\n    'underscore',\r\n    'PayPal_Braintree/js/helper/format-amount',\r\n    'PayPal_Braintree/js/helper/replace-unsupported-characters',\r\n    'Magento_Checkout/js/model/quote'\r\n], function (\r\n    $,\r\n    _,\r\n    formatAmount,\r\n    replaceUnsupportedCharacters,\r\n    quote\r\n) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Get line items\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    return function () {\r\n        let lineItems = [];\r\n\r\n        /**\r\n         * Line items array\r\n         *\r\n         * {Array}\r\n         */\r\n        var lineItemsArray = [\r\n            'name',\r\n            'kind',\r\n            'quantity',\r\n            'unitAmount',\r\n            'productCode',\r\n            'description'\r\n        ];\r\n\r\n        if (window.checkoutConfig.payment['braintree_paypal'].canSendLineItems) {\r\n            let giftWrappingItems = 0, giftWrappingOrder = 0, storeCredit = 0, giftCardAccount = 0,\r\n                giftWrappingPrintedCard = 0,\r\n                baseDiscountAmount = formatAmount(Math.abs(quote.totals()['base_discount_amount']).toString()),\r\n                baseTaxAmount = formatAmount(quote.totals()['base_tax_amount']);\r\n\r\n            $.each(quote.totals()['total_segments'], function (segmentsKey, segmentsItem) {\r\n                if (segmentsItem['code'] === 'customerbalance') {\r\n                    storeCredit = formatAmount(Math.abs(segmentsItem['value']).toString());\r\n                }\r\n                if (segmentsItem['code'] === 'giftcardaccount') {\r\n                    giftCardAccount = formatAmount(Math.abs(segmentsItem['value']).toString());\r\n                }\r\n                if (segmentsItem['code'] === 'giftwrapping') {\r\n                    let extensionAttributes = segmentsItem['extension_attributes'];\r\n\r\n                    giftWrappingOrder = extensionAttributes['gw_base_price'];\r\n                    giftWrappingItems = extensionAttributes['gw_items_base_price'];\r\n                    giftWrappingPrintedCard = extensionAttributes['gw_card_base_price'];\r\n                }\r\n            });\r\n\r\n            $.each(quote.getItems(), function (quoteItemKey, quoteItem) {\r\n                if (quoteItem.parent_item_id !== null || quoteItem.price === 0.0) {\r\n                    return true;\r\n                }\r\n\r\n                let floatQty = parseFloat(quoteItem.qty),\r\n                    itemName = replaceUnsupportedCharacters(quoteItem.name),\r\n                    itemSku = replaceUnsupportedCharacters(quoteItem.sku),\r\n                    hasQty = floatQty > Math.floor(floatQty) && floatQty < Math.ceil(floatQty),\r\n                    description = hasQty\r\n                        ? 'Item quantity is ' + floatQty.toFixed(2) + ' and per unit amount is '\r\n                            + parseFloat(quoteItem.price).toFixed(2)\r\n                        : '',\r\n                    itemUnitAmount = hasQty\r\n                        ? parseFloat(floatQty * parseFloat(quoteItem.price)) : parseFloat(quoteItem.price),\r\n                    itemQty = hasQty ? parseFloat('1') : floatQty,\r\n                    lineItemValues = [\r\n                        itemName,\r\n                        'debit',\r\n                        itemQty.toFixed(2),\r\n                        itemUnitAmount.toFixed(2),\r\n                        itemSku,\r\n                        description\r\n                    ],\r\n\r\n                    mappedLineItems = $.map(lineItemsArray, function (itemElement, itemIndex) {\r\n                        return [[\r\n                            lineItemsArray[itemIndex],\r\n                            lineItemValues[itemIndex]\r\n                        ]];\r\n                    });\r\n\r\n                lineItems[quoteItemKey] = Object.fromEntries(mappedLineItems);\r\n            });\r\n\r\n            /**\r\n             * Adds credit (refund or discount) kind as LineItems for the\r\n             * PayPal transaction if discount amount is greater than 0(Zero)\r\n             * as discountAmount lineItem field is not being used by PayPal.\r\n             *\r\n             * developer.paypal.com/braintree/docs/reference/response/transaction-line-item/php#discount_amount\r\n             */\r\n            if (baseDiscountAmount > 0) {\r\n                let discountLineItem = {\r\n                    'name': 'Discount',\r\n                    'kind': 'credit',\r\n                    'quantity': 1.00,\r\n                    'unitAmount': baseDiscountAmount\r\n                };\r\n\r\n                lineItems = $.merge(lineItems, [discountLineItem]);\r\n            }\r\n\r\n            /**\r\n             * Adds shipping as LineItems for the PayPal transaction\r\n             * if shipping amount is greater than 0(Zero) to manage\r\n             * the totals with client-side implementation as there is\r\n             * no any field exist in the client-side implementation\r\n             * to send the shipping amount to the Braintree.\r\n             */\r\n            if (quote.totals()['base_shipping_amount'] > 0) {\r\n                let shippingLineItem = {\r\n                    'name': 'Shipping',\r\n                    'kind': 'debit',\r\n                    'quantity': 1.00,\r\n                    'unitAmount': quote.totals()['base_shipping_amount']\r\n                };\r\n\r\n                lineItems = $.merge(lineItems, [shippingLineItem]);\r\n            }\r\n\r\n            if (baseTaxAmount > 0) {\r\n                let taxLineItem = {\r\n                    'name': 'Tax',\r\n                    'kind': 'debit',\r\n                    'quantity': 1.00,\r\n                    'unitAmount': baseTaxAmount\r\n                };\r\n\r\n                lineItems = $.merge(lineItems, [taxLineItem]);\r\n            }\r\n\r\n            /**\r\n             * Adds credit (Store Credit) kind as LineItems for the\r\n             * PayPal transaction if store credit is greater than 0(Zero)\r\n             * to manage the totals with client-side implementation\r\n             */\r\n            if (storeCredit > 0) {\r\n                let storeCreditItem = {\r\n                    'name': 'Store Credit',\r\n                    'kind': 'credit',\r\n                    'quantity': 1.00,\r\n                    'unitAmount': storeCredit\r\n                };\r\n\r\n                lineItems = $.merge(lineItems, [storeCreditItem]);\r\n            }\r\n\r\n            /**\r\n             * Adds Gift Wrapping for items as LineItems for the PayPal\r\n             * transaction if it is greater than 0(Zero) to manage\r\n             * the totals with client-side implementation\r\n             */\r\n            if (giftWrappingItems > 0) {\r\n                let gwItems = {\r\n                    'name': 'Gift Wrapping for Items',\r\n                    'kind': 'debit',\r\n                    'quantity': 1.00,\r\n                    'unitAmount': giftWrappingItems\r\n                };\r\n\r\n                lineItems = $.merge(lineItems, [gwItems]);\r\n            }\r\n\r\n            /**\r\n             * Adds Gift Wrapping for order as LineItems for the PayPal\r\n             * transaction if it is greater than 0(Zero) to manage\r\n             * the totals with client-side implementation\r\n             */\r\n            if (giftWrappingOrder > 0) {\r\n                let gwOrderItem = {\r\n                    'name': 'Gift Wrapping for Order',\r\n                    'kind': 'debit',\r\n                    'quantity': 1.00,\r\n                    'unitAmount': giftWrappingOrder\r\n                };\r\n\r\n                lineItems = $.merge(lineItems, [gwOrderItem]);\r\n            }\r\n\r\n            /**\r\n             * Adds Gift Wrapping Printed Card as LineItems for the PayPal\r\n             * transaction if it is greater than 0(Zero) to manage\r\n             * the totals with client-side implementation\r\n             */\r\n            if (giftWrappingPrintedCard > 0) {\r\n                let gwPrintedCard = {\r\n                    'name': 'Printed Card',\r\n                    'kind': 'debit',\r\n                    'quantity': 1.00,\r\n                    'unitAmount': giftWrappingPrintedCard\r\n                };\r\n\r\n                lineItems = $.merge(lineItems, [gwPrintedCard]);\r\n            }\r\n\r\n            /**\r\n             * Adds Gift Cards as credit LineItems for the PayPal\r\n             * transaction if it is greater than 0(Zero) to manage\r\n             * the totals with client-side implementation\r\n             */\r\n            if (giftCardAccount > 0) {\r\n                let giftCardItem = {\r\n                    'name': 'Gift Cards',\r\n                    'kind': 'credit',\r\n                    'quantity': 1.00,\r\n                    'unitAmount': giftCardAccount\r\n                };\r\n\r\n                lineItems = $.merge(lineItems, [giftCardItem]);\r\n            }\r\n\r\n            if (lineItems.length >= 250) {\r\n                lineItems = [];\r\n            }\r\n        }\r\n        return lineItems;\r\n    };\r\n});\r\n","PayPal_Braintree/js/helper/remove-non-digit-characters.js":"define([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Remove any non-digit characters from string.\r\n     *\r\n     * @param {string} value\r\n     * @return {string}\r\n     */\r\n    return function (value) {\r\n        return _.isString(value) ? value.replace(/\\D/g, '') : '';\r\n    };\r\n});\r\n","PayPal_Braintree/js/helper/replace-single-quote-character.js":"define([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Replace single quote character to HTML entity string.\r\n     *\r\n     * @param {string} value\r\n     * @return {string}\r\n     */\r\n    return function (value) {\r\n        return _.isString(value) ? value.replace(/'/g, '&apos;') : '';\r\n    };\r\n});\r\n","PayPal_Braintree/js/helper/replace-unsupported-characters.js":"define(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Regex to replace all unsupported characters from string.\r\n     *\r\n     * @param {String} str\r\n     * @return {String}\r\n     */\r\n    return function (str) {\r\n        // eslint-disable-next-line no-useless-escape\r\n        return str.replace('/[^a-zA-Z0-9\\s\\-.\\']/', '').substring(0, 127);\r\n    };\r\n});\r\n","PayPal_Braintree/js/lpm/process-fallback-response.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'Magento_Checkout/js/view/payment/default',\r\n    'Magento_Customer/js/customer-data',\r\n    'Magento_Checkout/js/model/quote',\r\n    'jquery',\r\n    'braintree',\r\n    'braintreeLpm',\r\n    'PayPal_Braintree/js/model/full-screen-loader',\r\n    'mage/translate',\r\n    'underscore'\r\n], function (Component, customerData, quote, $, braintree, lpm, fullScreenLoader, $t, _) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        code: 'braintree_local_payment',\r\n        paymentMethodNonce: null,\r\n        config: {\r\n            clientToken: null,\r\n            merchantAccountId: null,\r\n            redirectOnFail: null\r\n        },\r\n\r\n        /**\r\n         * Initialize config values\r\n         *\r\n         * @param config\r\n         */\r\n        initialize: function (config) {\r\n            this._super();\r\n            this.config.clientToken = config.clientToken;\r\n            this.config.merchantAccountId = config.merchantAccountId;\r\n            this.config.redirectOnFail = config.redirectOnFail;\r\n            this.setupLpmFallback();\r\n        },\r\n\r\n        /**\r\n         * Setup local payment fallback scenario\r\n         */\r\n        setupLpmFallback: function () {\r\n            let self = this;\r\n\r\n            fullScreenLoader.startLoader();\r\n\r\n            braintree.create({\r\n                authorization: self.config.clientToken\r\n            }, function (clientError, clientInstance) {\r\n                if (clientError) {\r\n                    self.redirectCustomerOnFailure($t('Unable to initialize Braintree Client.'));\r\n                    return;\r\n                }\r\n\r\n                lpm.create({\r\n                    client: clientInstance,\r\n                    merchantAccountId: self.config.merchantAccountId\r\n                }, function (lpmError, lpmInstance) {\r\n                    if (lpmError) {\r\n                        self.redirectCustomerOnFailure($t(lpmError.message));\r\n                    }\r\n\r\n                    if (lpmInstance.hasTokenizationParams()) {\r\n                        lpmInstance.tokenize(function (tokenizeError, payload) {\r\n                            if (tokenizeError) {\r\n                                self.redirectCustomerOnFailure($t(tokenizeError.message));\r\n                            } else {\r\n                                // Send the nonce to the server to create a transaction\r\n                                self.setPaymentMethodNonce(payload.nonce);\r\n                                self.isPlaceOrderActionAllowed(true);\r\n\r\n                                if (!window.checkoutConfig.isCustomerLoggedIn) {\r\n                                    // Set the email to the quote.\r\n                                    let checkoutData = customerData.get('checkout-data')();\r\n\r\n                                    quote.guestEmail = checkoutData.inputFieldEmailValue;\r\n                                }\r\n\r\n                                // Check all agreements if any available.\r\n                                let agreements = $('.checkout-agreements input[type=\"checkbox\"]');\r\n\r\n                                if (agreements.length) {\r\n                                    agreements.prop('checked', true);\r\n                                }\r\n\r\n                                self.placeOrder();\r\n                            }\r\n                        });\r\n                    } else {\r\n                        let error = 'Payment can not be processed as invalid parameters received';\r\n\r\n                        self.redirectCustomerOnFailure($t(error));\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get code\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getCode: function () {\r\n            return this.code;\r\n        },\r\n\r\n        /**\r\n         * Set payment method nonce\r\n         *\r\n         * @param nonce\r\n         */\r\n        setPaymentMethodNonce: function (nonce) {\r\n            this.paymentMethodNonce = nonce;\r\n        },\r\n\r\n        /**\r\n         * Get data\r\n         *\r\n         * @returns {{additional_data: {payment_method_nonce: null}, method: string}}\r\n         */\r\n        getData: function () {\r\n            let data = {\r\n                'method': this.getCode(),\r\n                'additional_data': {\r\n                    'payment_method_nonce': this.paymentMethodNonce\r\n                }\r\n            };\r\n\r\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * redirect customer to the configured page if any error/failure/cancelled.\r\n         */\r\n        redirectCustomerOnFailure: function (message) {\r\n            if (message) {\r\n                let braintreeData = customerData.get('braintree')(),\r\n                    errors = braintreeData.errors || [];\r\n\r\n                errors.push(message);\r\n\r\n                customerData.set('braintree', { errors: errors });\r\n            }\r\n\r\n            window.location.href = this.config.redirectOnFail;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/model/full-screen-loader.js":"define([\r\n    'jquery',\r\n    'rjsResolver'\r\n], function ($, resolver) {\r\n    'use strict';\r\n\r\n    /**\r\n     * New full screen loader (spinner) implementation with configurable container.\r\n     * It can be used across website areas including checkout.\r\n     */\r\n    return {\r\n        container: 'body',\r\n\r\n        /**\r\n         * Set the container element with its ID to replace default container.\r\n         *\r\n         * Only allow to set elements by ID (as expected to be unique.\r\n         * If the container has already been changed, do not allow changing again as this be set once per component.\r\n         *\r\n         * @param {string} value\r\n         */\r\n        setContainer: function (value) {\r\n            if (this.container !== 'body' || !value.startsWith('#')) {\r\n                return;\r\n            }\r\n\r\n            this.container = value;\r\n        },\r\n\r\n        /**\r\n         * Get the container element.\r\n         *\r\n         * @return {string}\r\n         */\r\n        getContainer: function () {\r\n            return this.container;\r\n        },\r\n\r\n        /**\r\n         * Start full page loader action\r\n         */\r\n        startLoader: function () {\r\n            $(this.getContainer()).trigger('processStart');\r\n        },\r\n\r\n        /**\r\n         * Stop full page loader action\r\n         *\r\n         * @param {Boolean} [forceStop]\r\n         */\r\n        stopLoader: function (forceStop) {\r\n            let $elem = $(this.getContainer()),\r\n                stop = $elem.trigger.bind($elem, 'processStop'); //eslint-disable-line jquery-no-bind-unbind\r\n\r\n            forceStop ? stop() : resolver(stop);\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/model/place-order-mixin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable max-nested-callbacks */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/utils/wrapper',\r\n    'Magento_ReCaptchaWebapiUi/js/webapiReCaptchaRegistry'\r\n], function ($, wrapper, recaptchaRegistry) {\r\n    'use strict';\r\n\r\n    return function (placeOrder) {\r\n        return wrapper.wrap(placeOrder, function (originalAction, serviceUrl, payload, messageContainer) {\r\n            var recaptchaDeferred;\r\n\r\n            if (recaptchaRegistry.triggers.hasOwnProperty('recaptcha-checkout-braintree')) {\r\n                //ReCaptcha is present for checkout\r\n                recaptchaDeferred = $.Deferred();\r\n                recaptchaRegistry.addListener('recaptcha-checkout-braintree', function (token) {\r\n                    //Add reCaptcha value to place-order request and resolve deferred with the API call results\r\n                    payload.xReCaptchaValue = token;\r\n                    originalAction(serviceUrl, payload, messageContainer).done(function () {\r\n                        recaptchaDeferred.resolve.apply(recaptchaDeferred, arguments);\r\n                    }).fail(function () {\r\n                        recaptchaDeferred.reject.apply(recaptchaDeferred, arguments);\r\n                    });\r\n                });\r\n                //Trigger ReCaptcha validation\r\n                recaptchaRegistry.triggers['recaptcha-checkout-braintree']();\r\n\r\n                if (!recaptchaRegistry._isInvisibleType.hasOwnProperty('recaptcha-checkout-braintree') ||\r\n                    recaptchaRegistry._isInvisibleType['recaptcha-checkout-braintree'] === false\r\n                ) {\r\n                    //remove listener so that place order action is only triggered by the 'Place Order' button\r\n                    recaptchaRegistry.removeListener('recaptcha-checkout-braintree');\r\n                }\r\n                return recaptchaDeferred;\r\n            }\r\n\r\n            //No ReCaptcha, just sending the request\r\n            return originalAction(serviceUrl, payload, messageContainer);\r\n        });\r\n    };\r\n});\r\n","PayPal_Braintree/js/model/step-navigator-mixin.js":"define([\r\n    'mage/utils/wrapper'\r\n], function (wrapper) {\r\n    'use strict';\r\n\r\n    let mixin = {\r\n        handleHash: function (originalFn) {\r\n            var hashString = window.location.hash.replace('#', '');\r\n\r\n            if (hashString.indexOf('venmo') > -1) {\r\n                return false;\r\n            }\r\n\r\n            return originalFn();\r\n        }\r\n    };\r\n\r\n    return function (target) {\r\n        return wrapper.extend(target, mixin);\r\n    };\r\n});\r\n","PayPal_Braintree/js/model/vault-enabler.js":"define([\r\n    'Magento_Vault/js/view/payment/vault-enabler'\r\n], function (VaultEnabler) {\r\n    'use strict';\r\n\r\n    return {\r\n        // Initialise a single VaultEnabler instance.\r\n        vaultEnabler: new VaultEnabler(),\r\n\r\n        /**\r\n         * @returns {VaultEnabler}\r\n         */\r\n        getVaultEnabler() {\r\n            return this.vaultEnabler;\r\n        },\r\n\r\n        /**\r\n         * Set the payment code against the vault enabler.\r\n         *\r\n         * @param {string} code\r\n         */\r\n        setPaymentCode(code) {\r\n            this.vaultEnabler.setPaymentCode(code);\r\n        },\r\n\r\n        /**\r\n         * Returns the vault enabled state.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        isVaultEnabled() {\r\n            return this.vaultEnabler.isVaultEnabled();\r\n        },\r\n\r\n        /**\r\n         * Returns the active payment token enabler state.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        isActivePaymentTokenEnabler() {\r\n            return this.vaultEnabler.isActivePaymentTokenEnabler();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} data\r\n         */\r\n        visitAdditionalData(data) {\r\n            this.vaultEnabler.visitAdditionalData(data);\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/paypal/button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(\r\n    [\r\n        'rjsResolver',\r\n        'uiRegistry',\r\n        'uiComponent',\r\n        'underscore',\r\n        'jquery',\r\n        'Magento_Customer/js/customer-data',\r\n        'mage/translate',\r\n        'braintree',\r\n        'braintreeCheckoutPayPalAdapter',\r\n        'braintreeDataCollector',\r\n        'braintreePayPalCheckout',\r\n        'PayPal_Braintree/js/form-builder',\r\n        'PayPal_Braintree/js/helper/remove-non-digit-characters',\r\n        'PayPal_Braintree/js/helper/replace-single-quote-character',\r\n        'domReady!'\r\n    ],\r\n    function (\r\n        resolver,\r\n        registry,\r\n        Component,\r\n        _,\r\n        $,\r\n        customerData,\r\n        $t,\r\n        braintree,\r\n        Braintree,\r\n        dataCollector,\r\n        paypalCheckout,\r\n        formBuilder,\r\n        removeNonDigitCharacters,\r\n        replaceSingleQuoteCharacter\r\n    ) {\r\n        'use strict';\r\n\r\n        return {\r\n            events: {\r\n                onClick: null,\r\n                onCancel: null,\r\n                onError: null\r\n            },\r\n\r\n            /**\r\n             * Initialize button\r\n             *\r\n             * @param buttonConfig\r\n             * @param lineItems\r\n             */\r\n            init: function (buttonConfig, lineItems) {\r\n                if ($('.action-braintree-paypal-message').length) {\r\n                    $('.product-add-form form').on('keyup change paste', 'input, select, textarea', function () {\r\n                        let currentPrice, currencySymbol;\r\n\r\n                        currentPrice = $('.product-info-main span').find('[data-price-type=\\'finalPrice\\']').text();\r\n                        currencySymbol = $('.action-braintree-paypal-message[data-pp-type=\"product\"]')\r\n                            .data('currency-symbol');\r\n                        $('.action-braintree-paypal-message[data-pp-type=\"product\"]')\r\n                            .attr('data-pp-amount', currentPrice.replace(currencySymbol,''));\r\n                    });\r\n                }\r\n\r\n                this.loadSDK(buttonConfig, lineItems);\r\n\r\n                window.addEventListener('hashchange', function () {\r\n                    const step = window.location.hash.replace('#', '');\r\n\r\n                    if (step === 'shipping') {\r\n                        Braintree.getPayPalInstance().teardown(function () {\r\n                            this.loadSDK(buttonConfig, lineItems);\r\n                        }.bind(this));\r\n                    }\r\n\r\n                }.bind(this));\r\n\r\n                window.addEventListener('paypal:reinit-express', function () {\r\n                    this.loadSDK(buttonConfig, lineItems);\r\n                }.bind(this));\r\n            },\r\n\r\n            /**\r\n             * Load Braintree PayPal SDK\r\n             *\r\n             * @param buttonConfig\r\n             * @param lineItems\r\n             */\r\n            loadSDK: function (buttonConfig, lineItems) {\r\n                braintree.create({\r\n                    authorization: buttonConfig.clientToken\r\n                }, function (clientErr, clientInstance) {\r\n                    if (clientErr) {\r\n                        console.error('paypalCheckout error', clientErr);\r\n                        let error = 'PayPal Checkout could not be initialized. Please contact the store owner.';\r\n\r\n                        return this.showError(error);\r\n                    }\r\n                    dataCollector.create({\r\n                        client: clientInstance,\r\n                        paypal: true\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            return console.log(err);\r\n                        }\r\n                    });\r\n                    paypalCheckout.create({\r\n                        client: clientInstance\r\n                    }, function (err, paypalCheckoutInstance) {\r\n                        Braintree.setPayPalInstance(paypalCheckoutInstance);\r\n                        let configSDK = {\r\n                                components: 'buttons,messages,funding-eligibility',\r\n                                'enable-funding': this.isCreditActive(buttonConfig) ? 'credit' : 'paylater',\r\n                                currency: buttonConfig.currency\r\n                            },\r\n\r\n                            buyerCountry = this.getMerchantCountry(buttonConfig);\r\n\r\n                        if (buttonConfig.environment === 'sandbox'\r\n                            && (buyerCountry !== '' || buyerCountry !== 'undefined'))\r\n                        {\r\n                            configSDK['buyer-country'] = buyerCountry;\r\n                        }\r\n                        paypalCheckoutInstance.loadPayPalSDK(configSDK, function () {\r\n                            this.renderPayPalButtons(paypalCheckoutInstance, lineItems);\r\n                            this.renderPayPalMessages();\r\n                        }.bind(this));\r\n                    }.bind(this));\r\n                }.bind(this));\r\n            },\r\n\r\n            /**\r\n             * Is Credit enabled\r\n             *\r\n             * @param buttonConfig\r\n             * @returns {boolean}\r\n             */\r\n            isCreditActive: function (buttonConfig) {\r\n                return buttonConfig.isCreditActive;\r\n            },\r\n\r\n            /**\r\n             * Get merchant country\r\n             *\r\n             * @param buttonConfig\r\n             * @returns {string}\r\n             */\r\n            getMerchantCountry: function (buttonConfig) {\r\n                return buttonConfig.merchantCountry;\r\n            },\r\n\r\n            /**\r\n             * Render PayPal buttons\r\n             *\r\n             * @param paypalCheckoutInstance\r\n             * @param lineItems\r\n             */\r\n            renderPayPalButtons: function (paypalCheckoutInstance, lineItems) {\r\n                this.payPalButton(paypalCheckoutInstance, lineItems);\r\n            },\r\n\r\n            /**\r\n             * Render PayPal messages\r\n             */\r\n            renderPayPalMessages: function () {\r\n                $('.action-braintree-paypal-message').each(function () {\r\n                    window.paypal.Messages({\r\n                        amount: $(this).data('pp-amount'),\r\n                        pageType: $(this).data('pp-type'),\r\n                        style: {\r\n                            layout: $(this).data('messaging-layout'),\r\n                            text: {\r\n                                color:   $(this).data('messaging-text-color')\r\n                            },\r\n                            logo: {\r\n                                type: $(this).data('messaging-logo'),\r\n                                position: $(this).data('messaging-logo-position')\r\n                            }\r\n                        }\r\n                    }).render('#' + $(this).attr('id'));\r\n\r\n\r\n                });\r\n            },\r\n\r\n            /**\r\n             * @param paypalCheckoutInstance\r\n             * @param lineItems\r\n             */\r\n            payPalButton: function (paypalCheckoutInstance, lineItems) {\r\n                $('.action-braintree-paypal-logo').each(function () {\r\n                    let currentElement = $(this),\r\n                        style = {\r\n                            label: currentElement.data('label'),\r\n                            color: currentElement.data('color'),\r\n                            shape: currentElement.data('shape')\r\n                        },\r\n                        button;\r\n\r\n                    if (currentElement.data('fundingicons')) {\r\n                        style.fundingicons = currentElement.data('fundingicons');\r\n                    }\r\n\r\n                    // Render\r\n                    button = window.paypal.Buttons({\r\n                        fundingSource: currentElement.data('funding'),\r\n                        style: style,\r\n                        createOrder: function () {\r\n                            return paypalCheckoutInstance.createPayment({\r\n                                amount: currentElement.data('amount'),\r\n                                locale: currentElement.data('locale'),\r\n                                currency: currentElement.data('currency'),\r\n                                flow: 'checkout',\r\n                                enableShippingAddress: true,\r\n                                displayName: currentElement.data('displayname'),\r\n                                lineItems: JSON.parse(lineItems)\r\n                            });\r\n                        },\r\n                        validate: function (actions) {\r\n                            let cart = customerData.get('cart'),\r\n                                customer = customerData.get('customer'),\r\n                                declinePayment = false,\r\n                                isGuestCheckoutAllowed;\r\n\r\n                            isGuestCheckoutAllowed = cart().isGuestCheckoutAllowed;\r\n                            declinePayment = !customer().firstname && !isGuestCheckoutAllowed\r\n                                && typeof isGuestCheckoutAllowed !== 'undefined';\r\n\r\n                            if (declinePayment) {\r\n                                actions.disable();\r\n                            }\r\n                        },\r\n\r\n                        onCancel: function () {\r\n                            jQuery('#maincontent').trigger('processStop');\r\n                        },\r\n\r\n                        onError: function (errorData) {\r\n                            console.error('paypalCheckout button render error', errorData);\r\n                            jQuery('#maincontent').trigger('processStop');\r\n                        },\r\n\r\n                        onClick: function () {\r\n                            if (currentElement.data('location') === 'productpage') {\r\n                                let form = $('#product_addtocart_form');\r\n\r\n                                if (!(form.validation() && form.validation('isValid'))) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n\r\n                            let cart = customerData.get('cart'),\r\n                                customer = customerData.get('customer'),\r\n                                declinePayment = false,\r\n                                isGuestCheckoutAllowed;\r\n\r\n                            isGuestCheckoutAllowed = cart().isGuestCheckoutAllowed;\r\n                            declinePayment = !customer().firstname && !isGuestCheckoutAllowed\r\n                                && typeof isGuestCheckoutAllowed !== 'undefined';\r\n                            if (declinePayment) {\r\n                                // eslint-disable-next-line\r\n                                alert($t('To check out, please sign in with your email address.'));\r\n                            }\r\n                        },\r\n\r\n                        onApprove: function (approveData) {\r\n                            return paypalCheckoutInstance.tokenizePayment(approveData, function (err, payload) {\r\n                                jQuery('#maincontent').trigger('processStart');\r\n\r\n                                /* Set variables & default values for shipping/recipient name to billing */\r\n                                let accountFirstName = replaceSingleQuoteCharacter(payload.details.firstName),\r\n                                    accountLastName = replaceSingleQuoteCharacter(payload.details.lastName),\r\n                                    accountEmail = replaceSingleQuoteCharacter(payload.details.email),\r\n                                    recipientFirstName = accountFirstName,\r\n                                    recipientLastName = accountLastName,\r\n                                    address = payload.details.shippingAddress,\r\n                                    recipientName = null,\r\n                                    actionSuccess,\r\n                                    isRequiredBillingAddress,\r\n                                    phone = _.get(payload, ['details', 'phone'], '');\r\n\r\n                                // Map the shipping address correctly\r\n                                if (!_.isUndefined(address.recipientName) && _.isString(address.recipientName)) {\r\n                                    /*\r\n                                         * Trim leading/ending spaces before splitting,\r\n                                         * filter to remove array keys with empty values\r\n                                         * & set to variable.\r\n                                         */\r\n                                    recipientName = address.recipientName.trim().split(' ').filter(n => n);\r\n                                }\r\n\r\n                                /*\r\n                                     * If the recipientName is not null, and it is an array with\r\n                                     * first/last name, use it. Otherwise, keep the default billing first/last name.\r\n                                     * This is to avoid cases of old accounts where spaces were allowed to first or\r\n                                     * last name in PayPal and the result was an array with empty fields\r\n                                     * resulting in empty names in the system.\r\n                                     */\r\n                                if (!_.isNull(recipientName) && !_.isUndefined(recipientName[1])) {\r\n                                    recipientFirstName = replaceSingleQuoteCharacter(recipientName[0]);\r\n                                    recipientLastName = replaceSingleQuoteCharacter(recipientName[1]);\r\n                                }\r\n\r\n                                payload.details.shippingAddress = {\r\n                                    streetAddress: typeof address.line2 !== 'undefined' && _.isString(address.line2)\r\n                                        ? replaceSingleQuoteCharacter(address.line1)\r\n                                                + ' ' + replaceSingleQuoteCharacter(address.line2)\r\n                                        : replaceSingleQuoteCharacter(address.line1),\r\n                                    locality: replaceSingleQuoteCharacter(address.city),\r\n                                    postalCode: address.postalCode,\r\n                                    countryCodeAlpha2: address.countryCode,\r\n                                    email: accountEmail,\r\n                                    recipientFirstName: recipientFirstName,\r\n                                    recipientLastName: recipientLastName,\r\n                                    telephone: removeNonDigitCharacters(phone),\r\n                                    region: typeof address.state !== 'undefined'\r\n                                        ? replaceSingleQuoteCharacter(address.state)\r\n                                        : ''\r\n                                };\r\n\r\n                                payload.details.email = accountEmail;\r\n                                payload.details.firstName = accountFirstName;\r\n                                payload.details.lastName = accountLastName;\r\n                                if (typeof payload.details.businessName !== 'undefined'\r\n                                        && _.isString(payload.details.businessName)) {\r\n                                    payload.details.businessName\r\n                                            = replaceSingleQuoteCharacter(payload.details.businessName);\r\n                                }\r\n\r\n                                // Map the billing address correctly\r\n                                isRequiredBillingAddress = currentElement.data('requiredbillingaddress');\r\n\r\n                                if (isRequiredBillingAddress === 1\r\n                                            && typeof payload.details.billingAddress !== 'undefined') {\r\n                                    let billingAddress = payload.details.billingAddress;\r\n\r\n                                    payload.details.billingAddress = {\r\n                                        streetAddress: typeof billingAddress.line2 !== 'undefined'\r\n                                                && _.isString(billingAddress.line2)\r\n                                            ? replaceSingleQuoteCharacter(billingAddress.line1)\r\n                                                    + ' ' + replaceSingleQuoteCharacter(billingAddress.line2)\r\n                                            : replaceSingleQuoteCharacter(billingAddress.line1),\r\n                                        locality: replaceSingleQuoteCharacter(billingAddress.city),\r\n                                        postalCode: billingAddress.postalCode,\r\n                                        countryCodeAlpha2: billingAddress.countryCode,\r\n                                        telephone: removeNonDigitCharacters(phone),\r\n                                        region: typeof billingAddress.state !== 'undefined'\r\n                                            ? replaceSingleQuoteCharacter(billingAddress.state)\r\n                                            : ''\r\n                                    };\r\n                                }\r\n\r\n                                if (currentElement.data('location') === 'productpage') {\r\n                                    let form = $('#product_addtocart_form');\r\n\r\n                                    payload.additionalData = form.serialize();\r\n                                }\r\n\r\n                                actionSuccess = currentElement.data('actionsuccess');\r\n\r\n                                formBuilder.build(\r\n                                    {\r\n                                        action: actionSuccess,\r\n                                        fields: {\r\n                                            result: JSON.stringify(payload)\r\n                                        }\r\n                                    }\r\n                                ).submit();\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    if (!button.isEligible()) {\r\n                        console.log('PayPal button is not elligible');\r\n                        currentElement.parent().remove();\r\n                        return;\r\n                    }\r\n                    if (button.isEligible() && $('#' + currentElement.attr('id')).length) {\r\n                        button.render('#' + currentElement.attr('id'));\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n);\r\n","PayPal_Braintree/js/paypal/form-builder.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'underscore',\r\n        'mage/template'\r\n    ],\r\n    function ($, _, mageTemplate) {\r\n        'use strict';\r\n\r\n        return {\r\n\r\n            /**\r\n             * @param {Object} formData\r\n             * @returns {*|jQuery}\r\n             */\r\n            build: function (formData) {\r\n                var formTmpl = mageTemplate('<form action=\"<%= data.action %>\"' +\r\n                    ' method=\"POST\" hidden enctype=\"application/x-www-form-urlencoded\">' +\r\n                        '<% _.each(data.fields, function(val, key){ %>' +\r\n                            '<input value=\\'<%= val %>\\' name=\"<%= key %>\" type=\"hidden\">' +\r\n                        '<% }); %>' +\r\n                    '</form>');\r\n\r\n                return $(formTmpl({\r\n                    data: {\r\n                        action: formData.action,\r\n                        fields: formData.fields\r\n                    }\r\n                })).appendTo($('[data-container=\"body\"]'));\r\n            }\r\n        };\r\n    }\r\n);\r\n","PayPal_Braintree/js/paypal/product-page.js":"define(\r\n    ['PayPal_Braintree/js/paypal/button', 'jquery'],\r\n    function (button, $) {\r\n        'use strict';\r\n\r\n        return button.extend({\r\n\r\n            defaults: {\r\n                label: 'buynow',\r\n                branding: true\r\n            },\r\n\r\n            /**\r\n             * The validation on the add-to-cart form is done after the PayPal window has opened.\r\n             * This is because the validate method exposed by the PP Button requires an event to\r\n             * disable/enable the button.\r\n             * We can't fire an event due to the way the mage.validation widget works and we can't\r\n             * do something gross like an interval because the validation() method shows the error\r\n             * messages and focuses the user's input on the first erroring input field.\r\n             * @param payload\r\n             * @returns {*}\r\n             */\r\n            beforeSubmit: function (payload) {\r\n                var form = $('#product_addtocart_form');\r\n\r\n                if (!(form.validation() && form.validation('isValid'))) {\r\n                    return false;\r\n                }\r\n\r\n                payload.additionalData = form.serialize();\r\n\r\n                return payload;\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/paypal/credit/calculator.js":"define([\r\n    'underscore',\r\n    'uiComponent'\r\n], function (_, Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/credit/calculator',\r\n            displaySummary: true, // \"From X per month\"\r\n            displayInterestDetails: false, // Display the more in-depth summary of interest rates\r\n            instalmentsFrom: 0,\r\n            currentInstalment: {\r\n                term: 0,\r\n                monthlyPayment: 0,\r\n                apr: 0,\r\n                cost: 0,\r\n                costIncInterest: 0\r\n            },\r\n            endpoint: null,\r\n            instalments: [],\r\n            visible: false,\r\n            merchantName: ''\r\n        },\r\n\r\n        /**\r\n         * initialize and observe the default variables\r\n         *\r\n         * @returns {*}\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n            if (this.instalments.length > 0) {\r\n                this.currentInstalment = this.instalments[0];\r\n                this.instalmentsFrom = this.instalments[this.instalments.length - 1].monthlyPayment;\r\n                this.visible = true;\r\n            } else {\r\n                this.loadInstalments();\r\n            }\r\n\r\n            this.observe(['instalments', 'currentInstalment', 'instalmentsFrom', 'visible']);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * check current instalment\r\n         *\r\n         * @param term\r\n         * @returns {boolean}\r\n         */\r\n        isCurrentInstalment: function (term) {\r\n            return this.currentInstalment().term === term;\r\n        },\r\n\r\n        /**\r\n         * set current instalment\r\n         *\r\n         * @param instalment\r\n         */\r\n        setCurrentInstalment: function (instalment) {\r\n            this.currentInstalment(instalment);\r\n        },\r\n\r\n        /**\r\n         * load instalments\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        loadInstalments: function () {\r\n            if (!this.endpoint) {\r\n                return false;\r\n            }\r\n\r\n            let self = this;\r\n\r\n            require(['Magento_Checkout/js/model/quote', 'jquery'], function (quote, $) {\r\n                if (typeof quote.totals()['base_grand_total'] === 'undefined') {\r\n                    return false;\r\n                }\r\n\r\n                $.getJSON(self.endpoint, {amount: quote.totals()['base_grand_total']}, function (response) {\r\n                    self.instalments(response);\r\n                    self.setCurrentInstalment(response[0]);\r\n                    self.visible(true);\r\n                });\r\n            });\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/reCaptcha/webapiReCaptchaRegistry-mixin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return function (originalFunction) {\r\n        /**\r\n         * {@inheritDoc}\r\n         */\r\n        originalFunction.addListener = function (id , func) {\r\n            this._listeners[id] = func;\r\n        };\r\n\r\n        return originalFunction;\r\n    };\r\n});\r\n","PayPal_Braintree/js/view/product-page.js":"define(\r\n    ['uiComponent'],\r\n    function (Component) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/3d-secure.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n\r\ndefine([\r\n    'jquery',\r\n    'PayPal_Braintree/js/view/payment/adapter',\r\n    'Magento_Checkout/js/model/quote',\r\n    'mage/translate',\r\n    'braintreeThreeDSecure',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'PayPal_Braintree/js/helper/remove-non-digit-characters',\r\n    'PayPal_Braintree/js/helper/escape-non-ascii-characters',\r\n    'PayPal_Braintree/js/model/vault-enabler'\r\n], function (\r\n    $,\r\n    braintree,\r\n    quote,\r\n    $t,\r\n    threeDSecure,\r\n    fullScreenLoader,\r\n    removeNonDigitCharacters,\r\n    escapeNonAsciiCharacters,\r\n    vaultEnablerModel\r\n) {\r\n    'use strict';\r\n\r\n    return {\r\n        config: null,\r\n\r\n        /**\r\n         * Set 3d secure config\r\n         * @param {Object} config\r\n         */\r\n        setConfig: function (config) {\r\n            this.config = config;\r\n            this.config.thresholdAmount = parseFloat(config.thresholdAmount);\r\n\r\n            // Initialize vault enabler to check is it actually enabled or passed\r\n            vaultEnablerModel.setPaymentCode(this.config.ccVaultCode);\r\n        },\r\n\r\n        /**\r\n         * Get code\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return 'three_d_secure';\r\n        },\r\n\r\n        /**\r\n         * Check billing/shipping address line lengths\r\n         *\r\n         * @param errorMessage\r\n         * @param billingAddress\r\n         * @param shippingAddress\r\n         * @returns {*}\r\n         */\r\n        checkBillingLineLengths: function (errorMessage, billingAddress, shippingAddress) {\r\n            let lineError = null;\r\n\r\n            if (billingAddress.street[0].length > 50 || shippingAddress.street[0].length > 50) {\r\n                lineError = 'line1';\r\n            } else if (billingAddress.street[1].length > 50 || shippingAddress.street[1].length > 50) {\r\n                lineError = 'line2';\r\n            }\r\n\r\n            if (lineError) {\r\n                let error = `Billing/Shipping ${lineError} must be string and less than 50 characters.`;\r\n\r\n                return $t(`${error} Please update the address and try again.`);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate Braintree payment nonce\r\n         * @param {Object} context\r\n         * @returns {Object}\r\n         */\r\n        validate: function (context) {\r\n            let self = this,\r\n                clientInstance = braintree.getApiClient(),\r\n                state = $.Deferred(),\r\n                totalAmount = parseFloat(quote.totals()['base_grand_total']).toFixed(2),\r\n                billingAddress = quote.billingAddress(),\r\n                shippingAddress = quote.shippingAddress(),\r\n                setup3d;\r\n\r\n            // Handle billing address region code\r\n            if (billingAddress.regionCode == null) {\r\n                billingAddress.regionCode = undefined;\r\n            }\r\n            if (billingAddress.regionCode !== undefined && billingAddress.regionCode.length > 2) {\r\n                billingAddress.regionCode = undefined;\r\n            }\r\n\r\n            // Handle shipping address region code\r\n            if (shippingAddress.regionCode == null) {\r\n                shippingAddress.regionCode = undefined;\r\n            }\r\n            if (shippingAddress.regionCode !== undefined && shippingAddress.regionCode.length > 2) {\r\n                shippingAddress.regionCode = undefined;\r\n            }\r\n\r\n            // No 3d secure if using CVV verification on vaulted cards\r\n            if (quote.paymentMethod().method.indexOf('braintree_cc_vault_') !== -1) {\r\n                if (this.config.useCvvVault === true) {\r\n                    state.resolve();\r\n                    return state.promise();\r\n                }\r\n            }\r\n\r\n            if (!this.isAmountAvailable(totalAmount) || !this.isCountryAvailable(billingAddress.countryId)) {\r\n                state.resolve();\r\n                return state.promise();\r\n            }\r\n\r\n            fullScreenLoader.startLoader();\r\n\r\n            setup3d = function (client) {\r\n                threeDSecure.create({\r\n                    version: 2,\r\n                    client: client\r\n                }, function (threeDSecureErr, threeDSecureInstance) {\r\n                    if (threeDSecureErr) {\r\n                        fullScreenLoader.stopLoader();\r\n                        return state.reject($t('Please try again with another form of payment.'));\r\n                    }\r\n\r\n                    let threeDSContainer = document.createElement('div'),\r\n                        tdMask = document.createElement('div'),\r\n                        tdFrame = document.createElement('div'),\r\n                        tdBody = document.createElement('div'),\r\n                        threeDSecureParameters;\r\n\r\n                    threeDSContainer.className = 'braintree-three-d-modal';\r\n                    tdMask.className = 'bt-mask';\r\n                    tdFrame.className = 'bt-modal-frame';\r\n                    tdBody.className = 'bt-modal-body';\r\n\r\n                    tdFrame.appendChild(tdBody);\r\n                    threeDSContainer.appendChild(tdMask);\r\n                    threeDSContainer.appendChild(tdFrame);\r\n\r\n                    threeDSecureParameters = {\r\n                        amount: totalAmount,\r\n                        nonce: context.paymentMethodNonce,\r\n                        bin: context.creditCardBin,\r\n                        collectDeviceData: true,\r\n                        challengeRequested: self.getChallengeRequested(),\r\n                        cardAddChallengeRequested: self.getCardAddChallengeRequested(),\r\n                        billingAddress: {\r\n                            givenName: escapeNonAsciiCharacters(billingAddress.firstname),\r\n                            surname: escapeNonAsciiCharacters(billingAddress.lastname),\r\n                            phoneNumber: billingAddress.telephone !== null\r\n                                ? removeNonDigitCharacters(billingAddress.telephone)\r\n                                : billingAddress.telephone,\r\n                            streetAddress: billingAddress.street[0],\r\n                            extendedAddress: billingAddress.street[1],\r\n                            locality: billingAddress.city,\r\n                            region: billingAddress.regionCode,\r\n                            postalCode: billingAddress.postcode,\r\n                            countryCodeAlpha2: billingAddress.countryId\r\n                        },\r\n                        additionalInformation: {\r\n                            shippingGivenName: escapeNonAsciiCharacters(shippingAddress.firstname),\r\n                            shippingSurname: escapeNonAsciiCharacters(shippingAddress.lastname),\r\n                            shippingAddress: {\r\n                                streetAddress: shippingAddress.street[0],\r\n                                extendedAddress: shippingAddress.street[1],\r\n                                locality: shippingAddress.city,\r\n                                region: shippingAddress.regionCode,\r\n                                postalCode: shippingAddress.postcode,\r\n                                countryCodeAlpha2: shippingAddress.countryId\r\n                            },\r\n                            shippingPhone: shippingAddress.telephone !== null\r\n                                ? removeNonDigitCharacters(shippingAddress.telephone)\r\n                                : shippingAddress.telephone,\r\n                            ipAddress: self.getIpAddress()\r\n                        },\r\n                        onLookupComplete: function (data, next) {\r\n                            next();\r\n                        },\r\n                        addFrame: function (err, iframe) {\r\n                            fullScreenLoader.stopLoader();\r\n\r\n                            if (err) {\r\n                                console.log('Unable to verify card over 3D Secure', err);\r\n                                return state.reject($t('Please try again with another form of payment.'));\r\n                            }\r\n\r\n                            tdBody.appendChild(iframe);\r\n                            document.body.appendChild(threeDSContainer);\r\n                        },\r\n                        removeFrame: function () {\r\n                            fullScreenLoader.startLoader();\r\n                            document.body.removeChild(threeDSContainer);\r\n                        }\r\n                    };\r\n\r\n                    if (context.hasOwnProperty('email') && context.email !== null) {\r\n                        threeDSecureParameters.email = context.email;\r\n                    }\r\n\r\n                    threeDSecureInstance.verifyCard(threeDSecureParameters, function (err, response) {\r\n                        fullScreenLoader.stopLoader();\r\n\r\n                        if (err) {\r\n                            console.error('3DSecure validation failed', err);\r\n                            if (err.code === 'THREEDS_LOOKUP_VALIDATION_ERROR') {\r\n                                let errorMessage = err.details.originalError.details.originalError.error.message,\r\n                                    error = self.checkBillingLineLengths(errorMessage, billingAddress, shippingAddress);\r\n\r\n                                return error ? state.reject(error) : state.reject($t(errorMessage));\r\n                            }\r\n\r\n                            return state.reject($t('Please try again with another form of payment.'));\r\n                        }\r\n\r\n                        let liability = {\r\n                            shifted: response.liabilityShifted,\r\n                            shiftPossible: response.liabilityShiftPossible\r\n                        };\r\n\r\n                        if (liability.shifted || !liability.shifted && !liability.shiftPossible) {\r\n                            context.paymentMethodNonce = response.nonce;\r\n                            state.resolve();\r\n                        } else {\r\n                            state.reject($t('Please try again with another form of payment.'));\r\n                        }\r\n                    });\r\n                });\r\n            };\r\n\r\n            if (!clientInstance) {\r\n                require(['PayPal_Braintree/js/view/payment/method-renderer/cc-form'], function (c) {\r\n                    let config = c.extend({\r\n                        defaults: {\r\n                            clientConfig: {\r\n                                onReady: function () {}\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    braintree.setConfig(config.defaults.clientConfig);\r\n                    braintree.setup(setup3d);\r\n                });\r\n            } else {\r\n                setup3d(clientInstance);\r\n            }\r\n\r\n            return state.promise();\r\n        },\r\n\r\n        /**\r\n         * Check minimal amount for 3d secure activation\r\n         * @param {Number} amount\r\n         * @returns {Boolean}\r\n         */\r\n        isAmountAvailable: function (amount) {\r\n            amount = parseFloat(amount.toString());\r\n\r\n            return amount >= this.config.thresholdAmount;\r\n        },\r\n\r\n        /**\r\n         * Check if current country is available for 3d secure\r\n         * @param {String} countryId\r\n         * @returns {Boolean}\r\n         */\r\n        isCountryAvailable: function (countryId) {\r\n            let key,\r\n                specificCountries = this.config.specificCountries;\r\n\r\n            // all countries are available\r\n            if (!specificCountries.length) {\r\n                return true;\r\n            }\r\n\r\n            for (key in specificCountries) {\r\n                if (countryId === specificCountries[key]) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Get the challenge requested config\r\n         * it will only be returned TRUE when Vault is disabled(FALSE)\r\n         * and 'PaymentTokenEnabler' is set to FALSE.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        getChallengeRequested: function () {\r\n            if (vaultEnablerModel.isVaultEnabled() && vaultEnablerModel.isActivePaymentTokenEnabler()) {\r\n                return false;\r\n            }\r\n            return this.config.challengeRequested;\r\n        },\r\n\r\n        /**\r\n         * This parameter will be passed as TRUE when\r\n         * Vault is enabled(TRUE) and 'PaymentTokenEnabler'\r\n         * is set to TRUE.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        getCardAddChallengeRequested: function () {\r\n            if (vaultEnablerModel.isVaultEnabled() && vaultEnablerModel.isActivePaymentTokenEnabler()) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Get the Customer's IP Address\r\n         *\r\n         * @returns {*}\r\n         */\r\n        getIpAddress: function () {\r\n            return this.config.ipAddress;\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/view/payment/ach.js":"define(\r\n    [\r\n        'uiComponent',\r\n        'Magento_Checkout/js/model/payment/renderer-list'\r\n    ],\r\n    function (\r\n        Component,\r\n        rendererList\r\n    ) {\r\n        'use strict';\r\n\r\n        rendererList.push(\r\n            {\r\n                type: 'braintree_ach_direct_debit',\r\n                component: 'PayPal_Braintree/js/view/payment/method-renderer/ach'\r\n            }\r\n        );\r\n\r\n        return Component.extend({});\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/adapter.js":"/**\r\n * Copyright 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'jquery',\r\n    'braintree',\r\n    'braintreeDataCollector',\r\n    'braintreeHostedFields',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'Magento_Ui/js/model/messageList',\r\n    'mage/translate'\r\n], function ($, client, dataCollector, hostedFields, fullScreenLoader, globalMessageList, $t) {\r\n    'use strict';\r\n\r\n    return {\r\n        apiClient: null,\r\n        config: {},\r\n        checkout: null,\r\n        deviceData: null,\r\n        clientInstance: null,\r\n        hostedFieldsInstance: null,\r\n        paypalInstance: null,\r\n        code: 'braintree',\r\n\r\n        /**\r\n         * {Object}\r\n         */\r\n        events: {\r\n            onClick: null,\r\n            onCancel: null,\r\n            onError: null\r\n        },\r\n\r\n        /**\r\n         * Get Braintree api client\r\n         * @returns {Object}\r\n         */\r\n        getApiClient: function () {\r\n            return this.clientInstance;\r\n        },\r\n\r\n        /**\r\n         * Set configuration\r\n         * @param {Object} config\r\n         */\r\n        setConfig: function (config) {\r\n            this.config = config;\r\n        },\r\n\r\n        /**\r\n         * Get payment name\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            if (window.checkoutConfig.payment[this.code]) {\r\n                return this.code;\r\n            }\r\n            return 'braintree_paypal';\r\n\r\n        },\r\n\r\n        /**\r\n         * Get client token\r\n         * @returns {String|*}\r\n         */\r\n        getClientToken: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getEnvironment: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].environment;\r\n        },\r\n\r\n        getCurrentCode: function (paypalType = null) {\r\n            var code = 'braintree_paypal';\r\n\r\n            if (paypalType !== 'paypal') {\r\n                code = code + '_' + paypalType;\r\n            }\r\n            return code;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getColor: function (paypalType = null) {\r\n            return window.checkoutConfig.payment[this.getCurrentCode(paypalType)].style.color;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getShape: function (paypalType = null) {\r\n            return window.checkoutConfig.payment[this.getCurrentCode(paypalType)].style.shape;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getLabel: function (paypalType = null) {\r\n            return window.checkoutConfig.payment[this.getCurrentCode(paypalType)].style.label;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getBranding: function () {\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getFundingIcons: function () {\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getDisabledFunding: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].disabledFunding;\r\n        },\r\n\r\n        /**\r\n         * Show error message\r\n         *\r\n         * @param {String} errorMessage\r\n         */\r\n        showError: function (errorMessage) {\r\n            globalMessageList.addErrorMessage({\r\n                message: errorMessage\r\n            });\r\n            fullScreenLoader.stopLoader(true);\r\n        },\r\n\r\n        /**\r\n         * Disable submit button\r\n         */\r\n        disableButton: function () {\r\n            // stop any previous shown loaders\r\n            fullScreenLoader.stopLoader(true);\r\n            fullScreenLoader.startLoader();\r\n            $('[data-button=\"place\"]').attr('disabled', 'disabled');\r\n        },\r\n\r\n        /**\r\n         * Enable submit button\r\n         */\r\n        enableButton: function () {\r\n            $('[data-button=\"place\"]').removeAttr('disabled');\r\n            fullScreenLoader.stopLoader();\r\n        },\r\n\r\n        /**\r\n         * Has PayPal been init'd already\r\n         */\r\n        getPayPalInstance: function () {\r\n            if (typeof this.config.paypalInstance !== 'undefined' && this.config.paypalInstance) {\r\n                return this.config.paypalInstance;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        setPayPalInstance: function (val) {\r\n            this.config.paypalInstance = val;\r\n        },\r\n\r\n        /**\r\n         * Setup Braintree SDK\r\n         *\r\n         * @param {Function|null} callback\r\n         */\r\n        setup: function (callback = null) {\r\n            if (!this.getClientToken()) {\r\n                this.showError($t('Sorry, but something went wrong.'));\r\n                return;\r\n            }\r\n\r\n            if (this.clientInstance) {\r\n                if (typeof this.config.onReady === 'function') {\r\n                    this.config.onDeviceDataReceived(this.deviceData);\r\n                    this.config.onReady(this);\r\n                }\r\n\r\n                if (typeof callback === 'function') {\r\n                    callback(this.clientInstance);\r\n                }\r\n                return;\r\n            }\r\n\r\n            client.create({\r\n                authorization: this.getClientToken()\r\n            }, function (clientErr, clientInstance) {\r\n                if (clientErr) {\r\n                    console.error('Braintree Setup Error', clientErr);\r\n                    return this.showError('Sorry, but something went wrong. Please contact the store owner.');\r\n                }\r\n\r\n                let options = {\r\n                    client: clientInstance\r\n                };\r\n\r\n                if (typeof this.config.dataCollector === 'object'\r\n                    && typeof this.config.dataCollector.paypal === 'boolean'\r\n                ) {\r\n                    options.paypal = true;\r\n                }\r\n\r\n                this.clientInstance = clientInstance;\r\n\r\n                if (typeof this.config.onReady === 'function') {\r\n                    this.config.onReady(this);\r\n                }\r\n\r\n                dataCollector.create(options, function (err, dataCollectorInstance) {\r\n                    if (err) {\r\n                        return console.log(err);\r\n                    }\r\n\r\n                    this.deviceData = dataCollectorInstance.deviceData;\r\n                    this.config.onDeviceDataReceived(this.deviceData);\r\n\r\n                    if (typeof callback === 'function') {\r\n                        callback(this.clientInstance);\r\n                    }\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Setup hosted fields instance\r\n         */\r\n        setupHostedFields: function () {\r\n            var self = this;\r\n\r\n            if (this.hostedFieldsInstance) {\r\n                this.hostedFieldsInstance.teardown(function () {\r\n                    this.hostedFieldsInstance = null;\r\n                    this.setupHostedFields();\r\n                }.bind(this));\r\n                return;\r\n            }\r\n\r\n            hostedFields.create({\r\n                client: this.clientInstance,\r\n                fields: this.config.hostedFields,\r\n                styles: this.config.styles\r\n            }, function (createErr, hostedFieldsInstance) {\r\n                if (createErr) {\r\n                    let error = 'Braintree hosted fields could not be initialized. Please contact the store owner.';\r\n\r\n                    self.showError($t(error));\r\n                    console.error('Braintree hosted fields error', createErr);\r\n                    return;\r\n                }\r\n\r\n                this.config.onInstanceReady(hostedFieldsInstance);\r\n                this.hostedFieldsInstance = hostedFieldsInstance;\r\n            }.bind(this));\r\n        },\r\n\r\n        tokenizeHostedFields: function () {\r\n            this.hostedFieldsInstance.tokenize({}, function (tokenizeErr, payload) {\r\n                if (tokenizeErr) {\r\n                    switch (tokenizeErr.code) {\r\n                    case 'HOSTED_FIELDS_FIELDS_EMPTY':\r\n                        // occurs when none of the fields are filled in\r\n                        console.error('All fields are empty! Please fill out the form.');\r\n                        break;\r\n                    case 'HOSTED_FIELDS_FIELDS_INVALID':\r\n                        // occurs when certain fields do not pass client side validation\r\n                        console.error('Some fields are invalid:', tokenizeErr.details.invalidFieldKeys);\r\n                        break;\r\n                    case 'HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE':\r\n                        // occurs when:\r\n                        //   * the client token used for client authorization was generated\r\n                        //     with a customer ID and the fail on duplicate payment method\r\n                        //     option is set to true\r\n                        //   * the card being tokenized has previously been vaulted (with any customer)\r\n                        // eslint-disable-next-line\r\n                            // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.fail_on_duplicate_payment_method\r\n                        console.error('This payment method already exists in your vault.');\r\n                        break;\r\n                    case 'HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED':\r\n                        // occurs when:\r\n                        //   * the client token used for client authorization was generated\r\n                        //     with a customer ID and the verify card option is set to true\r\n                        //     and you have credit card verification turned on in the Braintree\r\n                        //     control panel\r\n                        //   * the cvv does not pass verfication\r\n                        //   (developers.braintreepayments.com/reference/general/testing/#avs-and-cvv/cid-responses)\r\n                        // eslint-disable-next-line\r\n                            // See: developers.braintreepayments.com/reference/request/client-token/generate/#options.verify_card\r\n                        console.error('CVV did not pass verification');\r\n                        break;\r\n                    case 'HOSTED_FIELDS_FAILED_TOKENIZATION':\r\n                        // occurs for any other tokenization error on the server\r\n                        console.error('Tokenization failed server side. Is the card valid?');\r\n                        break;\r\n                    case 'HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR':\r\n                        // occurs when the Braintree gateway cannot be contacted\r\n                        console.error('Network error occurred when tokenizing.');\r\n                        break;\r\n                    default:\r\n                        console.error('Something bad happened!', tokenizeErr);\r\n                    }\r\n                } else {\r\n                    this.config.onPaymentMethodReceived(payload);\r\n                }\r\n            }.bind(this));\r\n        }\r\n    };\r\n});\r\n\r\n","PayPal_Braintree/js/view/payment/braintree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'uiComponent',\r\n    'Magento_Checkout/js/model/payment/renderer-list',\r\n    'Magento_Customer/js/customer-data',\r\n    'Magento_Ui/js/model/messageList'\r\n], function (Component, rendererList, customerData, globalMessageList) {\r\n    'use strict';\r\n\r\n    let config = window.checkoutConfig.payment,\r\n        braintreeType = 'braintree',\r\n        payPalType = 'braintree_paypal',\r\n        braintreeAchDirectDebit = 'braintree_ach_direct_debit',\r\n        braintreeVenmo = 'braintree_venmo',\r\n        braintreeLocalPayment = 'braintree_local_payment';\r\n\r\n    if (config[braintreeType] && config[braintreeType].isActive && config[braintreeType].clientToken) {\r\n        rendererList.push({\r\n            type: braintreeType,\r\n            component: 'PayPal_Braintree/js/view/payment/method-renderer/hosted-fields'\r\n        });\r\n    }\r\n\r\n    if (config[payPalType] && config[payPalType].isActive) {\r\n        rendererList.push({\r\n            type: payPalType,\r\n            component: 'PayPal_Braintree/js/view/payment/method-renderer/paypal'\r\n        });\r\n    }\r\n\r\n    if (config[braintreeVenmo] && config[braintreeVenmo].isAllowed && config[braintreeVenmo].clientToken) {\r\n        rendererList.push({\r\n            type: braintreeVenmo,\r\n            component: 'PayPal_Braintree/js/view/payment/method-renderer/venmo'\r\n        });\r\n    }\r\n\r\n    if (config[braintreeAchDirectDebit] && config[braintreeAchDirectDebit].isActive\r\n        && config[braintreeAchDirectDebit].clientToken) {\r\n        rendererList.push({\r\n            type: braintreeAchDirectDebit,\r\n            component: 'PayPal_Braintree/js/view/payment/method-renderer/ach'\r\n        });\r\n    }\r\n\r\n    if (config[braintreeLocalPayment] && config[braintreeLocalPayment].clientToken) {\r\n        rendererList.push({\r\n            type: braintreeLocalPayment,\r\n            component: 'PayPal_Braintree/js/view/payment/method-renderer/lpm'\r\n        });\r\n    }\r\n\r\n    /** Add view logic here if needed */\r\n    return Component.extend({\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            let braintreeData = customerData.get('braintree')(),\r\n                errors = braintreeData.errors || [];\r\n\r\n            errors.forEach(function (error) {\r\n                globalMessageList.addErrorMessage({ 'message': error });\r\n            });\r\n\r\n            customerData.set('braintree', { errors: [] });\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/lpm.js":"define(\r\n    [\r\n        'uiComponent',\r\n        'Magento_Checkout/js/model/payment/renderer-list'\r\n    ],\r\n    function (\r\n        Component,\r\n        rendererList\r\n    ) {\r\n        'use strict';\r\n\r\n        rendererList.push(\r\n            {\r\n                type: 'braintree_local_payment',\r\n                component: 'PayPal_Braintree/js/view/payment/method-renderer/lpm'\r\n            }\r\n        );\r\n\r\n        return Component.extend({});\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/validator-handler.js":"/**\r\n * Copyright 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/model/messageList',\r\n    'PayPal_Braintree/js/view/payment/3d-secure',\r\n    'Magento_Checkout/js/model/full-screen-loader'\r\n], function ($, globalMessageList, verify3DSecure, fullScreenLoader) {\r\n    'use strict';\r\n\r\n    return {\r\n        validators: [],\r\n\r\n        /**\r\n         * Get payment config\r\n         * @returns {Object}\r\n         */\r\n        getConfig: function () {\r\n            return window.checkoutConfig.payment;\r\n        },\r\n\r\n        /**\r\n         * Init list of validators\r\n         */\r\n        initialize: function () {\r\n            let config = this.getConfig();\r\n\r\n            if (config[verify3DSecure.getCode()].enabled) {\r\n                verify3DSecure.setConfig(config[verify3DSecure.getCode()]);\r\n                this.add(verify3DSecure);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add new validator\r\n         * @param {Object} validator\r\n         */\r\n        add: function (validator) {\r\n            this.validators.push(validator);\r\n        },\r\n\r\n        /**\r\n         * Run pull of validators\r\n         * @param {Object} context\r\n         * @param {Function} callback\r\n         */\r\n        validate: function (context, callback, errorCallback) {\r\n            var self = this,\r\n                deferred;\r\n\r\n            // no available validators\r\n            if (!self.validators.length) {\r\n                callback();\r\n\r\n                return;\r\n            }\r\n\r\n            // get list of deferred validators\r\n            deferred = $.map(self.validators, function (current) {\r\n                return current.validate(context);\r\n            });\r\n\r\n            $.when.apply($, deferred)\r\n                .done(function () {\r\n                    callback();\r\n                }).fail(function (error) {\r\n                    errorCallback();\r\n                    self.showError(error);\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Show error message\r\n         * @param {String} errorMessage\r\n         */\r\n        showError: function (errorMessage) {\r\n            globalMessageList.addErrorMessage({\r\n                message: errorMessage\r\n            });\r\n            fullScreenLoader.stopLoader(true);\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/view/payment/validator-manager.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/model/messageList',\r\n    'PayPal_Braintree/js/model/full-screen-loader'\r\n], function (\r\n    $,\r\n    globalMessageList,\r\n    defaultFullScreenLoader\r\n) {\r\n    'use strict';\r\n\r\n    /**\r\n     * New Validator handler implementation that can be used across website areas including checkout.\r\n     */\r\n    return {\r\n        fullScreenLoader: defaultFullScreenLoader,\r\n        validators: [],\r\n\r\n        /**\r\n         * Set the full screen loader implementation.\r\n         *\r\n         * @param fullScreenLoader\r\n         */\r\n        setFullScreenLoader: function (fullScreenLoader) {\r\n            this.fullScreenLoader = fullScreenLoader;\r\n        },\r\n\r\n        /**\r\n         * Get the full screen loader implementation.\r\n         */\r\n        getFullScreenLoader: function () {\r\n            return this.fullScreenLoader;\r\n        },\r\n\r\n        /**\r\n         * Add new validator if enabled.\r\n         *\r\n         * Always expect the validator to have the isEnabled method (property), if not skip.\r\n         *\r\n         * @param {Object} validator\r\n         */\r\n        add: function (validator) {\r\n            if (!validator.hasOwnProperty('isEnabled')\r\n                || typeof validator.isEnabled !== 'function'\r\n                || !validator.isEnabled()\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            this.validators.push(validator);\r\n        },\r\n\r\n        /**\r\n         * Run pull of validators.\r\n         *\r\n         * @param {Object} context\r\n         * @param {Function} callback\r\n         * @param {Function} errorCallback\r\n         */\r\n        validate: function (context, callback, errorCallback) {\r\n            let self = this,\r\n                deferred;\r\n\r\n            // no available validators\r\n            if (!self.validators.length) {\r\n                callback();\r\n\r\n                return;\r\n            }\r\n\r\n            // get list of deferred validators\r\n            deferred = $.map(self.validators, function (current) {\r\n                return current.validate(context);\r\n            });\r\n\r\n            $.when.apply($, deferred)\r\n                .done(function () {\r\n                    callback();\r\n                }).fail(function (error) {\r\n                    errorCallback();\r\n                    self.showError(error);\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Show error message.\r\n         *\r\n         * @param {string} errorMessage\r\n         */\r\n        showError: function (errorMessage) {\r\n            globalMessageList.addErrorMessage({\r\n                message: errorMessage\r\n            });\r\n\r\n            this.getFullScreenLoader().stopLoader(true);\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/view/payment/venmo.js":"define(\r\n    [\r\n        'uiComponent',\r\n        'Magento_Checkout/js/model/payment/renderer-list'\r\n    ],\r\n    function (\r\n        Component,\r\n        rendererList\r\n    ) {\r\n        'use strict';\r\n\r\n        rendererList.push(\r\n            {\r\n                type: 'braintree_venmo',\r\n                component: 'PayPal_Braintree/js/view/payment/method-renderer/venmo'\r\n            }\r\n        );\r\n\r\n        return Component.extend({});\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/express/express-applepay.js":"/**\r\n * Braintree Apple Pay express payment method integration.\r\n **/\r\ndefine([\r\n    'underscore',\r\n    'uiComponent',\r\n    'PayPal_Braintree/js/applepay/button',\r\n    'PayPal_Braintree/js/applepay/api',\r\n    'PayPal_Braintree/js/helper/format-amount',\r\n    'mage/translate',\r\n    'mage/url',\r\n    'domReady!'\r\n], function (\r\n    _,\r\n    Component,\r\n    button,\r\n    buttonApi,\r\n    formatAmount,\r\n    $t,\r\n    url\r\n) {\r\n    'use strict';\r\n\r\n    const config = _.get(window.checkoutConfig.payment, 'braintree_applepay', {});\r\n\r\n    return Component.extend({\r\n\r\n        defaults: {\r\n            template: 'PayPal_Braintree/express/express-applepay',\r\n            id: 'braintree-applepay-express-payment',\r\n            isActive: !_.isEmpty(config),\r\n            clientToken: _.get(config, 'clientToken', null),\r\n            quoteId: window.checkoutConfig.quoteId,\r\n            displayName: _.get(config, 'merchantName', null),\r\n            actionSuccess: url.build('checkout/onepage/success'),\r\n            grandTotalAmount: window.checkoutConfig.quoteData.base_grand_total,\r\n            isLoggedIn: false,\r\n            storeCode: window.checkoutConfig.storeCode\r\n        },\r\n\r\n        /**\r\n         * Is the payment method active.\r\n         *\r\n         * @return {boolean}\r\n         */\r\n        isMethodActive: function () {\r\n            return this.isActive;\r\n        },\r\n\r\n        /**\r\n         * Initialize Apple Pay express.\r\n         */\r\n        initApplePayExpress: function () {\r\n            if (!this.isMethodActive() || !this.clientToken) {\r\n                return;\r\n            }\r\n\r\n            if (!this.displayName) {\r\n                this.displayName = $t('Store');\r\n            }\r\n\r\n            this.isLoggedIn = window.checkoutConfig.customer_is_guest === '1' ? 'true' : 'false';\r\n\r\n            let api = new buttonApi();\r\n\r\n            api.setGrandTotalAmount(formatAmount(this.grandTotalAmount));\r\n            api.setClientToken(this.clientToken);\r\n            api.setDisplayName(this.displayName);\r\n            api.setQuoteId(this.quoteId);\r\n            api.setActionSuccess(this.actionSuccess);\r\n            api.setIsLoggedIn(this.isLoggedIn);\r\n            api.setStoreCode(this.storeCode);\r\n\r\n            // Attach the button\r\n            button.init(\r\n                document.getElementById(this.id),\r\n                api\r\n            );\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/express/express-googlepay.js":"/**\r\n * Express GooglePay button component\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiComponent',\r\n    'mage/url',\r\n    'PayPal_Braintree/js/googlepay/button',\r\n    'PayPal_Braintree/js/googlepay/api',\r\n    'domReady!'\r\n], function ($, _, Component, url, button, buttonApi) {\r\n    'use strict';\r\n\r\n    const config = _.get(window.checkoutConfig.payment, 'braintree_googlepay', {});\r\n\r\n    return Component.extend({\r\n\r\n        defaults: {\r\n            template: 'PayPal_Braintree/express/express-googlepay',\r\n            id: 'braintree-googlepay-express-payment',\r\n            isActive: !_.isEmpty(config),\r\n            clientToken: _.get(config, 'clientToken', null),\r\n            merchantId: _.get(config, 'merchantId', null),\r\n            currencyCode: window.checkoutConfig.quoteData.base_currency_code,\r\n            actionSuccess: url.build('braintree/googlepay/review/'),\r\n            amount: window.checkoutConfig.quoteData.base_grand_total,\r\n            environment: _.get(config, 'environment', 'TEST'),\r\n            cardTypes: _.get(config, 'cardTypes', []),\r\n            btnColor: _.get(config, 'btnColor', ''),\r\n            threeDSecure: null\r\n        },\r\n\r\n        /**\r\n         * Is the payment method active.\r\n         *\r\n         * @return {boolean}\r\n         */\r\n        isMethodActive: function () {\r\n            return this.isActive;\r\n        },\r\n\r\n        /**\r\n         * Get the 3D Secure config object.\r\n         *\r\n         * @return {\r\n        *   {\r\n        *      thresholdAmount: (number|*),\r\n        *      specificCountries: ([]|*),\r\n        *      challengeRequested: (boolean|*),\r\n        *      enabled: boolean\r\n        *   } ||\r\n        *   {\r\n        *      thresholdAmount: number,\r\n        *      specificCountries: *[],\r\n        *      challengeRequested: boolean,\r\n        *      enabled: boolean\r\n        *   }\r\n        * }\r\n         */\r\n        get3DSecureConfig: function () {\r\n            let secureConfig = _.get(window.checkoutConfig.payment, 'three_d_secure', {});\r\n\r\n            if (_.isEmpty(secureConfig)) {\r\n                return {\r\n                    'enabled': false,\r\n                    'challengeRequested': false,\r\n                    'thresholdAmount': 0.0,\r\n                    'specificCountries': [],\r\n                    'ipAddress': ''\r\n                };\r\n            }\r\n\r\n            return {\r\n                'enabled': true,\r\n                'challengeRequested': secureConfig.challengeRequested ,\r\n                'thresholdAmount': secureConfig.thresholdAmount,\r\n                'specificCountries': secureConfig.specificCountries,\r\n                'ipAddress': secureConfig.ipAddress\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Initialize Google Pay express.\r\n         */\r\n        initGooglePayExpress: function () {\r\n            if (!this.isMethodActive()) {\r\n                return;\r\n            }\r\n\r\n            this.threeDSecure = this.get3DSecureConfig();\r\n\r\n            /* Add client token & environment to 3DS Config */\r\n            this.threeDSecure.clientToken = this.clientToken;\r\n            this.threeDSecure.environment = this.environment;\r\n\r\n            let api = new buttonApi();\r\n\r\n            api.setEnvironment(this.environment);\r\n            api.setCurrencyCode(this.currencyCode);\r\n            api.setClientToken(this.clientToken);\r\n            api.setMerchantId(this.merchantId);\r\n            api.setActionSuccess(this.actionSuccess);\r\n            api.setAmount(this.amount);\r\n            api.setCardTypes(this.cardTypes);\r\n            api.setBtnColor(this.btnColor);\r\n            api.setThreeDSecureValidatorConfig(this.threeDSecure);\r\n\r\n            // Attach the button\r\n            button.init(\r\n                document.getElementById(this.id),\r\n                api\r\n            );\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/express/express-payment.js":"/**\r\n * General express payment component that initializes braintree payment buttons\r\n */\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'domReady!'\r\n], function ($, Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/express/express-payment'\r\n        },\r\n\r\n        /**\r\n         * Initializes regular properties of instance.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/express/express-paypal-credit.js":"/**\r\n * Express Paypal Credit button component\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiComponent',\r\n    'mage/url',\r\n    'domReady!'\r\n], function ($, _, Component, url) {\r\n    'use strict';\r\n\r\n    const config = _.get(window.checkoutConfig.payment, 'braintree_paypal_credit', {});\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/express/express-paypal-credit',\r\n            isActive: _.get(config, 'isActive', false),\r\n            checkoutCurrency: window.checkoutConfig.quoteData.base_currency_code,\r\n            checkoutAmount: window.checkoutConfig.quoteData.base_grand_total,\r\n            checkoutLocale: _.get(config, 'locale', null),\r\n            buttonLabel: _.get(config, ['style', 'label'], null),\r\n            buttonColor: _.get(config, ['style', 'color'], null),\r\n            buttonShape: _.get(config, ['style', 'shape'], null),\r\n            actionSuccess: url.build('braintree/paypal/review/')\r\n        },\r\n\r\n        /**\r\n         * Initializes regular properties of instance.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is the payment method active.\r\n         *\r\n         * @return {boolean}\r\n         */\r\n        isMethodActive: function () {\r\n            return this.isActive;\r\n        },\r\n\r\n        /**\r\n         * Is Billing address required.\r\n         *\r\n         * @return {string}\r\n         */\r\n        getIsRequiredBillingAddress: function () {\r\n            return _.get(config, 'isRequiredBillingAddress', '0') === '0' ? '' : 'true';\r\n        },\r\n\r\n        /**\r\n         * Get the merchant's name config.\r\n         *\r\n         * @return {string}\r\n         */\r\n        getMerchantName: function () {\r\n            return _.get(config, 'merchantName', '');\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/express/express-paypal-paylater.js":"/**\r\n * Express PayLater button component\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiComponent',\r\n    'mage/url',\r\n    'domReady!'\r\n], function ($, _, Component, url) {\r\n    'use strict';\r\n\r\n    const config = _.get(window.checkoutConfig.payment, 'braintree_paypal_paylater', {});\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/express/express-paypal-paylater',\r\n            isActive: _.get(config, 'isActive', false),\r\n            checkoutCurrency: window.checkoutConfig.quoteData.base_currency_code,\r\n            checkoutAmount: window.checkoutConfig.quoteData.base_grand_total,\r\n            checkoutLocale: _.get(config, 'locale', null),\r\n            buttonLabel: _.get(config, ['style', 'label'], null),\r\n            buttonColor: _.get(config, ['style', 'color'], null),\r\n            buttonShape: _.get(config, ['style', 'shape'], null),\r\n            actionSuccess: url.build('braintree/paypal/review/'),\r\n            isMessageActive: _.get(config, 'isMessageActive', false),\r\n            messageTextColor: _.get(config ,['message', 'text_color'], null),\r\n            messageLayout: _.get(config ,['message', 'layout'], null),\r\n            messageLogoPosition: _.get(config ,['message', 'logo_position'], null),\r\n            messageLogo: _.get(config ,['message', 'logo'], null)\r\n        },\r\n\r\n        /**\r\n         * Initializes regular properties of instance.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is the payment method active.\r\n         *\r\n         * @return {boolean}\r\n         */\r\n        isMethodActive: function () {\r\n            return this.isActive;\r\n        },\r\n\r\n        /**\r\n         * Is the payment method message active.\r\n         *\r\n         * @return {boolean}\r\n         */\r\n        isMethodMessageActive: function () {\r\n            return this.isMessageActive;\r\n        },\r\n\r\n        /**\r\n         * Is Billing address required.\r\n         *\r\n         * @return {string}\r\n         */\r\n        getIsRequiredBillingAddress: function () {\r\n            return _.get(config, 'isRequiredBillingAddress', '0') === '0' ? '' : 'true';\r\n        },\r\n\r\n        /**\r\n         * Get the merchant's name config.\r\n         *\r\n         * @return {string}\r\n         */\r\n        getMerchantName: function () {\r\n            return _.get(config, 'merchantName', '');\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/express/express-paypal.js":"/**\r\n * Express Paypal button component\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiComponent',\r\n    'mage/url',\r\n    'PayPal_Braintree/js/paypal/button',\r\n    'PayPal_Braintree/js/helper/get-cart-line-items-helper',\r\n    'domReady!'\r\n], function ($, _, Component, url, paypalButton, getCartLineItems) {\r\n    'use strict';\r\n\r\n    const config = _.get(window.checkoutConfig.payment, 'braintree_paypal', {});\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/express/express-paypal',\r\n            isActive: _.get(config, 'isActive', false),\r\n            clientToken: _.get(config, 'clientToken', null),\r\n            checkoutCurrency: window.checkoutConfig.quoteData.base_currency_code,\r\n            checkoutAmount: window.checkoutConfig.quoteData.base_grand_total,\r\n            checkoutLocale: _.get(config, 'locale', null),\r\n            buttonLabel: _.get(config, ['style', 'label'], null),\r\n            buttonColor: _.get(config, ['style', 'color'], null),\r\n            buttonShape: _.get(config, ['style', 'shape'], null),\r\n            actionSuccess: url.build('braintree/paypal/review/')\r\n        },\r\n\r\n        /**\r\n         * Initializes regular properties of instance.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is the payment method active.\r\n         *\r\n         * @return {boolean}\r\n         */\r\n        isMethodActive: function () {\r\n            return this.isActive;\r\n        },\r\n\r\n        /**\r\n         * Is Billing address required.\r\n         *\r\n         * @return {string}\r\n         */\r\n        getIsRequiredBillingAddress: function () {\r\n            return _.get(config, 'isRequiredBillingAddress', '0') === '0' ? '' : 'true';\r\n        },\r\n\r\n        /**\r\n         * Get the merchant's name config.\r\n         *\r\n         * @return {string}\r\n         */\r\n        getMerchantName: function () {\r\n            return _.get(config, 'merchantName', '');\r\n        },\r\n\r\n        /**\r\n         * Initialize Braintree PayPal buttons.\r\n         *\r\n         * PayPal Credit & PayPal Pay Later & PayPal Pay Later Messaging rely on PayPal to be enabled.\r\n         */\r\n        initPayPalButtons: function () {\r\n            if (!this.isMethodActive() || !this.clientToken) {\r\n                return;\r\n            }\r\n\r\n            let buttonConfig = {\r\n                    'clientToken': this.clientToken,\r\n                    'currency': this.checkoutCurrency,\r\n                    'environment': config.environment,\r\n                    'merchantCountry': config.merchantCountry,\r\n                    'isCreditActive': _.get(window.checkoutConfig.payment,\r\n                        ['braintree_paypal_credit', 'isActive'], false)\r\n                },\r\n\r\n                cartLineItems = getCartLineItems();\r\n\r\n            paypalButton.init(\r\n                buttonConfig,\r\n                JSON.stringify(cartLineItems)\r\n            );\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/ach-vault.js":"/*browser:true*/\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Vault/js/view/payment/method-renderer/vault',\r\n    'Magento_Ui/js/model/messageList',\r\n    'PayPal_Braintree/js/view/payment/validator-handler',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/full-screen-loader'\r\n], function (\r\n    ko,\r\n    $,\r\n    _,\r\n    VaultComponent,\r\n    globalMessageList,\r\n    validatorManager,\r\n    additionalValidators,\r\n    fullScreenLoader\r\n) {\r\n    'use strict';\r\n\r\n    return VaultComponent.extend({\r\n        defaults: {\r\n            active: false,\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            },\r\n            template: 'PayPal_Braintree/payment/ach/vault',\r\n            validatorManager: validatorManager,\r\n            additionalData: {}\r\n        },\r\n\r\n        /**\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['active']);\r\n            this.validatorManager.initialize();\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is payment option active?\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        isActive: function () {\r\n            let active = this.getId() === this.isChecked();\r\n\r\n            this.active(active);\r\n            return active;\r\n        },\r\n\r\n        /**\r\n         * Return the payment method code.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return 'braintree_ach_direct_debit_vault';\r\n        },\r\n\r\n        /**\r\n         * Get Bank Account last 4 digits.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getAccountNumberLastFourDigits: function () {\r\n            return this.details.last4;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * Get bank's routing number\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getRoutingNumber: function () {\r\n            return this.details.routingNumber;\r\n        },\r\n\r\n        /**\r\n         * Get the ACH icon.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getPaymentIcon() {\r\n            return window.checkoutConfig.payment['braintree_ach_direct_debit'].paymentIcon;\r\n        },\r\n\r\n        /**\r\n         * Trigger Place order action.\r\n         *\r\n         * Set payment method nonce & place order.\r\n         */\r\n        triggerPlaceOrder: function () {\r\n            this.getPaymentMethodNonce();\r\n        },\r\n\r\n        /**\r\n         * Send request to get payment method nonce & places order.\r\n         */\r\n        getPaymentMethodNonce: function () {\r\n            let self = this;\r\n\r\n            fullScreenLoader.startLoader();\r\n            $.getJSON(self.nonceUrl, {\r\n                'public_hash': self.publicHash\r\n            }).done(function (response) {\r\n                fullScreenLoader.stopLoader();\r\n                self.additionalData['payment_method_nonce'] = response.paymentMethodNonce;\r\n                self.placeOrder();\r\n            }).fail(function (response) {\r\n                let error = JSON.parse(response.responseText);\r\n\r\n                fullScreenLoader.stopLoader();\r\n                globalMessageList.addErrorMessage({\r\n                    message: error.message\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get payment method data.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            let data = {\r\n                'method': this.code,\r\n                'additional_data': {\r\n                    'public_hash': this.publicHash\r\n                }\r\n            };\r\n\r\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n            return data;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/ach.js":"define(\r\n    [\r\n        'Magento_Checkout/js/view/payment/default',\r\n        'ko',\r\n        'jquery',\r\n        'braintree',\r\n        'braintreeDataCollector',\r\n        'braintreeAch',\r\n        'PayPal_Braintree/js/form-builder',\r\n        'Magento_Ui/js/model/messageList',\r\n        'Magento_Checkout/js/action/select-billing-address',\r\n        'Magento_Checkout/js/model/full-screen-loader',\r\n        'Magento_Checkout/js/model/quote',\r\n        'mage/translate',\r\n        'Magento_Vault/js/view/payment/vault-enabler',\r\n        'underscore'\r\n    ],\r\n    function (\r\n        Component,\r\n        ko,\r\n        $,\r\n        braintree,\r\n        dataCollector,\r\n        ach,\r\n        formBuilder,\r\n        messageList,\r\n        selectBillingAddress,\r\n        fullScreenLoader,\r\n        quote,\r\n        $t,\r\n        VaultEnabler,\r\n        _\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                deviceData: null,\r\n                paymentMethodNonce: null,\r\n                template: 'PayPal_Braintree/payment/ach',\r\n                achInstance: null,\r\n                routingNumber: ko.observable(''),\r\n                accountNumber: ko.observable(''),\r\n                accountType: ko.observable('checking'),\r\n                ownershipType: ko.observable('personal'),\r\n                firstName: ko.observable(''),\r\n                lastName: ko.observable(''),\r\n                businessName: ko.observable(''),\r\n                hasAuthorization: ko.observable(false),\r\n                business: ko.observable(false), // for ownership type\r\n                personal: ko.observable(true), // for ownership type\r\n                vaultEnabler: null\r\n            },\r\n\r\n            clickAchBtn: function () {\r\n                if (!this.validateForm('#' + this.getCode() + '-form')) {\r\n                    return;\r\n                }\r\n\r\n                fullScreenLoader.startLoader();\r\n\r\n                let self = this,\r\n\r\n                    billingAddress = quote.billingAddress(),\r\n\r\n                    regionCode,\r\n\r\n                    bankDetails = {\r\n                        routingNumber: self.routingNumber(),\r\n                        accountNumber: self.accountNumber(),\r\n                        accountType: self.accountType(),\r\n                        ownershipType: self.ownershipType(),\r\n                        billingAddress: {\r\n                            streetAddress: billingAddress.street[0],\r\n                            extendedAddress: billingAddress.street[1],\r\n                            locality: billingAddress.city,\r\n                            region: billingAddress.regionCode,\r\n                            postalCode: billingAddress.postcode\r\n                        }\r\n                    },\r\n\r\n                    mandateText = document.getElementById(self.isVaultActive()\r\n                        ? 'braintree-ach-mandate-vault'\r\n                        : 'braintree-ach-mandate'\r\n                    ).textContent;\r\n\r\n                if (bankDetails.ownershipType === 'personal') {\r\n                    bankDetails.firstName = self.firstName();\r\n                    bankDetails.lastName = self.lastName();\r\n                } else {\r\n                    bankDetails.businessName = self.businessName();\r\n                }\r\n\r\n                // if no region code is available, lets find one!\r\n                if (typeof billingAddress.regionCode === 'undefined') {\r\n                    $.get('/rest/V1/directory/countries/' + billingAddress.countryId).done(function (data) {\r\n                        if (typeof data.available_regions !== 'undefined') {\r\n                            data.available_regions.forEach(function (availableRegion) {\r\n                                if (availableRegion.id === billingAddress.regionId) {\r\n                                    regionCode = availableRegion.code;\r\n                                    bankDetails.billingAddress.region = regionCode;\r\n                                    self.tokenizeAch(bankDetails, mandateText);\r\n                                }\r\n                            });\r\n                        } else {\r\n                            fullScreenLoader.stopLoader();\r\n                            self.tokenizeAch(bankDetails, mandateText);\r\n                        }\r\n                    }).fail(function () {\r\n                        fullScreenLoader.stopLoader();\r\n                    });\r\n                } else {\r\n                    self.tokenizeAch(bankDetails, mandateText);\r\n                }\r\n            },\r\n\r\n            tokenizeAch: function (bankDetails, mandateText) {\r\n                let self = this;\r\n\r\n                self.achInstance.tokenize({\r\n                    bankDetails: bankDetails,\r\n                    mandateText: mandateText\r\n                }, function (tokenizeErr, tokenizedPayload) {\r\n                    if (tokenizeErr) {\r\n                        let error = 'There was an error with the provided bank details. Please check and try again.';\r\n\r\n                        self.setErrorMsg($t(error));\r\n                        self.hasAuthorization(false);\r\n                        fullScreenLoader.stopLoader();\r\n                    } else {\r\n                        fullScreenLoader.stopLoader();\r\n                        self.handleAchSuccess(tokenizedPayload);\r\n                    }\r\n                });\r\n            },\r\n\r\n            getClientToken: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n            },\r\n\r\n            getCode: function () {\r\n                return 'braintree_ach_direct_debit';\r\n            },\r\n\r\n            getStoreName: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].storeName;\r\n            },\r\n\r\n            getData: function () {\r\n                let data = {\r\n                    'method': this.getCode(),\r\n                    'additional_data': {\r\n                        'payment_method_nonce': this.paymentMethodNonce,\r\n                        'device_data': this.deviceData\r\n                    }\r\n                };\r\n\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n                this.vaultEnabler.visitAdditionalData(data);\r\n\r\n                return data;\r\n            },\r\n\r\n            getTitle: function () {\r\n                return 'ACH Direct Debit';\r\n            },\r\n\r\n            handleAchSuccess: function (payload) {\r\n                this.setPaymentMethodNonce(payload.nonce);\r\n                this.placeOrder();\r\n            },\r\n\r\n            initialize: function () {\r\n                this._super();\r\n                this.vaultEnabler = new VaultEnabler();\r\n                this.vaultEnabler.setPaymentCode(this.getVaultCode());\r\n\r\n                let self = this;\r\n\r\n                this.vaultEnabler.isActivePaymentTokenEnabler.subscribe(function () {\r\n                    self.achInstance.teardown(function () {\r\n                        self.initAch();\r\n                    });\r\n                });\r\n\r\n                this.initAch();\r\n\r\n                return this;\r\n            },\r\n\r\n            isAllowed: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].isAllowed;\r\n            },\r\n\r\n            /**\r\n             * Change the account type.\r\n             *\r\n             * @param data\r\n             * @param event\r\n             */\r\n            changeOwnershipType: function (data, event) {\r\n                let self = this;\r\n\r\n                if (event.currentTarget.value === 'business') {\r\n                    self.business(true);\r\n                    self.personal(false);\r\n                } else {\r\n                    self.business(false);\r\n                    self.personal(true);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Is Business type account.\r\n             *\r\n             * @returns {Boolean}\r\n             */\r\n            isBusiness: function () {\r\n                return this.business;\r\n            },\r\n\r\n            /**\r\n             * Is Personal type account.\r\n             *\r\n             * @returns {Boolean}\r\n             */\r\n            isPersonal: function () {\r\n                return this.personal;\r\n            },\r\n\r\n            /**\r\n             * Get the account holder name input.\r\n             *\r\n             * @returns {String}\r\n             */\r\n            getAccountHolderName: function () {\r\n                if (this.firstName() !== '' || this.lastName() !== '') {\r\n                    return this.firstName() + ' ' + this.lastName();\r\n                }\r\n\r\n                return 'XXXX';\r\n            },\r\n\r\n            /**\r\n             * Get the account number input.\r\n             *\r\n             * @returns {String}\r\n             */\r\n            getAccountNumber: function () {\r\n                return this.accountNumber() !== '' ? this.accountNumber() : 'XXXX';\r\n            },\r\n\r\n            /**\r\n             * Get the Bank Routing Number input.\r\n             *\r\n             * @returns {String}\r\n             */\r\n            getRoutingNumber: function () {\r\n                return this.routingNumber() !== '' ? this.routingNumber() : 'XXXX';\r\n            },\r\n\r\n            /**\r\n             * Get the quote totals value.\r\n             *\r\n             * @returns {String}\r\n             */\r\n            getGrandTotal: function () {\r\n                let totals = quote.getTotals()();\r\n\r\n                if (totals) {\r\n                    return totals['grand_total'];\r\n                }\r\n\r\n                return quote['grand_total'];\r\n            },\r\n\r\n            /**\r\n             * Get the current date in US format (ACH is US only).\r\n             *\r\n             * @returns {String}\r\n             */\r\n            getCurrentDate: function () {\r\n                const today = new Date();\r\n\r\n                return today.toLocaleDateString('en-US');\r\n            },\r\n\r\n            setErrorMsg: function (message) {\r\n                messageList.addErrorMessage({\r\n                    message: message\r\n                });\r\n            },\r\n\r\n            setPaymentMethodNonce: function (nonce) {\r\n                this.paymentMethodNonce = nonce;\r\n            },\r\n\r\n            /**\r\n             * Set the ACH instance.\r\n             *\r\n             * @param {*} instance\r\n             */\r\n            setAchInstance: function (instance) {\r\n                this.achInstance = instance;\r\n            },\r\n\r\n            /**\r\n             * Validate ACH form.\r\n             *\r\n             * @param {*} form\r\n             * @returns {*|jQuery}\r\n             */\r\n            validateForm: function (form) {\r\n                return $(form).validation() && $(form).validation('isValid');\r\n            },\r\n\r\n            /**\r\n             * Get ACH's should vault checkbox element ID.\r\n             *\r\n             * @returns {String}\r\n             */\r\n            getVaultCheckboxId: function () {\r\n                return this.getCode() + '_enable_vault';\r\n            },\r\n\r\n            /**\r\n             * Check whether Vault is enabled.\r\n             *\r\n             * @returns {Boolean}\r\n             */\r\n            isVaultEnabled: function () {\r\n                return this.vaultEnabler.isVaultEnabled();\r\n            },\r\n\r\n            /**\r\n             * Is Vault enabled & vaulting payment active (checked)\r\n             *\r\n             * @returns {Boolean}\r\n             */\r\n            isVaultActive: function () {\r\n                return this.isVaultEnabled() && this.vaultEnabler.isActivePaymentTokenEnabler();\r\n            },\r\n\r\n            /**\r\n             * Get ACH vault payment method code.\r\n             *\r\n             * @returns {String}\r\n             */\r\n            getVaultCode: function () {\r\n                return window.checkoutConfig.payment[this.getCode()]['vaultCode'];\r\n            },\r\n\r\n            /**\r\n             * Initialize ACH component.\r\n             *\r\n             * @returns {void}\r\n             */\r\n            initAch: function () {\r\n                let self = this;\r\n\r\n                braintree.create({\r\n                    authorization: self.getClientToken()\r\n                }, function (clientError, clientInstance) {\r\n                    if (clientError) {\r\n                        this.setErrorMsg($t('Unable to initialize Braintree Client.'));\r\n                        return;\r\n                    }\r\n\r\n                    /* Collect device data */\r\n                    self.collectDeviceData(clientInstance, function () {\r\n                        /* callback from collectDeviceData */\r\n                        ach.create({\r\n                            client: clientInstance\r\n                        }, function (achErr, achInstance) {\r\n                            if (achErr) {\r\n                                self.setErrorMsg($t('Error initializing ACH: %1').replace('%1', achErr));\r\n                                return;\r\n                            }\r\n\r\n                            self.setAchInstance(achInstance);\r\n                        });\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Collect device data.\r\n             *\r\n             * @param clientInstance\r\n             * @param {Function} callback\r\n             * @returns {void}\r\n             */\r\n            collectDeviceData: function (clientInstance, callback) {\r\n                let self = this;\r\n\r\n                dataCollector.create({\r\n                    client: clientInstance,\r\n                    paypal: true\r\n                }, function (dataCollectorErr, dataCollectorInstance) {\r\n                    if (dataCollectorErr) {\r\n                        return;\r\n                    }\r\n\r\n                    self.deviceData = dataCollectorInstance.deviceData;\r\n                    callback();\r\n                });\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/applepay-vault.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Vault/js/view/payment/method-renderer/vault',\r\n    'Magento_Ui/js/model/messageList',\r\n    'PayPal_Braintree/js/view/payment/validator-handler',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/full-screen-loader'\r\n], function (\r\n    ko,\r\n    $,\r\n    _,\r\n    VaultComponent,\r\n    globalMessageList,\r\n    validatorManager,\r\n    additionalValidators,\r\n    fullScreenLoader\r\n) {\r\n    'use strict';\r\n\r\n    return VaultComponent.extend({\r\n        defaults: {\r\n            active: false,\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            },\r\n            template: 'PayPal_Braintree/applepay/vault',\r\n            validatorManager: validatorManager,\r\n            additionalData: {}\r\n        },\r\n\r\n        /**\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['active']);\r\n            this.validatorManager.initialize();\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is payment option active?\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        isActive: function () {\r\n            let active = this.getId() === this.isChecked();\r\n\r\n            this.active(active);\r\n            return active;\r\n        },\r\n\r\n        /**\r\n         * Return the payment method code.\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getCode: function () {\r\n            return 'braintree_applepay_vault';\r\n        },\r\n\r\n        /**\r\n         * Get last 4 digits of card.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getMaskedCard: function () {\r\n            return this.details.maskedCC;\r\n        },\r\n\r\n        /**\r\n         * Get expiration date.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getExpirationDate: function () {\r\n            return this.details.expirationDate;\r\n        },\r\n\r\n        /**\r\n         * Get card type.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getCardType: function () {\r\n            return this.details.type;\r\n        },\r\n\r\n        /**\r\n         * Get the ApplePay Card icons.\r\n         *\r\n         * @param type\r\n         * @return {*|boolean}\r\n         */\r\n        getApplePayIcons(type) {\r\n            let lowerCasedType = type.toLowerCase();\r\n\r\n            return window.checkoutConfig.payment.braintree_applepay.icons.hasOwnProperty(lowerCasedType) ?\r\n                window.checkoutConfig.payment.braintree_applepay.icons[lowerCasedType]\r\n                : false;\r\n        },\r\n\r\n        /**\r\n         * trigger Place order action.\r\n         *\r\n         * Set payment method nonce & place order.\r\n         */\r\n        triggerPlaceOrder: function () {\r\n            this.getPaymentMethodNonce();\r\n        },\r\n\r\n        /**\r\n         * Send request to get payment method nonce & places order.\r\n         */\r\n        getPaymentMethodNonce: function () {\r\n            let self = this;\r\n\r\n            fullScreenLoader.startLoader();\r\n            $.getJSON(self.nonceUrl, {\r\n                'public_hash': self.publicHash\r\n            }).done(function (response) {\r\n                fullScreenLoader.stopLoader();\r\n                self.additionalData['payment_method_nonce'] = response.paymentMethodNonce;\r\n                self.placeOrder();\r\n            }).fail(function (response) {\r\n                let error = JSON.parse(response.responseText);\r\n\r\n                fullScreenLoader.stopLoader();\r\n                globalMessageList.addErrorMessage({\r\n                    message: error.message\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get payment method data.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            let data = {\r\n                'method': this.code,\r\n                'additional_data': {\r\n                    'public_hash': this.publicHash\r\n                }\r\n            };\r\n\r\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n            return data;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/cc-form.js":"/**\r\n * Copyright 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine(\r\n    [\r\n        'underscore',\r\n        'jquery',\r\n        'Magento_Payment/js/view/payment/cc-form',\r\n        'Magento_Checkout/js/model/quote',\r\n        'PayPal_Braintree/js/view/payment/adapter',\r\n        'mage/translate',\r\n        'PayPal_Braintree/js/validator',\r\n        'PayPal_Braintree/js/view/payment/validator-handler',\r\n        'Magento_Checkout/js/model/full-screen-loader'\r\n    ],\r\n    function (\r\n        _,\r\n        $,\r\n        Component,\r\n        quote,\r\n        braintree,\r\n        $t,\r\n        validator,\r\n        validatorManager,\r\n        fullScreenLoader\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                active: false,\r\n                braintreeClient: null,\r\n                braintreeDeviceData: null,\r\n                paymentMethodNonce: null,\r\n                lastBillingAddress: null,\r\n                validatorManager: validatorManager,\r\n                code: 'braintree',\r\n                isProcessing: false,\r\n                creditCardBin: null,\r\n\r\n                /**\r\n                 * Additional payment data\r\n                 *\r\n                 * {Object}\r\n                 */\r\n                additionalData: {},\r\n\r\n                /**\r\n                 * Braintree client configuration\r\n                 *\r\n                 * {Object}\r\n                 */\r\n                clientConfig: {\r\n                    onReady: function (context) {\r\n                        context.setupHostedFields();\r\n                    },\r\n\r\n                    /**\r\n                     * Triggers on payment nonce receive\r\n                     * @param {Object} response\r\n                     */\r\n                    onPaymentMethodReceived: function (response) {\r\n                        this.handleNonce(response);\r\n                        this.isProcessing = false;\r\n                    },\r\n\r\n                    /**\r\n                     * Allow a new nonce to be generated\r\n                     */\r\n                    onPaymentMethodError: function () {\r\n                        this.isProcessing = false;\r\n                    },\r\n\r\n                    /**\r\n                     * Device data initialization\r\n                     * @param {String} deviceData\r\n                     */\r\n                    onDeviceDataReceived: function (deviceData) {\r\n                        if (this.additionalData === undefined) {\r\n                            this.additionalData = {};\r\n                        }\r\n                        this.additionalData['device_data'] = deviceData;\r\n                    },\r\n\r\n                    /**\r\n                     * After Braintree instance initialization\r\n                     */\r\n                    onInstanceReady: function () {},\r\n\r\n                    /**\r\n                     * Triggers on any Braintree error\r\n                     * @param {Object} response\r\n                     */\r\n                    onError: function (response) {\r\n                        this.isProcessing = false;\r\n                        braintree.showError($t('Payment ' + this.getTitle() + ' can\\'t be initialized'));\r\n                        throw response.message;\r\n                    },\r\n\r\n                    /**\r\n                     * Triggers when customer click \"Cancel\"\r\n                     */\r\n                    onCancelled: function () {\r\n                        this.paymentMethodNonce = null;\r\n                        this.isProcessing = false;\r\n                    }\r\n                },\r\n                imports: {\r\n                    onActiveChange: 'active'\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Set list of observable attributes\r\n             *\r\n             * @returns {exports.initObservable}\r\n             */\r\n            initObservable: function () {\r\n                validator.setConfig(window.checkoutConfig.payment[this.getCode()]);\r\n                this._super()\r\n                    .observe(['active']);\r\n                this.validatorManager.initialize();\r\n                this.initClientConfig();\r\n\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Get payment name\r\n             *\r\n             * @returns {String}\r\n             */\r\n            getCode: function () {\r\n                return this.code;\r\n            },\r\n\r\n            /**\r\n             * Check if payment is active\r\n             *\r\n             * @returns {Boolean}\r\n             */\r\n            isActive: function () {\r\n                let active = this.getCode() === this.isChecked();\r\n\r\n                this.active(active);\r\n\r\n                return active;\r\n            },\r\n\r\n            /**\r\n             * Triggers when payment method change\r\n             * @param {Boolean} isActive\r\n             */\r\n            onActiveChange: function (isActive) {\r\n                if (!isActive) {\r\n                    return;\r\n                }\r\n\r\n                this.initBraintree();\r\n            },\r\n\r\n            /**\r\n             * Init config\r\n             */\r\n            initClientConfig: function () {\r\n                _.each(this.clientConfig, function (fn, name) {\r\n                    if (typeof fn === 'function') {\r\n                        this.clientConfig[name] = fn.bind(this);\r\n                    }\r\n                }, this);\r\n            },\r\n\r\n            /**\r\n             * Init Braintree configuration\r\n             */\r\n            initBraintree: function () {\r\n                let intervalId = setInterval(function () {\r\n                    // stop loader when frame will be loaded\r\n                    if ($('#braintree-hosted-field-number').length) {\r\n                        clearInterval(intervalId);\r\n                        fullScreenLoader.stopLoader(true);\r\n                    }\r\n                }, 500);\r\n\r\n                if (braintree.checkout) {\r\n                    braintree.checkout.teardown(function () {\r\n                        braintree.checkout = null;\r\n                    });\r\n                }\r\n\r\n                fullScreenLoader.startLoader();\r\n                braintree.setConfig(this.clientConfig);\r\n                braintree.setup();\r\n            },\r\n\r\n            /**\r\n             * Get full selector name\r\n             *\r\n             * @param {String} field\r\n             * @returns {String}\r\n             */\r\n            getSelector: function (field) {\r\n                return '#' + this.getCode() + '_' + field;\r\n            },\r\n\r\n            /**\r\n             * Get list of available CC types\r\n             *\r\n             * @returns {Object}\r\n             */\r\n            getCcAvailableTypes: function () {\r\n                let availableTypes = validator.getAvailableCardTypes(),\r\n                    billingAddress = quote.billingAddress(),\r\n                    billingCountryId;\r\n\r\n                this.lastBillingAddress = quote.shippingAddress();\r\n\r\n                if (!billingAddress) {\r\n                    billingAddress = this.lastBillingAddress;\r\n                }\r\n\r\n                billingCountryId = billingAddress.countryId;\r\n\r\n                if (billingCountryId && validator.getCountrySpecificCardTypes(billingCountryId)) {\r\n                    return validator.collectTypes(\r\n                        availableTypes,\r\n                        validator.getCountrySpecificCardTypes(billingCountryId)\r\n                    );\r\n                }\r\n\r\n                return availableTypes;\r\n            },\r\n\r\n            /**\r\n             * @returns {String}\r\n             */\r\n            getEnvironment: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].environment;\r\n            },\r\n\r\n            /**\r\n             * Get data\r\n             *\r\n             * @returns {Object}\r\n             */\r\n            getData: function () {\r\n                let data = {\r\n                    'method': this.getCode(),\r\n                    'additional_data': {\r\n                        'payment_method_nonce': this.paymentMethodNonce,\r\n                        'g-recaptcha-response' : $('#token-grecaptcha-braintree').val()\r\n                    }\r\n                };\r\n\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n                return data;\r\n            },\r\n\r\n            /**\r\n             * Set payment nonce\r\n             * @param {String} paymentMethodNonce\r\n             */\r\n            setPaymentMethodNonce: function (paymentMethodNonce) {\r\n                this.paymentMethodNonce = paymentMethodNonce;\r\n            },\r\n\r\n            /**\r\n             * Set credit card bin\r\n             * @param creditCardBin\r\n             */\r\n            setCreditCardBin: function (creditCardBin) {\r\n                this.creditCardBin = creditCardBin;\r\n            },\r\n\r\n            /**\r\n             * Prepare payload to place order\r\n             * @param {Object} payload\r\n             */\r\n            handleNonce: function (payload) {\r\n                let self = this;\r\n\r\n                this.setPaymentMethodNonce(payload.nonce);\r\n                this.setCreditCardBin(payload.details.bin);\r\n\r\n                // place order on success validation\r\n                self.validatorManager.validate(self, function () {\r\n                    return self.placeOrder('parent');\r\n                }, function () {\r\n                    self.isProcessing = false;\r\n                    self.paymentMethodNonce = null;\r\n                    self.creditCardBin = null;\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Action to place order\r\n             * @param {String} key\r\n             */\r\n            placeOrder: function (key) {\r\n                if (key) {\r\n                    return this._super();\r\n                }\r\n\r\n                if (this.isProcessing) {\r\n                    return false;\r\n                }\r\n                this.isProcessing = true;\r\n\r\n\r\n                braintree.tokenizeHostedFields();\r\n                return false;\r\n            },\r\n\r\n            /**\r\n             * Get payment icons\r\n             * @param {String} type\r\n             * @returns {Boolean}\r\n             */\r\n            getIcons: function (type) {\r\n                return window.checkoutConfig.payment.braintree.icons.hasOwnProperty(type) ?\r\n                    window.checkoutConfig.payment.braintree.icons[type]\r\n                    : false;\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/googlepay-vault.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Vault/js/view/payment/method-renderer/vault',\r\n    'Magento_Ui/js/model/messageList',\r\n    'PayPal_Braintree/js/view/payment/validator-handler',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/full-screen-loader'\r\n], function (\r\n    ko,\r\n    $,\r\n    _,\r\n    VaultComponent,\r\n    globalMessageList,\r\n    validatorManager,\r\n    additionalValidators,\r\n    fullScreenLoader\r\n) {\r\n    'use strict';\r\n\r\n    return VaultComponent.extend({\r\n        defaults: {\r\n            active: false,\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            },\r\n            template: 'PayPal_Braintree/googlepay/vault',\r\n            validatorManager: validatorManager,\r\n            additionalData: {}\r\n        },\r\n\r\n        /**\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['active']);\r\n            this.validatorManager.initialize();\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is payment option active?\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        isActive: function () {\r\n            let active = this.getId() === this.isChecked();\r\n\r\n            this.active(active);\r\n            return active;\r\n        },\r\n\r\n        /**\r\n         * Return the payment method code.\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getCode: function () {\r\n            return this.code;\r\n        },\r\n\r\n        /**\r\n         * Get last 4 digits of card.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getMaskedCard: function () {\r\n            return this.details.maskedCC;\r\n        },\r\n\r\n        /**\r\n         * Get expiration date.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getExpirationDate: function () {\r\n            return this.details.expirationDate;\r\n        },\r\n\r\n        /**\r\n         * Get card type.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getCardType: function () {\r\n            return this.details.type;\r\n        },\r\n\r\n        /**\r\n         * Get the Google Pay Card icons.\r\n         *\r\n         * @param type\r\n         * @return {*|boolean}\r\n         */\r\n        getGooglePayIcons: function (type) {\r\n            let lowerCasedType = type.toLowerCase();\r\n\r\n            return window.checkoutConfig.payment.braintree_googlepay.icons.hasOwnProperty(lowerCasedType) ?\r\n                window.checkoutConfig.payment.braintree_googlepay.icons[lowerCasedType]\r\n                : false;\r\n        },\r\n\r\n        /**\r\n         * trigger Place order action.\r\n         *\r\n         * Set payment method nonce & place order.\r\n         */\r\n        triggerPlaceOrder: function () {\r\n            this.getPaymentMethodNonce();\r\n        },\r\n\r\n        /**\r\n         * Send request to get payment method nonce & places order.\r\n         */\r\n        getPaymentMethodNonce: function () {\r\n            let self = this;\r\n\r\n            fullScreenLoader.startLoader();\r\n            $.getJSON(self.nonceUrl, {\r\n                'public_hash': self.publicHash\r\n            }).done(function (response) {\r\n                fullScreenLoader.stopLoader();\r\n                self.additionalData['payment_method_nonce'] = response.paymentMethodNonce;\r\n                self.placeOrder();\r\n            }).fail(function (response) {\r\n                let error = JSON.parse(response.responseText);\r\n\r\n                fullScreenLoader.stopLoader();\r\n                globalMessageList.addErrorMessage({\r\n                    message: error.message\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get payment method data.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            let data = {\r\n                'method': this.code,\r\n                'additional_data': {\r\n                    'public_hash': this.publicHash\r\n                }\r\n            };\r\n\r\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n            return data;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/hosted-fields.js":"/**\r\n * Copyright 2013-2017 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n\r\ndefine([\r\n    'jquery',\r\n    'PayPal_Braintree/js/view/payment/method-renderer/cc-form',\r\n    'PayPal_Braintree/js/model/vault-enabler',\r\n    'PayPal_Braintree/js/validator',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'mage/translate'\r\n], function ($, Component, vaultEnablerModel, validator, additionalValidators, $t) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/form',\r\n            clientConfig: {\r\n\r\n                /**\r\n                 * {String}\r\n                 */\r\n                id: 'co-transparent-form-braintree'\r\n            },\r\n            isValidCardNumber: false,\r\n            isValidExpirationDate: false,\r\n            isValidCvvNumber: false,\r\n\r\n            onInstanceReady: function (instance) {\r\n                instance.on('validityChange', this.onValidityChange.bind(this));\r\n                instance.on('cardTypeChange', this.onCardTypeChange.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {exports.initialize}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.vaultEnabler = vaultEnablerModel.getVaultEnabler();\r\n            vaultEnablerModel.setPaymentCode(this.getVaultCode());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init config\r\n         */\r\n        initClientConfig: function () {\r\n            this._super();\r\n\r\n            this.clientConfig.hostedFields = this.getHostedFields();\r\n            this.clientConfig.styles = {\r\n                'input': {\r\n                    'font-size': '14pt',\r\n                    'color': '#3A3A3A'\r\n                },\r\n                ':focus': {\r\n                    'color': 'black'\r\n                },\r\n                '.valid': {\r\n                    'color': 'green'\r\n                },\r\n                '.invalid': {\r\n                    'color': 'red'\r\n                }\r\n            };\r\n            this.clientConfig.onInstanceReady = this.onInstanceReady.bind(this);\r\n        },\r\n\r\n        /**\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            var data = this._super();\r\n\r\n            vaultEnablerModel.visitAdditionalData(data);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * @returns {Bool}\r\n         */\r\n        isVaultEnabled: function () {\r\n            return vaultEnablerModel.isVaultEnabled();\r\n        },\r\n\r\n        /**\r\n         * Get Braintree Hosted Fields\r\n         * @returns {Object}\r\n         */\r\n        getHostedFields: function () {\r\n            var self = this,\r\n                fields = {\r\n                    number: {\r\n                        selector: self.getSelector('cc_number'),\r\n                        placeholder: $t('4111 1111 1111 1111')\r\n                    },\r\n                    expirationDate: {\r\n                        selector: self.getSelector('expirationDate'),\r\n                        placeholder: $t('MM/YYYY')\r\n                    }\r\n                };\r\n\r\n            if (self.hasVerification()) {\r\n                fields.cvv = {\r\n                    selector: self.getSelector('cc_cid'),\r\n                    placeholder: $t('123')\r\n                };\r\n            }\r\n\r\n            return fields;\r\n        },\r\n\r\n        /**\r\n         * Triggers on Hosted Field changes\r\n         * @param {Object} event\r\n         * @returns {Boolean}\r\n         */\r\n        onValidityChange: function (event) {\r\n            // Handle a change in validation or card type\r\n            if (event.emittedBy === 'number') {\r\n                this.selectedCardType(null);\r\n\r\n                if (event.cards.length === 1) {\r\n                    this.isValidCardNumber = event.fields.number.isValid;\r\n                    this.selectedCardType(\r\n                        validator.getMageCardType(event.cards[0].type, this.getCcAvailableTypes())\r\n                    );\r\n                    this.validateCardType();\r\n                } else {\r\n                    this.isValidCardNumber = event.fields.number.isValid;\r\n                    this.validateCardType();\r\n                }\r\n            }\r\n\r\n            // Other field validations\r\n            if (event.emittedBy === 'expirationDate') {\r\n                this.isValidExpirationDate = event.fields.expirationDate.isValid;\r\n            }\r\n            if (event.emittedBy === 'cvv') {\r\n                this.isValidCvvNumber = event.fields.cvv.isValid;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Triggers on Hosted Field card type changes\r\n         * @param {Object} event\r\n         * @returns {Boolean}\r\n         */\r\n        onCardTypeChange: function (event) {\r\n            if (event.cards.length === 1) {\r\n                this.selectedCardType(\r\n                    validator.getMageCardType(event.cards[0].type, this.getCcAvailableTypes())\r\n                );\r\n            } else {\r\n                this.selectedCardType(null);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggle invalid class on selector\r\n         * @param selector\r\n         * @param state\r\n         * @returns {boolean}\r\n         */\r\n        validateField: function (selector, state) {\r\n            var $selector = $(this.getSelector(selector)),\r\n                invalidClass = 'braintree-hosted-fields-invalid';\r\n\r\n            if (state === true) {\r\n                $selector.removeClass(invalidClass);\r\n                return true;\r\n            }\r\n\r\n            $selector.addClass(invalidClass);\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validate current credit card type\r\n         * @returns {Boolean}\r\n         */\r\n        validateCardType: function () {\r\n            return this.validateField(\r\n                'cc_number',\r\n                this.isValidCardNumber\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate current expiry date\r\n         * @returns {boolean}\r\n         */\r\n        validateExpirationDate: function () {\r\n            return this.validateField(\r\n                'expirationDate',\r\n                this.isValidExpirationDate === true\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate current CVV field\r\n         * @returns {boolean}\r\n         */\r\n        validateCvvNumber: function () {\r\n            var self = this;\r\n\r\n            if (self.hasVerification() === false) {\r\n                return true;\r\n            }\r\n\r\n            return this.validateField(\r\n                'cc_cid',\r\n                this.isValidCvvNumber === true\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Validate all fields\r\n         * @returns {boolean}\r\n         */\r\n        validateFormFields: function () {\r\n            return (this.validateCardType() && this.validateExpirationDate() && this.validateCvvNumber()) === true;\r\n        },\r\n\r\n        /**\r\n         * Trigger order placing\r\n         */\r\n        placeOrderClick: function () {\r\n            if (this.validateFormFields() && additionalValidators.validate()) {\r\n                this.placeOrder();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getVaultCode: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].ccVaultCode;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/lpm.js":"define(\r\n    [\r\n        'Magento_Checkout/js/view/payment/default',\r\n        'ko',\r\n        'underscore',\r\n        'jquery',\r\n        'braintree',\r\n        'braintreeLpm',\r\n        'PayPal_Braintree/js/form-builder',\r\n        'Magento_Ui/js/model/messageList',\r\n        'Magento_Checkout/js/action/select-billing-address',\r\n        'PayPal_Braintree/js/helper/remove-non-digit-characters',\r\n        'Magento_Checkout/js/model/full-screen-loader',\r\n        'Magento_Checkout/js/model/quote',\r\n        'Magento_Checkout/js/model/payment/additional-validators',\r\n        'mage/url',\r\n        'mage/translate'\r\n    ],\r\n    function (\r\n        Component,\r\n        ko,\r\n        _,\r\n        $,\r\n        braintree,\r\n        lpm,\r\n        formBuilder,\r\n        messageList,\r\n        selectBillingAddress,\r\n        removeNonDigitCharacters,\r\n        fullScreenLoader,\r\n        quote,\r\n        additionalValidators,\r\n        url,\r\n        $t\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                code: 'braintree_local_payment',\r\n                paymentMethodsAvailable: ko.observable(false),\r\n                paymentMethodNonce: null,\r\n                template: 'PayPal_Braintree/payment/lpm'\r\n            },\r\n\r\n            clickPaymentBtn: function (method) {\r\n                let self = this;\r\n\r\n                if (additionalValidators.validate()) {\r\n                    fullScreenLoader.startLoader();\r\n\r\n                    braintree.create({\r\n                        authorization: self.getClientToken()\r\n                    }, function (clientError, clientInstance) {\r\n                        if (clientError) {\r\n                            self.setErrorMsg($t('Unable to initialize Braintree Client.'));\r\n                            fullScreenLoader.stopLoader();\r\n                            return;\r\n                        }\r\n\r\n                        lpm.create({\r\n                            client: clientInstance,\r\n                            merchantAccountId: self.getMerchantAccountId()\r\n                        }, function (lpmError, lpmInstance) {\r\n                            if (lpmError) {\r\n                                self.setErrorMsg(lpmError);\r\n                                fullScreenLoader.stopLoader();\r\n                                return;\r\n                            }\r\n\r\n                            lpmInstance.startPayment({\r\n                                amount: self.getAmount(),\r\n                                currencyCode: self.getCurrencyCode(),\r\n                                email: self.getCustomerDetails().email,\r\n                                phone: removeNonDigitCharacters(_.get(self.getCustomerDetails(), 'phone', '')),\r\n                                givenName: self.getCustomerDetails().firstName,\r\n                                surname: self.getCustomerDetails().lastName,\r\n                                shippingAddressRequired: !quote.isVirtual(),\r\n                                address: self.getAddress(),\r\n                                paymentType: method,\r\n                                onPaymentStart: function (data, start) {\r\n                                    start();\r\n                                },\r\n                                // This is a required option, however it will apparently never be used in the current\r\n                                // payment flow. Therefore, both values are set to allow the payment flow to continue,\r\n                                // rather than error out.\r\n                                fallback: {\r\n                                    url: self.getFallbackUrl(),\r\n                                    buttonText: self.getFallbackButtonText()\r\n                                }\r\n                            }, function (startPaymentError, payload) {\r\n                                fullScreenLoader.stopLoader();\r\n                                if (startPaymentError) {\r\n                                    switch (startPaymentError.code) {\r\n                                    case 'LOCAL_PAYMENT_POPUP_CLOSED':\r\n                                        self.setErrorMsg($t('Local Payment popup was closed unexpectedly.'));\r\n                                        break;\r\n                                    case 'LOCAL_PAYMENT_WINDOW_OPEN_FAILED':\r\n                                        self.setErrorMsg($t('Local Payment popup failed to open.'));\r\n                                        break;\r\n                                    case 'LOCAL_PAYMENT_WINDOW_CLOSED':\r\n                                        self.setErrorMsg($t('Local Payment popup was closed. Payment cancelled.'));\r\n                                        break;\r\n                                    default:\r\n                                        self.setErrorMsg('Error! ' + startPaymentError);\r\n                                        break;\r\n                                    }\r\n                                } else {\r\n                                    // Send the nonce to your server to create a transaction\r\n                                    self.setPaymentMethodNonce(payload.nonce);\r\n                                    self.placeOrder();\r\n                                }\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            },\r\n\r\n            getAddress: function () {\r\n                let shippingAddress = quote.shippingAddress();\r\n\r\n                if (quote.isVirtual()) {\r\n                    return {\r\n                        countryCode: shippingAddress.countryId\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    streetAddress: shippingAddress.street[0],\r\n                    extendedAddress: shippingAddress.street[1],\r\n                    locality: shippingAddress.city,\r\n                    postalCode: shippingAddress.postcode,\r\n                    region: shippingAddress.region,\r\n                    countryCode: shippingAddress.countryId\r\n                };\r\n            },\r\n\r\n            getAmount: function () {\r\n                return quote.totals()['base_grand_total'].toString();\r\n            },\r\n\r\n            getBillingAddress: function () {\r\n                return quote.billingAddress();\r\n            },\r\n\r\n            getClientToken: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n            },\r\n\r\n            getCode: function () {\r\n                return this.code;\r\n            },\r\n\r\n            getCurrencyCode: function () {\r\n                return quote.totals()['base_currency_code'];\r\n            },\r\n\r\n            getCustomerDetails: function () {\r\n                let billingAddress = quote.billingAddress();\r\n\r\n                return {\r\n                    firstName: billingAddress.firstname,\r\n                    lastName: billingAddress.lastname,\r\n                    phone: billingAddress.telephone !== null ? billingAddress.telephone : '',\r\n                    email: typeof quote.guestEmail === 'string'\r\n                        ? quote.guestEmail : window.checkoutConfig.customerData.email\r\n                };\r\n            },\r\n\r\n            getData: function () {\r\n                let data = {\r\n                    'method': this.getCode(),\r\n                    'additional_data': {\r\n                        'payment_method_nonce': this.paymentMethodNonce\r\n                    }\r\n                };\r\n\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n                return data;\r\n            },\r\n\r\n            getMerchantAccountId: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].merchantAccountId;\r\n            },\r\n\r\n            getPaymentMethod: function (method) {\r\n                let methods = this.getPaymentMethods();\r\n\r\n                for (let i = 0; i < methods.length; i++) {\r\n                    if (methods[i].method === method) {\r\n                        return methods[i];\r\n                    }\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Get allowed local payment methods\r\n             *\r\n             * @returns {*}\r\n             */\r\n            getPaymentMethods: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].allowedMethods;\r\n            },\r\n\r\n            /**\r\n             * Get payment icons\r\n             *\r\n             * @returns {*}\r\n             */\r\n            getPaymentMarkSrc: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].paymentIcons;\r\n            },\r\n\r\n            /**\r\n             * Get title\r\n             *\r\n             * @returns {*}\r\n             */\r\n            getTitle: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].title;\r\n            },\r\n\r\n            /**\r\n             * Get fallback url\r\n             *\r\n             * @returns {String}\r\n             */\r\n            getFallbackUrl: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].fallbackUrl;\r\n            },\r\n\r\n            /**\r\n             * Get fallback button text\r\n             * @returns {String}\r\n             */\r\n            getFallbackButtonText: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].fallbackButtonText;\r\n            },\r\n\r\n            /**\r\n             * Initialize\r\n             *\r\n             * @returns {*}\r\n             */\r\n            initialize: function () {\r\n                this._super();\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Is payment method active?\r\n             *\r\n             * @returns {boolean}\r\n             */\r\n            isActive: function () {\r\n                let address = quote.billingAddress() || quote.shippingAddress(),\r\n                    methods = this.getPaymentMethods();\r\n\r\n                for (let i = 0; i < methods.length; i++) {\r\n                    if (methods[i].countries.includes(address.countryId)) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n\r\n            /**\r\n             * Is country and currency valid?\r\n             *\r\n             * @param method\r\n             * @returns {boolean}\r\n             */\r\n            isValidCountryAndCurrency: function (method) {\r\n                let address = quote.billingAddress(),\r\n                    countryId = address.countryId,\r\n                    quoteCurrency = quote.totals()['base_currency_code'],\r\n                    paymentMethodDetails = this.getPaymentMethod(method);\r\n\r\n                if (!address) {\r\n                    this.paymentMethodsAvailable(false);\r\n                    return false;\r\n                }\r\n\r\n                if (countryId !== 'GB' && paymentMethodDetails.countries.includes(countryId)\r\n                    && (quoteCurrency === 'EUR' || quoteCurrency === 'PLN') || countryId === 'GB'\r\n                    && paymentMethodDetails.countries.includes(countryId) && quoteCurrency === 'GBP') {\r\n                    this.paymentMethodsAvailable(true);\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n\r\n            /**\r\n             * Set error message\r\n             *\r\n             * @param message\r\n             */\r\n            setErrorMsg: function (message) {\r\n                messageList.addErrorMessage({\r\n                    message: message\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Set payment method nonce\r\n             *\r\n             * @param nonce\r\n             */\r\n            setPaymentMethodNonce: function (nonce) {\r\n                this.paymentMethodNonce = nonce;\r\n            },\r\n\r\n            /**\r\n             * Validate form\r\n             *\r\n             * @param form\r\n             * @returns {*|jQuery}\r\n             */\r\n            validateForm: function (form) {\r\n                return $(form).validation() && $(form).validation('isValid');\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/paypal-customer-vault.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/translate',\r\n    'braintree',\r\n    'braintreeDataCollector',\r\n    'braintreePayPalCheckout',\r\n    'PayPal_Braintree/js/helper/format-amount',\r\n    'PayPal_Braintree/js/helper/remove-non-digit-characters',\r\n    'PayPal_Braintree/js/helper/replace-unsupported-characters',\r\n    'Magento_Checkout/js/action/create-billing-address',\r\n    'Magento_Checkout/js/action/select-billing-address',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_CheckoutAgreements/js/view/checkout-agreements',\r\n    'Magento_Vault/js/view/payment/method-renderer/vault',\r\n    'Magento_Ui/js/model/messageList'\r\n], function (\r\n    $,\r\n    _,\r\n    $t,\r\n    client,\r\n    dataCollector,\r\n    paypalCheckout,\r\n    formatAmount,\r\n    removeNonDigitCharacters,\r\n    replaceUnsupportedCharacters,\r\n    createBillingAddress,\r\n    selectBillingAddress,\r\n    fullScreenLoader,\r\n    quote,\r\n    additionalValidators,\r\n    checkoutAgreements,\r\n    VaultComponent,\r\n    globalMessageList\r\n) {\r\n    'use strict';\r\n\r\n    return VaultComponent.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/paypal/customer-vault',\r\n\r\n            /**\r\n             * Component config set via provider.\r\n             */\r\n            code: null,\r\n            nonceUrl: null,\r\n            publicHash: null,\r\n            clientToken: null,\r\n            clientInstance: null,\r\n            checkout: null,\r\n            details: {},\r\n\r\n            /**\r\n             * {Object}\r\n             */\r\n            events: {\r\n                onClick: null,\r\n                onCancel: null,\r\n                onError: null,\r\n                onRender: null\r\n            },\r\n\r\n            /**\r\n             * Additional payment data\r\n             *\r\n             * {Object}\r\n             */\r\n            additionalData: {},\r\n\r\n            /**\r\n             * Placeholders for PayPal instance vaulted payment.\r\n             */\r\n            paypalInstance: null,\r\n            paymentMethodNonce: null,\r\n            grandTotalAmount: null,\r\n            isReviewRequired: false,\r\n            customerEmail: null,\r\n\r\n            /**\r\n             * {Array}\r\n             */\r\n            lineItemsArray: [\r\n                'name',\r\n                'kind',\r\n                'quantity',\r\n                'unitAmount',\r\n                'productCode',\r\n                'description'\r\n            ],\r\n\r\n            /**\r\n             * PayPal client configuration\r\n             *\r\n             * {Object}\r\n             */\r\n            clientConfig: {\r\n                dataCollector: {\r\n                    paypal: true\r\n                },\r\n\r\n                /**\r\n                 * Triggers when widget is loaded\r\n                 */\r\n                onReady: function () {\r\n                    this.setupPayPal();\r\n                },\r\n\r\n                /**\r\n                 * Triggers on payment nonce receive\r\n                 * @param {Object} response\r\n                 */\r\n                onPaymentMethodReceived: function (response) {\r\n                    this.beforePlaceOrder(response);\r\n                }\r\n            },\r\n\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         *\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            let self = this;\r\n\r\n            this._super().observe(['active', 'isReviewRequired', 'customerEmail']);\r\n\r\n            window.addEventListener('hashchange', function (e) {\r\n                let methodCode = quote.paymentMethod();\r\n\r\n                if (methodCode && methodCode.method === self.getId()) {\r\n                    if (e.newURL.indexOf('payment') > 0 && self.grandTotalAmount !== null) {\r\n                        self.reInitPayPalVault();\r\n                    }\r\n                }\r\n            });\r\n\r\n            quote.paymentMethod.subscribe(function (value) {\r\n                if (value.method && value.method === self.getId()) {\r\n                    self.reInitPayPalVault();\r\n                }\r\n            });\r\n\r\n            self.grandTotalAmount = quote.totals()['base_grand_total'];\r\n\r\n            quote.totals.subscribe(function () {\r\n                if (self.grandTotalAmount !== quote.totals()['base_grand_total']) {\r\n                    self.grandTotalAmount = quote.totals()['base_grand_total'];\r\n                    let methodCode = quote.paymentMethod();\r\n\r\n                    if (methodCode && methodCode.method === self.getId()) {\r\n                        self.reInitPayPalVault();\r\n                    }\r\n                }\r\n            });\r\n\r\n            self.isReviewRequired(false);\r\n            self.initClientConfig();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggers when payment method change\r\n         *\r\n         * @param {Boolean} isActive\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            if (!isActive) {\r\n                return;\r\n            }\r\n\r\n            // need always re-init Braintree with PayPal configuration\r\n            this.reInitPayPalVault();\r\n        },\r\n\r\n        /**\r\n         * Init config\r\n         */\r\n        initClientConfig: function () {\r\n            this.clientConfig = _.extend(this.clientConfig, this.getPayPalConfig());\r\n\r\n            _.each(this.clientConfig, function (fn, name) {\r\n                if (typeof fn === 'function') {\r\n                    this.clientConfig[name] = fn.bind(this);\r\n                }\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Get configuration for PayPal\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getPayPalConfig: function () {\r\n            let totals = quote.totals(),\r\n                config = {};\r\n\r\n            config.paypal = {\r\n                flow: 'checkout',\r\n                amount: formatAmount(this.grandTotalAmount),\r\n                currency: totals['base_currency_code'],\r\n                locale: this.getLocale(),\r\n\r\n                /**\r\n                 * Triggers on any Braintree error\r\n                 */\r\n                onError: function () {\r\n                    this.paymentMethodNonce = null;\r\n                },\r\n\r\n                /**\r\n                 * Triggers if browser doesn't support PayPal Checkout\r\n                 */\r\n                onUnsupported: function () {\r\n                    this.paymentMethodNonce = null;\r\n                }\r\n            };\r\n\r\n            if (!quote.isVirtual()) {\r\n                config.paypal.enableShippingAddress = true;\r\n                config.paypal.shippingAddressEditable = false;\r\n                config.paypal.shippingAddressOverride = this.getShippingAddress();\r\n            }\r\n\r\n            if (this.getMerchantName()) {\r\n                config.paypal.displayName = this.getMerchantName();\r\n            }\r\n\r\n            return config;\r\n        },\r\n\r\n        /**\r\n         * Re-init PayPal Vault Auth Flow\r\n         */\r\n        reInitPayPalVault: function () {\r\n            this.disableButton();\r\n            this.clientConfig.paypal.amount = formatAmount(this.grandTotalAmount);\r\n\r\n            if (!quote.isVirtual()) {\r\n                this.clientConfig.paypal.enableShippingAddress = true;\r\n                this.clientConfig.paypal.shippingAddressEditable = false;\r\n                this.clientConfig.paypal.shippingAddressOverride = this.getShippingAddress();\r\n            }\r\n\r\n            // Send Line Items\r\n            this.clientConfig.paypal.lineItems = this.getLineItems();\r\n\r\n            if (this.getPayPalInstance()) {\r\n                this.getPayPalInstance().teardown(function () {\r\n                    this.setPayPalInstance(null);\r\n                    this.createClientInstance(null);\r\n                }.bind(this));\r\n            } else {\r\n                this.createClientInstance(null);\r\n                this.enableButton();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the current Braintree client instance.\r\n         *\r\n         * Null if not set.\r\n         *\r\n         * @return {*|null}\r\n         */\r\n        getClientInstance: function () {\r\n            if (typeof this.clientInstance !== 'undefined' && this.clientInstance) {\r\n                return this.clientInstance;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * Set the Braintree client instance or null it.\r\n         *\r\n         * @param val\r\n         */\r\n        setClientInstance: function (val) {\r\n            this.clientInstance = val;\r\n        },\r\n\r\n        /**\r\n         * Get the PayPal instance if already instantiated, otherwise null.\r\n         *\r\n         * @return {*|null}\r\n         */\r\n        getPayPalInstance: function () {\r\n            if (typeof this.paypalInstance !== 'undefined' && this.paypalInstance) {\r\n                return this.paypalInstance;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * Set the PayPal instance or null it by setting the value of the property.\r\n         *\r\n         * @param val\r\n         */\r\n        setPayPalInstance: function (val) {\r\n            this.paypalInstance = val;\r\n        },\r\n\r\n        /**\r\n         * Create the Braintree client instance.\r\n         *\r\n         * @param {Function|null} callback\r\n         */\r\n        createClientInstance: function (callback = null) {\r\n            if (this.getClientToken() === null) {\r\n                this.showError($t('Sorry, but something went wrong.'));\r\n                return;\r\n            }\r\n\r\n            if (this.getClientInstance()) {\r\n                if (typeof this.clientConfig.onReady === 'function') {\r\n                    this.clientConfig.onReady(this);\r\n                }\r\n\r\n                if (typeof callback === 'function') {\r\n                    callback(this.clientInstance);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            client.create({\r\n                authorization: this.getClientToken()\r\n            }, function (clientErr, clientInstance) {\r\n                if (clientErr) {\r\n                    console.error('Braintree Setup Error', clientErr);\r\n                    return this.showError('Sorry, but something went wrong. Please contact the store owner.');\r\n                }\r\n\r\n                let options = {\r\n                    client: clientInstance\r\n                };\r\n\r\n                if (typeof this.clientConfig.dataCollector === 'object'\r\n                    && typeof this.clientConfig.dataCollector.paypal === 'boolean')\r\n                {\r\n                    options.paypal = true;\r\n                }\r\n\r\n                dataCollector.create(options, function (err, dataCollectorInstance) {\r\n                    if (err) {\r\n                        return console.log(err);\r\n                    }\r\n                    this.additionalData['device_data'] = dataCollectorInstance.deviceData;\r\n                }.bind(this));\r\n\r\n                this.setClientInstance(clientInstance);\r\n\r\n                if (typeof this.clientConfig.onReady === 'function') {\r\n                    this.clientConfig.onReady(this);\r\n                }\r\n\r\n                if (typeof callback === 'function') {\r\n                    callback(this.getClientInstance());\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Get Environment\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getEnvironment: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal'].environment;\r\n        },\r\n\r\n        /**\r\n         * Setup PayPal instance\r\n         */\r\n        setupPayPal: function () {\r\n            if (this.getPayPalInstance()) {\r\n                fullScreenLoader.stopLoader(true);\r\n                return;\r\n            }\r\n\r\n            paypalCheckout.create({\r\n                autoSetDataUserIdToken: true,\r\n                client: this.getClientInstance()\r\n            }, function (createErr, paypalCheckoutInstance) {\r\n                if (createErr) {\r\n                    this.showError(\r\n                        $t('PayPal Checkout could not be initialized. Please contact the store owner.')\r\n                    );\r\n                    console.error('paypalCheckout error', createErr);\r\n                    return;\r\n                }\r\n\r\n                let quoteObj = quote.totals(),\r\n\r\n                    configSDK = {\r\n                        components: 'buttons,messages,funding-eligibility',\r\n                        'enable-funding': 'paylater',\r\n                        currency: quoteObj['base_currency_code']\r\n                    },\r\n\r\n                    buyerCountry = this.getMerchantCountry();\r\n\r\n                if (this.getEnvironment() === 'sandbox' && buyerCountry !== null) {\r\n                    configSDK['buyer-country'] = buyerCountry;\r\n                }\r\n\r\n                paypalCheckoutInstance.loadPayPalSDK(configSDK, function () {\r\n                    this.loadPayPalButton(paypalCheckoutInstance, 'paypal');\r\n\r\n                    if (this.isPayLaterEnabled()) {\r\n                        this.loadPayPalButton(paypalCheckoutInstance, 'paylater');\r\n                    }\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Load PayPal buttons\r\n         *\r\n         * @param paypalCheckoutInstance\r\n         * @param funding\r\n         */\r\n        loadPayPalButton: function (paypalCheckoutInstance, funding) {\r\n            let paypalPayment = this.clientConfig.paypal,\r\n                onPaymentMethodReceived = this.clientConfig.onPaymentMethodReceived,\r\n\r\n                style = {\r\n                    label: this.getLabelByFunding(funding),\r\n                    color: this.getColorByFunding(funding),\r\n                    shape: this.getShapeByFunding(funding)\r\n                },\r\n\r\n                payPalButtonId = this.getButtonIdByFunding(funding),\r\n                payPalButtonElement = $('#' + payPalButtonId),\r\n                button,\r\n                events = this.events;\r\n\r\n            payPalButtonElement.html('');\r\n\r\n            // Render\r\n            this.setPayPalInstance(paypalCheckoutInstance);\r\n\r\n            button = window.paypal.Buttons({\r\n                fundingSource: funding,\r\n                env: this.getEnvironment(),\r\n                style: style,\r\n                commit: true,\r\n                locale: this.clientConfig.paypal.locale,\r\n\r\n                onInit: function (data, actions) {\r\n                    let agreements = checkoutAgreements().agreements,\r\n                        shouldDisableActions = false;\r\n\r\n                    actions.disable();\r\n\r\n                    _.each(agreements, function (item) {\r\n                        if (checkoutAgreements().isAgreementRequired(item)) {\r\n                            let paymentMethodCode = quote.paymentMethod().method,\r\n                                inputId = '#agreement_' + paymentMethodCode + '_' + item.agreementId,\r\n                                inputEl = document.querySelector(inputId);\r\n\r\n                            if (!inputEl.checked) {\r\n                                shouldDisableActions = true;\r\n                            }\r\n\r\n                            inputEl.addEventListener('change', function () {\r\n                                if (additionalValidators.validate(false)) {\r\n                                    actions.enable();\r\n                                } else {\r\n                                    actions.disable();\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    if (!shouldDisableActions) {\r\n                        actions.enable();\r\n                    }\r\n                },\r\n\r\n                createOrder: function () {\r\n                    return paypalCheckoutInstance.createPayment(paypalPayment).catch(function (err) {\r\n                        throw err.details.originalError.details.originalError.paymentResource;\r\n                    });\r\n                },\r\n\r\n                onCancel: function (data) {\r\n                    console.log('checkout.js payment cancelled', JSON.stringify(data, 0, 2));\r\n\r\n                    if (typeof events.onCancel === 'function') {\r\n                        events.onCancel();\r\n                    }\r\n                },\r\n\r\n                onError: function (err) {\r\n                    if (err.errorName === 'VALIDATION_ERROR'\r\n                        && err.errorMessage.indexOf('Value is invalid') !== -1\r\n                    ) {\r\n                        this.showError(\r\n                            $t('Address failed validation. Please check and confirm your City, State, and Postal Code')\r\n                        );\r\n                    } else {\r\n                        this.showError($t('PayPal Checkout could not be initialized. Please contact the store owner.'));\r\n                    }\r\n\r\n                    this.setPayPalInstance(null);\r\n                    console.error('Paypal checkout.js error', err);\r\n\r\n                    if (typeof events.onError === 'function') {\r\n                        events.onError(err);\r\n                    }\r\n                }.bind(this),\r\n\r\n                onClick: function (data) {\r\n                    if (!quote.isVirtual()) {\r\n                        this.clientConfig.paypal.enableShippingAddress = true;\r\n                        this.clientConfig.paypal.shippingAddressEditable = false;\r\n                        this.clientConfig.paypal.shippingAddressOverride = this.getShippingAddress();\r\n                    }\r\n\r\n                    // To check term & conditions input checked - validate additional validators.\r\n                    if (!additionalValidators.validate(false)) {\r\n                        return false;\r\n                    }\r\n\r\n                    if (typeof events.onClick === 'function') {\r\n                        events.onClick(data);\r\n                    }\r\n                }.bind(this),\r\n\r\n                onApprove: function (data) {\r\n                    return paypalCheckoutInstance.tokenizePayment(data)\r\n                        .then(function (payload) {\r\n                            onPaymentMethodReceived(payload);\r\n                        });\r\n                }\r\n\r\n            });\r\n\r\n            if (button.isEligible() && payPalButtonElement.length) {\r\n                button.render('#' + payPalButtonId).then(function () {\r\n                    this.enableButton();\r\n\r\n                    if (typeof this.clientConfig.onPaymentMethodError === 'function') {\r\n                        this.clientConfig.onPaymentMethodError();\r\n                    }\r\n                }.bind(this)).then(function (data) {\r\n                    if (typeof events.onRender === 'function') {\r\n                        events.onRender(data);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prepare data to place order\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        beforePlaceOrder: function (data) {\r\n            this.setPaymentMethodNonce(data.nonce);\r\n            this.customerEmail(data.details.email);\r\n            if (quote.isVirtual()) {\r\n                this.isReviewRequired(true);\r\n            } else if (this.isRequiredBillingAddress() === '1' || quote.billingAddress() === null) {\r\n                if (typeof data.details.billingAddress !== 'undefined') {\r\n                    this.setBillingAddress(data.details, data.details.billingAddress);\r\n                } else {\r\n                    this.setBillingAddress(data.details, data.details.shippingAddress);\r\n                }\r\n            } else if (quote.shippingAddress() === quote.billingAddress()) {\r\n                selectBillingAddress(quote.shippingAddress());\r\n            } else {\r\n                selectBillingAddress(quote.billingAddress());\r\n            }\r\n            this.placeOrder();\r\n        },\r\n\r\n        /**\r\n         * Get the component's client token.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getClientToken: function () {\r\n            return this.clientToken;\r\n        },\r\n\r\n        /**\r\n         * Get merchant country\r\n         *\r\n         * @returns {*}\r\n         */\r\n        getMerchantCountry: function () {\r\n            return _.get(window.checkoutConfig.payment, ['braintree_paypal', 'merchantCountry'], null);\r\n        },\r\n\r\n        /**\r\n         * Get PayPal payer email\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getPayerEmail: function () {\r\n            return this.details.payerEmail;\r\n        },\r\n\r\n        /**\r\n         * Get type of payment\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getPaymentIcon: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal'].paymentIcon;\r\n        },\r\n\r\n        /**\r\n         * Get merchant name\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getMerchantName: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal'].merchantName;\r\n        },\r\n\r\n        /**\r\n         * Get payment method data\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            let data = {\r\n                'method': this.code,\r\n                'additional_data': {\r\n                    'public_hash': this.publicHash,\r\n                    'payment_method_nonce': this.paymentMethodNonce\r\n                }\r\n            };\r\n\r\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Set payment nonce.\r\n         *\r\n         * @param {String} paymentMethodNonce\r\n         */\r\n        setPaymentMethodNonce: function (paymentMethodNonce) {\r\n            this.paymentMethodNonce = paymentMethodNonce;\r\n        },\r\n\r\n        /**\r\n         * Get shipping address\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getShippingAddress: function () {\r\n            let address = quote.shippingAddress();\r\n\r\n            return {\r\n                recipientName: address.firstname + ' ' + address.lastname,\r\n                line1: address.street[0],\r\n                line2: typeof address.street[2] === 'undefined'\r\n                    ? address.street[1]\r\n                    : address.street[1] + ' ' + address.street[2],\r\n                city: address.city,\r\n                countryCode: address.countryId,\r\n                postalCode: address.postcode,\r\n                state: address.regionCode\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Update quote billing address\r\n         *\r\n         * @param {Object}customer\r\n         * @param {Object}address\r\n         */\r\n        setBillingAddress: function (customer, address) {\r\n            let billingAddress = {\r\n                street: [address.line1],\r\n                city: address.city,\r\n                postcode: address.postalCode,\r\n                countryId: address.countryCode,\r\n                email: customer.email,\r\n                firstname: customer.firstName,\r\n                lastname: customer.lastName,\r\n                telephone: removeNonDigitCharacters(_.get(customer, 'phone', '00000000000'))\r\n            };\r\n\r\n            billingAddress['region_code'] = typeof address.state === 'string' ? address.state : '';\r\n            billingAddress = createBillingAddress(billingAddress);\r\n            quote.billingAddress(billingAddress);\r\n        },\r\n\r\n        /**\r\n         * Disable submit button\r\n         */\r\n        disableButton: function () {\r\n            // stop any previous shown loaders\r\n            fullScreenLoader.stopLoader(true);\r\n            fullScreenLoader.startLoader();\r\n            $('[data-button=\"place\"]').attr('disabled', 'disabled');\r\n        },\r\n\r\n        /**\r\n         * Enable submit button\r\n         */\r\n        enableButton: function () {\r\n            $('[data-button=\"place\"]').removeAttr('disabled');\r\n            fullScreenLoader.stopLoader(true);\r\n        },\r\n\r\n        /**\r\n         * Triggers when customer click \"Continue to PayPal\" button\r\n         */\r\n        payWithPayPal: function () {\r\n            if (additionalValidators.validate(false)) {\r\n                this.checkout.paypal.initAuthFlow();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get a kebab case formatted string of the component ID (normally with `_`).\r\n         *\r\n         * @return {String|null}\r\n         */\r\n        getKebabCaseId: function () {\r\n            if (this.getId() === null) {\r\n                return null;\r\n            }\r\n\r\n            return this.getId().replace('_', '-');\r\n        },\r\n\r\n        /**\r\n         * Get the PayPal button placeholder id.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getPayPalButtonId: function () {\r\n            return this.getId() + '_placeholder';\r\n        },\r\n\r\n        /**\r\n         * Get PayPal Pay Later button placeholder id.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getPayLaterButtonId: function () {\r\n            return this.getId() + '_paylater_placeholder';\r\n        },\r\n\r\n        /**\r\n         * Check if Pay Later enabled.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        isPayLaterEnabled: function () {\r\n            return _.get(window.checkoutConfig.payment, ['braintree_paypal_paylater', 'isActive'], false);\r\n        },\r\n\r\n        /**\r\n         * Check if Pay Later messaging enabled.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        isPayLaterMessageEnabled: function () {\r\n            return _.get(window.checkoutConfig.payment, ['braintree_paypal_paylater', 'isMessageActive'], false);\r\n        },\r\n\r\n        /**\r\n         * Get the formatted grand total.\r\n         *\r\n         * @return {string}\r\n         */\r\n        getGrandTotalAmount: function () {\r\n            return formatAmount(this.grandTotalAmount);\r\n        },\r\n\r\n        /**\r\n         * Get locale\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getLocale: function () {\r\n            return _.get(window.checkoutConfig.payment, ['braintree_paypal', 'locale'], '');\r\n        },\r\n\r\n        /**\r\n         * Get PayPal Pay Later Message Layout.\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getMessagingLayout: function () {\r\n            return _.get(window.checkoutConfig.payment, ['braintree_paypal_paylater', 'message', 'layout'], '');\r\n        },\r\n\r\n        /**\r\n         * Get PayPal Pay Later Message Logo.\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getMessagingLogo: function () {\r\n            return _.get(window.checkoutConfig.payment, ['braintree_paypal_paylater', 'message', 'logo'], '');\r\n        },\r\n\r\n        /**\r\n         * Get PayPal Pay Later Message Logo position.\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getMessagingLogoPosition: function () {\r\n            return _.get(window.checkoutConfig.payment, ['braintree_paypal_paylater', 'message', 'logo_position'], '');\r\n        },\r\n\r\n        /**\r\n         * Get PayPal Pay Later Message Text Color.\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getMessagingTextColor: function () {\r\n            return _.get(window.checkoutConfig.payment, ['braintree_paypal_paylater', 'message', 'text_color'], '');\r\n        },\r\n\r\n        /**\r\n         * Is Billing Address required from PayPal side.\r\n         *\r\n         * @returns {exports.isRequiredBillingAddress|(function())|boolean|String}\r\n         */\r\n        isRequiredBillingAddress: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal'].isRequiredBillingAddress;\r\n        },\r\n\r\n        /**\r\n         * Show error message\r\n         *\r\n         * @param {String} errorMessage\r\n         */\r\n        showError: function (errorMessage) {\r\n            globalMessageList.addErrorMessage({\r\n                message: errorMessage\r\n            });\r\n            fullScreenLoader.stopLoader(true);\r\n        },\r\n\r\n        /**\r\n         * Get line items\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getLineItems: function () {\r\n            let self = this,\r\n                lineItems = [];\r\n\r\n            if (this.canSendLineItems()) {\r\n                let giftWrappingItems = 0,\r\n                    giftWrappingOrder = 0,\r\n                    storeCredit = 0,\r\n                    giftCardAccount = 0,\r\n                    giftWrappingPrintedCard = 0,\r\n                    baseDiscountAmount,\r\n                    baseTaxAmount;\r\n\r\n                $.each(quote.totals()['total_segments'], function (segmentsKey, segmentsItem) {\r\n                    if (segmentsItem['code'] === 'customerbalance') {\r\n                        storeCredit = formatAmount(Math.abs(segmentsItem['value']).toString());\r\n                    }\r\n                    if (segmentsItem['code'] === 'giftcardaccount') {\r\n                        giftCardAccount = formatAmount(Math.abs(segmentsItem['value']).toString());\r\n                    }\r\n                    if (segmentsItem['code'] === 'giftwrapping') {\r\n                        let extensionAttributes = segmentsItem['extension_attributes'];\r\n\r\n                        giftWrappingOrder = extensionAttributes['gw_base_price'];\r\n                        giftWrappingItems = extensionAttributes['gw_items_base_price'];\r\n                        giftWrappingPrintedCard = extensionAttributes['gw_card_base_price'];\r\n                    }\r\n                });\r\n\r\n                $.each(quote.getItems(), function (quoteItemKey, quoteItem) {\r\n                    if (quoteItem.parent_item_id !== null || quoteItem.price === 0.0) {\r\n                        return true;\r\n                    }\r\n\r\n                    let itemName = replaceUnsupportedCharacters(quoteItem.name),\r\n                        itemSku = replaceUnsupportedCharacters(quoteItem.sku),\r\n\r\n                        description = '',\r\n                        itemQty = parseFloat(quoteItem.qty),\r\n                        itemUnitAmount = parseFloat(quoteItem.price),\r\n                        lineItemValues,\r\n                        mappedLineItems;\r\n\r\n                    if (itemQty > Math.floor(itemQty) && itemQty < Math.ceil(itemQty)) {\r\n                        description = 'Item quantity is ' + itemQty.toFixed(2)\r\n                            + ' and per unit amount is ' + itemUnitAmount.toFixed(2);\r\n                        itemUnitAmount = parseFloat(itemQty * itemUnitAmount);\r\n                        itemQty = parseFloat('1');\r\n                    }\r\n\r\n                    lineItemValues = [\r\n                        itemName,\r\n                        'debit',\r\n                        itemQty.toFixed(2),\r\n                        itemUnitAmount.toFixed(2),\r\n                        itemSku,\r\n                        description\r\n                    ],\r\n\r\n                    mappedLineItems = $.map(self.lineItemsArray, function (itemElement, itemIndex) {\r\n                        return [[\r\n                            self.lineItemsArray[itemIndex],\r\n                            lineItemValues[itemIndex]\r\n                        ]];\r\n                    });\r\n\r\n                    lineItems[quoteItemKey] = Object.fromEntries(mappedLineItems);\r\n                });\r\n\r\n                /**\r\n                 * Adds credit (refund or discount) kind as LineItems for the\r\n                 * PayPal transaction if discount amount is greater than 0(Zero)\r\n                 * as discountAmount lineItem field is not being used by PayPal.\r\n                 *\r\n                 * developer.paypal.com/braintree/docs/reference/response/transaction-line-item/php#discount_amount\r\n                 */\r\n                baseDiscountAmount = formatAmount(Math.abs(quote.totals()['base_discount_amount']).toString());\r\n\r\n                if (baseDiscountAmount > 0) {\r\n                    let discountLineItem = {\r\n                        'name': 'Discount',\r\n                        'kind': 'credit',\r\n                        'quantity': 1.00,\r\n                        'unitAmount': baseDiscountAmount\r\n                    };\r\n\r\n                    lineItems = $.merge(lineItems, [discountLineItem]);\r\n                }\r\n\r\n                /**\r\n                 * Adds shipping as LineItems for the PayPal transaction\r\n                 * if shipping amount is greater than 0(Zero) to manage\r\n                 * the totals with client-side implementation as there is\r\n                 * no any field exist in the client-side implementation\r\n                 * to send the shipping amount to the Braintree.\r\n                 */\r\n                if (quote.totals()['base_shipping_amount'] > 0) {\r\n                    let shippingLineItem = {\r\n                        'name': 'Shipping',\r\n                        'kind': 'debit',\r\n                        'quantity': 1.00,\r\n                        'unitAmount': quote.totals()['base_shipping_amount']\r\n                    };\r\n\r\n                    lineItems = $.merge(lineItems, [shippingLineItem]);\r\n                }\r\n\r\n                baseTaxAmount = formatAmount(quote.totals()['base_tax_amount']);\r\n\r\n                if (baseTaxAmount > 0) {\r\n                    let taxLineItem = {\r\n                        'name': 'Tax',\r\n                        'kind': 'debit',\r\n                        'quantity': 1.00,\r\n                        'unitAmount': baseTaxAmount\r\n                    };\r\n\r\n                    lineItems = $.merge(lineItems, [taxLineItem]);\r\n                }\r\n\r\n                /**\r\n                 * Adds credit (Store Credit) kind as LineItems for the\r\n                 * PayPal transaction if store credit is greater than 0(Zero)\r\n                 * to manage the totals with client-side implementation\r\n                 */\r\n                if (storeCredit > 0) {\r\n                    let storeCreditItem = {\r\n                        'name': 'Store Credit',\r\n                        'kind': 'credit',\r\n                        'quantity': 1.00,\r\n                        'unitAmount': storeCredit\r\n                    };\r\n\r\n                    lineItems = $.merge(lineItems, [storeCreditItem]);\r\n                }\r\n\r\n                /**\r\n                 * Adds Gift Wrapping for items as LineItems for the PayPal\r\n                 * transaction if it is greater than 0(Zero) to manage\r\n                 * the totals with client-side implementation\r\n                 */\r\n                if (giftWrappingItems > 0) {\r\n                    let gwItems = {\r\n                        'name': 'Gift Wrapping for Items',\r\n                        'kind': 'debit',\r\n                        'quantity': 1.00,\r\n                        'unitAmount': giftWrappingItems\r\n                    };\r\n\r\n                    lineItems = $.merge(lineItems, [gwItems]);\r\n                }\r\n\r\n                /**\r\n                 * Adds Gift Wrapping for order as LineItems for the PayPal\r\n                 * transaction if it is greater than 0(Zero) to manage\r\n                 * the totals with client-side implementation\r\n                 */\r\n                if (giftWrappingOrder > 0) {\r\n                    let gwOrderItem = {\r\n                        'name': 'Gift Wrapping for Order',\r\n                        'kind': 'debit',\r\n                        'quantity': 1.00,\r\n                        'unitAmount': giftWrappingOrder\r\n                    };\r\n\r\n                    lineItems = $.merge(lineItems, [gwOrderItem]);\r\n                }\r\n\r\n                /**\r\n                 * Adds Gift Wrapping Printed Card as LineItems for the PayPal\r\n                 * transaction if it is greater than 0(Zero) to manage\r\n                 * the totals with client-side implementation\r\n                 */\r\n                if (giftWrappingPrintedCard > 0) {\r\n                    let gwPrintedCard = {\r\n                        'name': 'Printed Card',\r\n                        'kind': 'debit',\r\n                        'quantity': 1.00,\r\n                        'unitAmount': giftWrappingPrintedCard\r\n                    };\r\n\r\n                    lineItems = $.merge(lineItems, [gwPrintedCard]);\r\n                }\r\n\r\n                /**\r\n                 * Adds Gift Cards as credit LineItems for the PayPal\r\n                 * transaction if it is greater than 0(Zero) to manage\r\n                 * the totals with client-side implementation\r\n                 */\r\n                if (giftCardAccount > 0) {\r\n                    let giftCardItem = {\r\n                        'name': 'Gift Cards',\r\n                        'kind': 'credit',\r\n                        'quantity': 1.00,\r\n                        'unitAmount': giftCardAccount\r\n                    };\r\n\r\n                    lineItems = $.merge(lineItems, [giftCardItem]);\r\n                }\r\n\r\n                if (lineItems.length >= 250) {\r\n                    lineItems = [];\r\n                }\r\n            }\r\n            return lineItems;\r\n        },\r\n\r\n        /**\r\n         * Can send line items\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        canSendLineItems: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal'].canSendLineItems;\r\n        },\r\n\r\n        /**\r\n         * Get the Button ID for the required funding\r\n         *\r\n         * @param {string} funding\r\n         * @return {string}\r\n         */\r\n        getButtonIdByFunding: function (funding) {\r\n            if (funding === 'paylater') {\r\n                return this.getPayLaterButtonId();\r\n            }\r\n\r\n            return this.getPayPalButtonId();\r\n        },\r\n\r\n        /**\r\n         * Get the label config associated to the PayPal funding source.\r\n         *\r\n         * @param {string} funding\r\n         * @return {string}\r\n         */\r\n        getLabelByFunding: function (funding) {\r\n            return _.get(\r\n                window.checkoutConfig.payment,\r\n                [this.getPaymentMethodCodeByFunding(funding), 'style', 'label'],\r\n                ''\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Get the color config associated to the PayPal funding source.\r\n         *\r\n         * @param {string} funding\r\n         * @return {string}\r\n         */\r\n        getColorByFunding: function (funding) {\r\n            return _.get(\r\n                window.checkoutConfig.payment,\r\n                [this.getPaymentMethodCodeByFunding(funding), 'style', 'color'],\r\n                ''\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Get the shape config associated to the PayPal funding source.\r\n         *\r\n         * @param {string} funding\r\n         * @return {string}\r\n         */\r\n        getShapeByFunding: function (funding) {\r\n            return _.get(\r\n                window.checkoutConfig.payment,\r\n                [this.getPaymentMethodCodeByFunding(funding), 'style', 'shape'],\r\n                ''\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Get the payment method code related to the PayPal funding source.\r\n         *\r\n         * @param {string} funding\r\n         * @return {string}\r\n         */\r\n        getPaymentMethodCodeByFunding: function (funding) {\r\n            if (funding === 'paylater') {\r\n                return 'braintree_paypal_paylater';\r\n            }\r\n\r\n            return 'braintree_paypal';\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/paypal-vault.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Vault/js/view/payment/method-renderer/vault',\r\n    'Magento_Ui/js/model/messageList',\r\n    'Magento_Checkout/js/model/full-screen-loader'\r\n], function ($, _, VaultComponent, globalMessageList, fullScreenLoader) {\r\n    'use strict';\r\n\r\n    return VaultComponent.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/paypal/vault',\r\n            additionalData: {}\r\n        },\r\n\r\n        /**\r\n         * Get PayPal payer email\r\n         * @returns {String}\r\n         */\r\n        getPayerEmail: function () {\r\n            return this.details.payerEmail;\r\n        },\r\n\r\n        /**\r\n         * Get type of payment\r\n         * @returns {String}\r\n         */\r\n        getPaymentIcon: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal'].paymentIcon;\r\n        },\r\n\r\n        /**\r\n         * Place order\r\n         */\r\n        beforePlaceOrder: function () {\r\n            this.getPaymentMethodNonce();\r\n        },\r\n\r\n        /**\r\n         * Send request to get payment method nonce\r\n         */\r\n        getPaymentMethodNonce: function () {\r\n            var self = this;\r\n\r\n            fullScreenLoader.startLoader();\r\n            $.getJSON(self.nonceUrl, {\r\n                'public_hash': self.publicHash\r\n            })\r\n                .done(function (response) {\r\n                    fullScreenLoader.stopLoader();\r\n                    self.additionalData['payment_method_nonce'] = response.paymentMethodNonce;\r\n                    self.placeOrder();\r\n                })\r\n                .fail(function (response) {\r\n                    var error = JSON.parse(response.responseText);\r\n\r\n                    fullScreenLoader.stopLoader();\r\n                    globalMessageList.addErrorMessage({\r\n                        message: error.message\r\n                    });\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Get payment method data\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            var data = {\r\n                'method': this.code,\r\n                'additional_data': {\r\n                    'public_hash': this.publicHash\r\n                }\r\n            };\r\n\r\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n            return data;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/paypal.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Checkout/js/view/payment/default',\r\n    'braintree',\r\n    'braintreeCheckoutPayPalAdapter',\r\n    'braintreePayPalCheckout',\r\n    'PayPal_Braintree/js/helper/format-amount',\r\n    'PayPal_Braintree/js/helper/remove-non-digit-characters',\r\n    'PayPal_Braintree/js/helper/replace-unsupported-characters',\r\n    'PayPal_Braintree/js/helper/get-cart-line-items-helper',\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/step-navigator',\r\n    'Magento_Vault/js/view/payment/vault-enabler',\r\n    'Magento_Checkout/js/action/create-billing-address',\r\n    'Magento_Checkout/js/action/select-billing-address',\r\n    'Magento_CheckoutAgreements/js/view/checkout-agreements',\r\n    'mage/translate'\r\n], function (\r\n    $,\r\n    _,\r\n    Component,\r\n    braintree,\r\n    Braintree,\r\n    paypalCheckout,\r\n    formatAmount,\r\n    removeNonDigitCharacters,\r\n    replaceUnsupportedCharacters,\r\n    getCartLineItems,\r\n    quote,\r\n    fullScreenLoader,\r\n    additionalValidators,\r\n    stepNavigator,\r\n    VaultEnabler,\r\n    createBillingAddress,\r\n    selectBillingAddress,\r\n    checkoutAgreements,\r\n    $t\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/paypal',\r\n            code: 'braintree_paypal',\r\n            active: false,\r\n            paypalInstance: null,\r\n            paymentMethodNonce: null,\r\n            grandTotalAmount: null,\r\n            isReviewRequired: false,\r\n            customerEmail: null,\r\n\r\n            /**\r\n             * Additional payment data\r\n             *\r\n             * {Object}\r\n             */\r\n            additionalData: {},\r\n\r\n            /**\r\n             * Line items array\r\n             *\r\n             * {Array}\r\n             */\r\n            lineItemsArray: [\r\n                'name',\r\n                'kind',\r\n                'quantity',\r\n                'unitAmount',\r\n                'productCode',\r\n                'description'\r\n            ],\r\n\r\n            /**\r\n             * PayPal client configuration\r\n             *\r\n             * {Object}\r\n             */\r\n            clientConfig: {\r\n                offerCredit: false,\r\n                offerCreditOnly: false,\r\n                dataCollector: {\r\n                    paypal: true\r\n                },\r\n\r\n                buttonPayPalId: 'braintree_paypal_placeholder',\r\n                buttonCreditId: 'braintree_paypal_credit_placeholder',\r\n                buttonPayLaterId: 'braintree_paypal_paylater_placeholder',\r\n\r\n                onDeviceDataReceived: function (deviceData) {\r\n                    this.additionalData['device_data'] = deviceData;\r\n                },\r\n\r\n                /**\r\n                 * Triggers when widget is loaded\r\n                 */\r\n                onReady: function () {\r\n                    this.setupPayPal();\r\n                },\r\n\r\n                /**\r\n                 * Triggers on payment nonce receive\r\n                 *\r\n                 * @param {Object} response\r\n                 */\r\n                onPaymentMethodReceived: function (response) {\r\n                    this.beforePlaceOrder(response);\r\n                }\r\n            },\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         *\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            let self = this;\r\n\r\n            this._super()\r\n                .observe(['active', 'isReviewRequired', 'customerEmail']);\r\n\r\n            window.addEventListener('hashchange', function (e) {\r\n                let methodCode = quote.paymentMethod();\r\n\r\n                if (methodCode === 'braintree_paypal' || methodCode === 'braintree_paypal_vault') {\r\n                    if (e.newURL.indexOf('payment') > 0 && self.grandTotalAmount !== null) {\r\n                        self.reInitPayPal();\r\n                    }\r\n                }\r\n            });\r\n\r\n            quote.paymentMethod.subscribe(function (value) {\r\n                let methodCode = value;\r\n\r\n                if (methodCode === 'braintree_paypal' || methodCode === 'braintree_paypal_vault') {\r\n                    self.reInitPayPal();\r\n                }\r\n            });\r\n\r\n            this.vaultEnabler = new VaultEnabler();\r\n            this.vaultEnabler.setPaymentCode(this.getVaultCode());\r\n            this.vaultEnabler.isActivePaymentTokenEnabler.subscribe(function () {\r\n                self.onVaultPaymentTokenEnablerChange();\r\n            });\r\n\r\n            this.grandTotalAmount = quote.totals()['base_grand_total'];\r\n\r\n            quote.totals.subscribe(function () {\r\n                if (self.grandTotalAmount !== quote.totals()['base_grand_total']) {\r\n                    self.grandTotalAmount = quote.totals()['base_grand_total'];\r\n                    let methodCode = quote.paymentMethod();\r\n\r\n                    if (methodCode &&\r\n                        (methodCode.method === 'braintree_paypal' || methodCode.method === 'braintree_paypal_vault')) {\r\n                        self.reInitPayPal();\r\n                    }\r\n                }\r\n            });\r\n\r\n            // for each component initialization need update property\r\n            this.isReviewRequired(false);\r\n            this.initClientConfig();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get payment name\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return this.code;\r\n        },\r\n\r\n        /**\r\n         * Get payment title\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getTitle: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].title;\r\n        },\r\n\r\n        /**\r\n         * Check if payment is active\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isActive: function () {\r\n            let active = this.getCode() === this.isChecked();\r\n\r\n            this.active(active);\r\n\r\n            return active;\r\n        },\r\n\r\n        /**\r\n         * Triggers when payment method change\r\n         *\r\n         * @param {Boolean} isActive\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            if (!isActive) {\r\n                return;\r\n            }\r\n\r\n            // need always re-init Braintree with PayPal configuration\r\n            this.reInitPayPal();\r\n        },\r\n\r\n        /**\r\n         * Init config\r\n         */\r\n        initClientConfig: function () {\r\n            this.clientConfig = _.extend(this.clientConfig, this.getPayPalConfig());\r\n\r\n            _.each(this.clientConfig, function (fn, name) {\r\n                if (typeof fn === 'function') {\r\n                    this.clientConfig[name] = fn.bind(this);\r\n                }\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Set payment nonce\r\n         *\r\n         * @param {String} paymentMethodNonce\r\n         */\r\n        setPaymentMethodNonce: function (paymentMethodNonce) {\r\n            this.paymentMethodNonce = paymentMethodNonce;\r\n        },\r\n\r\n        /**\r\n         * Update quote billing address\r\n         *\r\n         * @param {Object}customer\r\n         * @param {Object}address\r\n         */\r\n        setBillingAddress: function (customer, address) {\r\n            let billingAddress = {\r\n                street: [address.line1],\r\n                city: address.city,\r\n                postcode: address.postalCode,\r\n                countryId: address.countryCode,\r\n                email: customer.email,\r\n                firstname: customer.firstName,\r\n                lastname: customer.lastName,\r\n                telephone: removeNonDigitCharacters(_.get(customer, 'phone', '00000000000'))\r\n            };\r\n\r\n            billingAddress['region_code'] = typeof address.state === 'string' ? address.state : '';\r\n            billingAddress = createBillingAddress(billingAddress);\r\n            quote.billingAddress(billingAddress);\r\n        },\r\n\r\n        /**\r\n         * Prepare data to place order\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        beforePlaceOrder: function (data) {\r\n            this.setPaymentMethodNonce(data.nonce);\r\n            this.customerEmail(data.details.email);\r\n            if (quote.isVirtual()) {\r\n                this.isReviewRequired(true);\r\n            } else if (this.isRequiredBillingAddress() === '1' || quote.billingAddress() === null) {\r\n                if (typeof data.details.billingAddress !== 'undefined') {\r\n                    this.setBillingAddress(data.details, data.details.billingAddress);\r\n                } else {\r\n                    this.setBillingAddress(data.details, data.details.shippingAddress);\r\n                }\r\n            } else if (quote.shippingAddress() === quote.billingAddress()) {\r\n                selectBillingAddress(quote.shippingAddress());\r\n            } else {\r\n                selectBillingAddress(quote.billingAddress());\r\n            }\r\n            this.placeOrder();\r\n        },\r\n\r\n        /**\r\n         * Re-init PayPal Auth Flow\r\n         */\r\n        reInitPayPal: function () {\r\n            this.disableButton();\r\n            this.clientConfig.paypal.amount = formatAmount(this.grandTotalAmount);\r\n\r\n            if (!quote.isVirtual()) {\r\n                this.clientConfig.paypal.enableShippingAddress = true;\r\n                this.clientConfig.paypal.shippingAddressEditable = false;\r\n                this.clientConfig.paypal.shippingAddressOverride = this.getShippingAddress();\r\n            }\r\n            // Send Line Items\r\n            this.clientConfig.paypal.lineItems = getCartLineItems();\r\n\r\n            Braintree.setConfig(this.clientConfig);\r\n\r\n            if (Braintree.getPayPalInstance()) {\r\n                Braintree.getPayPalInstance().teardown(function () {\r\n                    Braintree.setup();\r\n                });\r\n                Braintree.setPayPalInstance(null);\r\n            } else {\r\n                Braintree.setup();\r\n                this.enableButton();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Setup PayPal instance\r\n         */\r\n        setupPayPal: function () {\r\n            if (Braintree.config.paypalInstance) {\r\n                fullScreenLoader.stopLoader(true);\r\n                return;\r\n            }\r\n\r\n            paypalCheckout.create({\r\n                client: Braintree.clientInstance\r\n            }, function (createErr, paypalCheckoutInstance) {\r\n                if (createErr) {\r\n                    Braintree.showError(\r\n                        $t('PayPal Checkout could not be initialized. Please contact the store owner.'));\r\n                    console.error('paypalCheckout error', createErr);\r\n                    return;\r\n                }\r\n                let quoteObj = quote.totals(),\r\n                    configSDK = {\r\n                        components: 'buttons,messages,funding-eligibility',\r\n                        'enable-funding': this.isCreditEnabled() ? 'credit' : 'paylater',\r\n                        currency: quoteObj['base_currency_code']\r\n                    },\r\n                    buyerCountry = this.getMerchantCountry();\r\n\r\n                if (Braintree.getEnvironment() === 'sandbox' && buyerCountry !== null) {\r\n                    configSDK['buyer-country'] = buyerCountry;\r\n                }\r\n                paypalCheckoutInstance.loadPayPalSDK(configSDK, function () {\r\n                    this.loadPayPalButton(paypalCheckoutInstance, 'paypal');\r\n                    if (this.isCreditEnabled()) {\r\n                        this.loadPayPalButton(paypalCheckoutInstance, 'credit');\r\n                    }\r\n                    if (this.isPayLaterEnabled()) {\r\n                        this.loadPayPalButton(paypalCheckoutInstance, 'paylater');\r\n                    }\r\n\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        loadPayPalButton: function (paypalCheckoutInstance, funding) {\r\n            let paypalPayment = Braintree.config.paypal,\r\n                onPaymentMethodReceived = Braintree.config.onPaymentMethodReceived,\r\n                style = {\r\n                    label: Braintree.getLabel(funding),\r\n                    color: Braintree.getColor(funding),\r\n                    shape: Braintree.getShape(funding)\r\n                },\r\n                button,\r\n                events = Braintree.events,\r\n                payPalButtonId,\r\n                payPalButtonElement;\r\n\r\n            if (funding === 'credit') {\r\n                Braintree.config.buttonId = this.getCreditButtonId();\r\n            } else if (funding === 'paylater') {\r\n                Braintree.config.buttonId = this.getPayLaterButtonId();\r\n            } else {\r\n                Braintree.config.buttonId = this.getPayPalButtonId();\r\n            }\r\n\r\n            payPalButtonId = Braintree.config.buttonId;\r\n            payPalButtonElement = $('#' + Braintree.config.buttonId);\r\n            payPalButtonElement.html('');\r\n\r\n            // Render\r\n            Braintree.config.paypalInstance = paypalCheckoutInstance;\r\n\r\n            button = window.paypal.Buttons({\r\n                fundingSource: funding,\r\n                env: Braintree.getEnvironment(),\r\n                style: style,\r\n                commit: true,\r\n                locale: Braintree.config.paypal.locale,\r\n\r\n                onInit: function (data, actions) {\r\n                    let agreements = checkoutAgreements().agreements,\r\n                        shouldDisableActions = false;\r\n\r\n                    actions.disable();\r\n\r\n                    _.each(agreements, function (item) {\r\n                        if (checkoutAgreements().isAgreementRequired(item)) {\r\n                            let paymentMethodCode = quote.paymentMethod().method,\r\n                                inputId = '#agreement_' + paymentMethodCode + '_' + item.agreementId,\r\n                                inputEl = document.querySelector(inputId);\r\n\r\n                            if (!inputEl.checked) {\r\n                                shouldDisableActions = true;\r\n                            }\r\n\r\n                            inputEl.addEventListener('change', function () {\r\n                                if (additionalValidators.validate()) {\r\n                                    actions.enable();\r\n                                } else {\r\n                                    actions.disable();\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    if (!shouldDisableActions) {\r\n                        actions.enable();\r\n                    }\r\n                },\r\n\r\n                createOrder: function () {\r\n                    return paypalCheckoutInstance.createPayment(paypalPayment).catch(function (err) {\r\n                        throw err.details.originalError.details.originalError.paymentResource;\r\n                    });\r\n                },\r\n\r\n                onCancel: function (data) {\r\n                    console.log('checkout.js payment cancelled', JSON.stringify(data, 0, 2));\r\n\r\n                    if (typeof events.onCancel === 'function') {\r\n                        events.onCancel();\r\n                    }\r\n                },\r\n\r\n                onError: function (err) {\r\n                    if (err.errorName === 'VALIDATION_ERROR' && err.errorMessage.indexOf('Value is invalid') !== -1) {\r\n                        Braintree.showError(\r\n                            $t(\r\n                                'Address failed validation. Please check and confirm your City, State, and Postal Code'\r\n                            )\r\n                        );\r\n                    } else {\r\n                        Braintree.showError(\r\n                            $t('PayPal Checkout could not be initialized. Please contact the store owner.'));\r\n                    }\r\n                    Braintree.config.paypalInstance = null;\r\n                    console.error('Paypal checkout.js error', err);\r\n\r\n                    if (typeof events.onError === 'function') {\r\n                        events.onError(err);\r\n                    }\r\n                },\r\n\r\n                onClick: function (data) {\r\n                    if (!quote.isVirtual()) {\r\n                        this.clientConfig.paypal.enableShippingAddress = true;\r\n                        this.clientConfig.paypal.shippingAddressEditable = false;\r\n                        this.clientConfig.paypal.shippingAddressOverride = this.getShippingAddress();\r\n                    }\r\n\r\n                    // To check term & conditions input checked - validate additional validators.\r\n                    if (!additionalValidators.validate()) {\r\n                        return false;\r\n                    }\r\n\r\n                    if (typeof events.onClick === 'function') {\r\n                        events.onClick(data);\r\n                    }\r\n                }.bind(this),\r\n\r\n                onApprove: function (data) {\r\n                    return paypalCheckoutInstance.tokenizePayment(data)\r\n                        .then(function (payload) {\r\n                            onPaymentMethodReceived(payload);\r\n                        });\r\n                }\r\n            });\r\n\r\n            if (button.isEligible() && payPalButtonElement.length) {\r\n                button.render('#' + payPalButtonId).then(function () {\r\n                    Braintree.enableButton();\r\n                    if (typeof Braintree.config.onPaymentMethodError === 'function') {\r\n                        Braintree.config.onPaymentMethodError();\r\n                    }\r\n                }).then(function (data) {\r\n                    if (typeof events.onRender === 'function') {\r\n                        events.onRender(data);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get locale\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getLocale: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].locale;\r\n        },\r\n\r\n        /**\r\n         * Is Billing Address required from PayPal side\r\n         *\r\n         * @returns {exports.isRequiredBillingAddress|(function())|boolean}\r\n         */\r\n        isRequiredBillingAddress: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].isRequiredBillingAddress;\r\n        },\r\n\r\n        /**\r\n         * Get configuration for PayPal\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getPayPalConfig: function () {\r\n            let totals = quote.totals(),\r\n                config = {},\r\n                isActiveVaultEnabler = this.isActiveVault();\r\n\r\n            config.paypal = {\r\n                flow: 'checkout',\r\n                amount: formatAmount(this.grandTotalAmount),\r\n                currency: totals['base_currency_code'],\r\n                locale: this.getLocale(),\r\n\r\n                /**\r\n                 * Triggers on any Braintree error\r\n                 */\r\n                onError: function () {\r\n                    this.paymentMethodNonce = null;\r\n                },\r\n\r\n                /**\r\n                 * Triggers if browser doesn't support PayPal Checkout\r\n                 */\r\n                onUnsupported: function () {\r\n                    this.paymentMethodNonce = null;\r\n                }\r\n            };\r\n\r\n            if (isActiveVaultEnabler) {\r\n                config.paypal.requestBillingAgreement = true;\r\n            }\r\n\r\n            if (!quote.isVirtual()) {\r\n                config.paypal.enableShippingAddress = true;\r\n                config.paypal.shippingAddressEditable = false;\r\n                config.paypal.shippingAddressOverride = this.getShippingAddress();\r\n            }\r\n\r\n            if (this.getMerchantName()) {\r\n                config.paypal.displayName = this.getMerchantName();\r\n            }\r\n\r\n            return config;\r\n        },\r\n\r\n        /**\r\n         * Get shipping address\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getShippingAddress: function () {\r\n            let address = quote.shippingAddress();\r\n\r\n            return {\r\n                recipientName: address.firstname + ' ' + address.lastname,\r\n                line1: address.street[0],\r\n                line2: typeof address.street[2] === 'undefined'\r\n                    ? address.street[1] : address.street[1] + ' ' + address.street[2],\r\n                city: address.city,\r\n                countryCode: address.countryId,\r\n                postalCode: address.postcode,\r\n                state: address.regionCode\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Get merchant name\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getMerchantName: function () {\r\n            return window.checkoutConfig.payment[this.getCode()]['merchantName'];\r\n        },\r\n\r\n        /**\r\n         * Get data\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            let data = {\r\n                'method': this.getCode(),\r\n                'additional_data': {\r\n                    'payment_method_nonce': this.paymentMethodNonce\r\n                }\r\n            };\r\n\r\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n            this.vaultEnabler.visitAdditionalData(data);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Returns payment acceptance mark image path\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getPaymentAcceptanceMarkSrc: function () {\r\n            return window.checkoutConfig.payment[this.getCode()]['paymentAcceptanceMarkSrc'];\r\n        },\r\n\r\n        /**\r\n         * Get paypal vault payment method code\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getVaultCode: function () {\r\n            return window.checkoutConfig.payment[this.getCode()]['vaultCode'];\r\n        },\r\n\r\n        /**\r\n         * Check if vault is active\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isActiveVault: function () {\r\n            return this.vaultEnabler.isVaultEnabled() && this.vaultEnabler.isActivePaymentTokenEnabler();\r\n        },\r\n\r\n        /**\r\n         * Re-init PayPal Auth flow to use Vault\r\n         */\r\n        onVaultPaymentTokenEnablerChange: function () {\r\n            this.clientConfig.paypal.singleUse = !this.isActiveVault();\r\n            this.reInitPayPal();\r\n        },\r\n\r\n        /**\r\n         * Disable submit button\r\n         */\r\n        disableButton: function () {\r\n            // stop any previous shown loaders\r\n            fullScreenLoader.stopLoader(true);\r\n            fullScreenLoader.startLoader();\r\n            $('[data-button=\"place\"]').attr('disabled', 'disabled');\r\n        },\r\n\r\n        /**\r\n         * Enable submit button\r\n         */\r\n        enableButton: function () {\r\n            $('[data-button=\"place\"]').removeAttr('disabled');\r\n            fullScreenLoader.stopLoader(true);\r\n        },\r\n\r\n        /**\r\n         * Triggers when customer click \"Continue to PayPal\" button\r\n         */\r\n        payWithPayPal: function () {\r\n            if (additionalValidators.validate()) {\r\n                Braintree.checkout.paypal.initAuthFlow();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get PayPal button id\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getPayPalButtonId: function () {\r\n            return this.clientConfig.buttonPayPalId;\r\n        },\r\n\r\n        /**\r\n         * Get Credit button id\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getCreditButtonId: function () {\r\n            return this.clientConfig.buttonCreditId;\r\n        },\r\n\r\n        /**\r\n         * Get Pay Later button id\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getPayLaterButtonId: function () {\r\n            return this.clientConfig.buttonPayLaterId;\r\n        },\r\n\r\n        /**\r\n         * Check if Pay Later enabled\r\n         *\r\n         * @returns {*}\r\n         */\r\n        isPayLaterEnabled: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal_paylater']['isActive'];\r\n        },\r\n\r\n        /**\r\n         * Check if Pay Later messaging enabled\r\n         *\r\n         * @returns {*}\r\n         */\r\n        isPayLaterMessageEnabled: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal_paylater']['isMessageActive'];\r\n        },\r\n\r\n        /**\r\n         * Get grand total\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getGrandTotalAmount: function () {\r\n            return formatAmount(this.grandTotalAmount);\r\n        },\r\n\r\n        /**\r\n         * Check if PayPal Credit enabled\r\n         *\r\n         * @returns {*}\r\n         */\r\n        isCreditEnabled: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal_credit']['isActive'];\r\n        },\r\n\r\n        /**\r\n         * Get Message Layout\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getMessagingLayout: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal_paylater']['message']['layout'];\r\n        },\r\n\r\n        /**\r\n         * Get Message Logo\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getMessagingLogo: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal_paylater']['message']['logo'];\r\n        },\r\n\r\n        /**\r\n         * Get Message Logo position\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getMessagingLogoPosition: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal_paylater']['message']['logo_position'];\r\n        },\r\n\r\n        /**\r\n         * Get Message Text Color\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getMessagingTextColor: function () {\r\n            return window.checkoutConfig.payment['braintree_paypal_paylater']['message']['text_color'];\r\n        },\r\n\r\n        /**\r\n         * Get merchant country\r\n         *\r\n         * @returns {*}\r\n         */\r\n        getMerchantCountry: function () {\r\n            return window.checkoutConfig.payment[this.getCode()]['merchantCountry'];\r\n        },\r\n\r\n        /**\r\n         * Regex to replace all unsupported characters.\r\n         *\r\n         * @param str\r\n         */\r\n        replaceUnsupportedCharacters: function (str) {\r\n            // eslint-disable-next-line no-useless-escape\r\n            str.replace('/[^a-zA-Z0-9\\s\\-.\\']/', '');\r\n            return str.substr(0, 127);\r\n        },\r\n\r\n        /**\r\n         * Can send line items\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        canSendLineItems: function () {\r\n            return window.checkoutConfig.payment[this.getCode()].canSendLineItems;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/vault.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'Magento_Vault/js/view/payment/method-renderer/vault',\r\n    'PayPal_Braintree/js/view/payment/adapter',\r\n    'Magento_Ui/js/model/messageList',\r\n    'PayPal_Braintree/js/view/payment/validator-handler',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'braintree',\r\n    'braintreeHostedFields',\r\n    'mage/url'\r\n], function (\r\n    ko,\r\n    $,\r\n    VaultComponent,\r\n    Braintree,\r\n    globalMessageList,\r\n    validatorManager,\r\n    additionalValidators,\r\n    fullScreenLoader,\r\n    client,\r\n    hostedFields,\r\n    url\r\n) {\r\n    'use strict';\r\n\r\n    return VaultComponent.extend({\r\n        defaults: {\r\n            active: false,\r\n            hostedFieldsInstance: null,\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            },\r\n            modules: {\r\n                hostedFields: '${ $.parentName }.braintree'\r\n            },\r\n            template: 'PayPal_Braintree/payment/cc/vault',\r\n            updatePaymentUrl: url.build('braintree/payment/updatepaymentmethod'),\r\n            vaultedCVV: ko.observable(''),\r\n            validatorManager: validatorManager,\r\n            isValidCvv: false,\r\n            onInstanceReady: function (instance) {\r\n                instance.on('validityChange', this.onValidityChange.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Event fired by Braintree SDK whenever input value length matches the validation length.\r\n         * In the case of a CVV, this is 3, or 4 for AMEX.\r\n         *\r\n         * @param event\r\n         */\r\n        onValidityChange: function (event) {\r\n            if (event.emittedBy === 'cvv') {\r\n                this.isValidCvv = event.fields.cvv.isValid;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['active']);\r\n            this.validatorManager.initialize();\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is payment option active?\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        isActive: function () {\r\n            let active = this.getId() === this.isChecked();\r\n\r\n            this.active(active);\r\n            return active;\r\n        },\r\n\r\n        /**\r\n         * Fired whenever a payment option is changed.\r\n         *\r\n         * @param isActive\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            let self = this;\r\n\r\n            if (!isActive) {\r\n                return;\r\n            }\r\n\r\n            if (self.showCvvVerify()) {\r\n                if (self.hostedFieldsInstance) {\r\n                    self.hostedFieldsInstance.teardown(function (teardownError) {\r\n                        if (teardownError) {\r\n                            globalMessageList.addErrorMessage({\r\n                                message: teardownError.message\r\n                            });\r\n                        }\r\n                        self.hostedFieldsInstance = null;\r\n                        self.initHostedCvvField();\r\n                    });\r\n                    return;\r\n                }\r\n                self.initHostedCvvField();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize the CVV input field with the Braintree Hosted Fields SDK.\r\n         */\r\n        initHostedCvvField: function () {\r\n            let self = this;\r\n\r\n            client.create({\r\n                authorization: Braintree.getClientToken()\r\n            }, function (clientError, clientInstance) {\r\n                if (clientError) {\r\n                    globalMessageList.addErrorMessage({\r\n                        message: clientError.message\r\n                    });\r\n                }\r\n                hostedFields.create({\r\n                    client: clientInstance,\r\n                    fields: {\r\n                        cvv: {\r\n                            selector: '#' + self.getId() + '_cid',\r\n                            placeholder: '123'\r\n                        }\r\n                    }\r\n                }, function (hostedError, hostedFieldsInstance) {\r\n                    if (hostedError) {\r\n                        globalMessageList.addErrorMessage({\r\n                            message: hostedError.message\r\n                        });\r\n                        return;\r\n                    }\r\n\r\n                    self.hostedFieldsInstance = hostedFieldsInstance;\r\n                    self.onInstanceReady(self.hostedFieldsInstance);\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Return the payment method code.\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getCode: function () {\r\n            return 'braintree_cc_vault';\r\n        },\r\n\r\n        /**\r\n         * Get last 4 digits of card\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getMaskedCard: function () {\r\n            return this.details.maskedCC;\r\n        },\r\n\r\n        /**\r\n         * Get expiration date\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getExpirationDate: function () {\r\n            return this.details.expirationDate;\r\n        },\r\n\r\n        /**\r\n         * Get card type\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getCardType: function () {\r\n            return this.details.type;\r\n        },\r\n\r\n        /**\r\n         * Get card icons\r\n         *\r\n         * @param {String} type\r\n         * @returns {Boolean}\r\n         */\r\n        getIcons: function (type) {\r\n            return window.checkoutConfig.payment.braintree.icons.hasOwnProperty(type) ?\r\n                window.checkoutConfig.payment.braintree.icons[type]\r\n                : false;\r\n        },\r\n\r\n        /**\r\n         * Get show CVV Field\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        showCvvVerify: function () {\r\n            return window.checkoutConfig.payment[this.code].cvvVerify;\r\n        },\r\n\r\n        /**\r\n         * Show or hide the error message.\r\n         *\r\n         * @param selector\r\n         * @param state\r\n         * @returns {boolean}\r\n         */\r\n        validateCvv: function (selector, state) {\r\n            let $selector = $(selector),\r\n                invalidClass = 'braintree-hosted-fields-invalid';\r\n\r\n            if (state === true) {\r\n                $selector.removeClass(invalidClass);\r\n                return true;\r\n            }\r\n\r\n            $selector.addClass(invalidClass);\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Place order\r\n         */\r\n        placeOrder: function () {\r\n            let self = this;\r\n\r\n            if (self.showCvvVerify()) {\r\n                if (!self.validateCvv('#' + self.getId() + '_cid', self.isValidCvv)\r\n                    || !additionalValidators.validate()) {\r\n                    return;\r\n                }\r\n            } else if (!additionalValidators.validate()) {\r\n                return;\r\n            }\r\n\r\n            fullScreenLoader.startLoader();\r\n\r\n            if (self.showCvvVerify() && typeof self.hostedFieldsInstance !== 'undefined') {\r\n                self.hostedFieldsInstance.tokenize({}, function (error, payload) {\r\n                    if (error) {\r\n                        fullScreenLoader.stopLoader();\r\n                        globalMessageList.addErrorMessage({\r\n                            message: error.message\r\n                        });\r\n                        return;\r\n                    }\r\n                    $.getJSON(self.updatePaymentUrl, {\r\n                        'nonce': payload.nonce,\r\n                        'public_hash': self.publicHash\r\n                    }).done(function (response) {\r\n                        if (response.success === false) {\r\n                            fullScreenLoader.stopLoader();\r\n                            globalMessageList.addErrorMessage({\r\n                                message: 'CVV verification failed.'\r\n                            });\r\n                            return;\r\n                        }\r\n                        self.getPaymentMethodNonce();\r\n                    });\r\n                });\r\n            } else {\r\n                self.getPaymentMethodNonce();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Send request to get payment method nonce\r\n         */\r\n        getPaymentMethodNonce: function () {\r\n            let self = this;\r\n\r\n            fullScreenLoader.startLoader();\r\n            $.getJSON(self.nonceUrl, {\r\n                'public_hash': self.publicHash,\r\n                'cvv': self.vaultedCVV()\r\n            }).done(function (response) {\r\n                fullScreenLoader.stopLoader();\r\n                self.hostedFields(function (formComponent) {\r\n                    formComponent.setPaymentMethodNonce(response.paymentMethodNonce);\r\n                    formComponent.setCreditCardBin(response.details.bin);\r\n                    formComponent.additionalData['public_hash'] = self.publicHash;\r\n                    formComponent.code = self.code;\r\n                    if (self.vaultedCVV()) {\r\n                        formComponent.additionalData['cvv'] = self.vaultedCVV();\r\n                    }\r\n\r\n                    self.validatorManager.validate(formComponent, function () {\r\n                        fullScreenLoader.stopLoader();\r\n                        return formComponent.placeOrder('parent');\r\n                    }, function () {\r\n                        // No teardown actions required.\r\n                        fullScreenLoader.stopLoader();\r\n                        formComponent.setPaymentMethodNonce(null);\r\n                        formComponent.setCreditCardBin(null);\r\n                    });\r\n\r\n                });\r\n            }).fail(function (response) {\r\n                let error = JSON.parse(response.responseText);\r\n\r\n                fullScreenLoader.stopLoader();\r\n                globalMessageList.addErrorMessage({\r\n                    message: error.message\r\n                });\r\n            });\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/venmo-vault.js":"/*browser:true*/\r\n\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Vault/js/view/payment/method-renderer/vault',\r\n    'Magento_Ui/js/model/messageList',\r\n    'PayPal_Braintree/js/view/payment/validator-handler',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/full-screen-loader'\r\n], function (\r\n    ko,\r\n    $,\r\n    _,\r\n    VaultComponent,\r\n    globalMessageList,\r\n    validatorManager,\r\n    additionalValidators,\r\n    fullScreenLoader\r\n) {\r\n    'use strict';\r\n\r\n    return VaultComponent.extend({\r\n        defaults: {\r\n            active: false,\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            },\r\n            template: 'PayPal_Braintree/payment/venmo/vault',\r\n            validatorManager: validatorManager,\r\n            additionalData: {}\r\n        },\r\n\r\n        /**\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['active']);\r\n            this.validatorManager.initialize();\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is payment option active?\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        isActive: function () {\r\n            let active = this.getId() === this.isChecked();\r\n\r\n            this.active(active);\r\n            return active;\r\n        },\r\n\r\n        /**\r\n         * Return the payment method code.\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getCode: function () {\r\n            return 'braintree_venmo_vault';\r\n        },\r\n\r\n        /**\r\n         * Get venmo username\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getVenmoUsername: function () {\r\n            return this.details.username;\r\n        },\r\n\r\n        /**\r\n         * Get the Venmo icon\r\n         *\r\n         * @param type\r\n         * @return {*|boolean}\r\n         */\r\n        getVenmoIcon() {\r\n            return window.checkoutConfig.payment.braintree_venmo.paymentMarkSrc;\r\n        },\r\n\r\n        /**\r\n         * trigger Place order action.\r\n         *\r\n         * Set payment method nonce & place order.\r\n         */\r\n        triggerPlaceOrder: function () {\r\n            this.getPaymentMethodNonce();\r\n        },\r\n\r\n        /**\r\n         * Send request to get payment method nonce & places order.\r\n         */\r\n        getPaymentMethodNonce: function () {\r\n            let self = this;\r\n\r\n            fullScreenLoader.startLoader();\r\n            $.getJSON(self.nonceUrl, {\r\n                'public_hash': self.publicHash\r\n            }).done(function (response) {\r\n                fullScreenLoader.stopLoader();\r\n                self.additionalData['payment_method_nonce'] = response.paymentMethodNonce;\r\n                self.placeOrder();\r\n            }).fail(function (response) {\r\n                let error = JSON.parse(response.responseText);\r\n\r\n                fullScreenLoader.stopLoader();\r\n                globalMessageList.addErrorMessage({\r\n                    message: error.message\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get payment method data.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            let data = {\r\n                'method': this.code,\r\n                'additional_data': {\r\n                    'public_hash': this.publicHash\r\n                }\r\n            };\r\n\r\n            data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n\r\n            return data;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/venmo.js":"define(\r\n    [\r\n        'Magento_Checkout/js/view/payment/default',\r\n        'braintree',\r\n        'braintreeDataCollector',\r\n        'braintreeVenmo',\r\n        'PayPal_Braintree/js/form-builder',\r\n        'Magento_Ui/js/model/messageList',\r\n        'Magento_Checkout/js/model/full-screen-loader',\r\n        'Magento_Checkout/js/model/payment/additional-validators',\r\n        'mage/translate',\r\n        'Magento_Vault/js/view/payment/vault-enabler',\r\n        'underscore'\r\n    ],\r\n    function (\r\n        Component,\r\n        braintree,\r\n        dataCollector,\r\n        venmo,\r\n        formBuilder,\r\n        messageList,\r\n        fullScreenLoader,\r\n        additionalValidators,\r\n        $t,\r\n        VaultEnabler,\r\n        _\r\n    ) {\r\n        'use strict';\r\n\r\n        return Component.extend({\r\n            defaults: {\r\n                deviceData: null,\r\n                paymentMethodNonce: null,\r\n                template: 'PayPal_Braintree/payment/venmo',\r\n                venmoInstance: null,\r\n                vaultEnabler: null\r\n            },\r\n\r\n            clickVenmoBtn: function () {\r\n                var self = this;\r\n\r\n                if (!additionalValidators.validate()) {\r\n                    return false;\r\n                }\r\n\r\n                if (!this.venmoInstance) {\r\n                    this.setErrorMsg($t('Venmo not initialized, please try reloading.'));\r\n                    return;\r\n                }\r\n\r\n                this.venmoInstance.tokenize(function (tokenizeErr, payload) {\r\n                    if (tokenizeErr) {\r\n                        if (tokenizeErr.code === 'VENMO_CANCELED') {\r\n                            self.setErrorMsg($t('Venmo app is not available or the payment flow was cancelled.'));\r\n                        } else if (tokenizeErr.code === 'VENMO_APP_CANCELED') {\r\n                            self.setErrorMsg($t('Venmo payment flow cancelled.'));\r\n                        } else {\r\n                            self.setErrorMsg(tokenizeErr.message);\r\n                        }\r\n                    } else {\r\n                        self.handleVenmoSuccess(payload);\r\n                    }\r\n                });\r\n            },\r\n\r\n            collectDeviceData: function (clientInstance, callback) {\r\n                var self = this;\r\n\r\n                dataCollector.create({\r\n                    client: clientInstance,\r\n                    paypal: true\r\n                }, function (dataCollectorErr, dataCollectorInstance) {\r\n                    if (dataCollectorErr) {\r\n                        return;\r\n                    }\r\n                    self.deviceData = dataCollectorInstance.deviceData;\r\n                    callback();\r\n                });\r\n            },\r\n\r\n            getClientToken: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].clientToken;\r\n            },\r\n\r\n            getCode: function () {\r\n                return 'braintree_venmo';\r\n            },\r\n\r\n            getData: function () {\r\n                let data = {\r\n                    'method': this.getCode(),\r\n                    'additional_data': {\r\n                        'payment_method_nonce': this.paymentMethodNonce,\r\n                        'device_data': this.deviceData\r\n                    }\r\n                };\r\n\r\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\r\n                this.vaultEnabler.visitAdditionalData(data);\r\n\r\n                return data;\r\n            },\r\n\r\n            getPaymentMarkSrc: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].paymentMarkSrc;\r\n            },\r\n\r\n            getTitle: function () {\r\n                return 'Venmo';\r\n            },\r\n\r\n            handleVenmoSuccess: function (payload) {\r\n                this.setPaymentMethodNonce(payload.nonce);\r\n                this.placeOrder();\r\n            },\r\n\r\n            initialize: function () {\r\n                var self = this;\r\n\r\n                this._super();\r\n                this.vaultEnabler = new VaultEnabler();\r\n                this.vaultEnabler.setPaymentCode(this.getVaultCode());\r\n\r\n                this.vaultEnabler.isActivePaymentTokenEnabler.subscribe(function () {\r\n                    self.venmoInstance.teardown(function () {\r\n                        self.initVenmo();\r\n                    });\r\n\r\n                });\r\n                this.initVenmo();\r\n                return this;\r\n            },\r\n\r\n            isAllowed: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].isAllowed;\r\n            },\r\n\r\n            setErrorMsg: function (message) {\r\n                messageList.addErrorMessage({\r\n                    message: message\r\n                });\r\n            },\r\n\r\n            setPaymentMethodNonce: function (nonce) {\r\n                this.paymentMethodNonce = nonce;\r\n            },\r\n\r\n            setVenmoInstance: function (instance) {\r\n                this.venmoInstance = instance;\r\n            },\r\n\r\n            isVaultEnabled: function () {\r\n                return this.vaultEnabler.isVaultEnabled();\r\n            },\r\n\r\n            /**\r\n             * @returns {String}\r\n             */\r\n            getVaultCode: function () {\r\n                return window.checkoutConfig.payment[this.getCode()].vaultCode;\r\n            },\r\n\r\n            getPaymentMethodUsage: function () {\r\n                return this.vaultEnabler.isActivePaymentTokenEnabler()\r\n                    ? 'multi_use'\r\n                    : 'single_use';\r\n            },\r\n\r\n            initVenmo: function () {\r\n                var self = this;\r\n\r\n                braintree.create({\r\n                    authorization: self.getClientToken()\r\n                }, function (clientError, clientInstance) {\r\n                    if (clientError) {\r\n                        this.setErrorMsg($t('Unable to initialize Braintree Client.'));\r\n                        return;\r\n                    }\r\n\r\n                    // Collect device data\r\n                    self.collectDeviceData(clientInstance, function () {\r\n                        // callback from collectDeviceData\r\n                        venmo.create({\r\n                            client: clientInstance,\r\n                            allowDesktop: true,\r\n                            allowDesktopWebLogin: true,\r\n                            mobileWebFallBack: true,\r\n                            paymentMethodUsage: self.getPaymentMethodUsage(),\r\n                            allowNewBrowserTab: false\r\n                        }, function (venmoErr, venmoInstance) {\r\n                            if (venmoErr) {\r\n                                self.setErrorMsg($t('Error initializing Venmo: %1').replace('%1', venmoErr));\r\n                                return;\r\n                            }\r\n\r\n                            if (!venmoInstance.isBrowserSupported()) {\r\n                                console.log('Browser does not support Venmo');\r\n                                return;\r\n                            }\r\n\r\n                            self.setVenmoInstance(venmoInstance);\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n);\r\n","PayPal_Braintree/js/view/payment/method-renderer/multishipping/hosted-fields.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n\r\ndefine([\r\n    'jquery',\r\n    'PayPal_Braintree/js/view/payment/method-renderer/hosted-fields',\r\n    'PayPal_Braintree/js/validator',\r\n    'Magento_Ui/js/model/messageList',\r\n    'mage/translate',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'Magento_Checkout/js/action/set-payment-information',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'PayPal_Braintree/js/view/payment/adapter'\r\n], function (\r\n    $,\r\n    Component,\r\n    validator,\r\n    messageList,\r\n    $t,\r\n    fullScreenLoader,\r\n    setPaymentInformationAction,\r\n    additionalValidators,\r\n    braintree\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/multishipping/form'\r\n        },\r\n\r\n        /**\r\n         * Get list of available CC types\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getCcAvailableTypes: function () {\r\n            let availableTypes = validator.getAvailableCardTypes(),\r\n                billingCountryId;\r\n\r\n            billingCountryId = $('#multishipping_billing_country_id').val();\r\n\r\n            if (billingCountryId && validator.getCountrySpecificCardTypes(billingCountryId)) {\r\n                return validator.collectTypes(\r\n                    availableTypes, validator.getCountrySpecificCardTypes(billingCountryId)\r\n                );\r\n            }\r\n\r\n            return availableTypes;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        handleNonce: function (payload) {\r\n            let self = this;\r\n\r\n            this.setPaymentMethodNonce(payload.nonce);\r\n            this.setCreditCardBin(payload.details.bin);\r\n\r\n            // place order on success validation\r\n            self.validatorManager.validate(self, function () {\r\n                return self.setPaymentInformation();\r\n            }, function () {\r\n                self.isProcessing = false;\r\n                self.paymentMethodNonce = null;\r\n                self.creditCardBin = null;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        placeOrder: function () {\r\n            if (this.isProcessing) {\r\n                return false;\r\n            }\r\n            this.isProcessing = true;\r\n\r\n\r\n            braintree.tokenizeHostedFields();\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        getData: function () {\r\n            let data = this._super();\r\n\r\n            data['additional_data']['is_active_payment_token_enabler'] = true;\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        setPaymentInformation: function () {\r\n            if (additionalValidators.validate()) {\r\n                fullScreenLoader.startLoader();\r\n                $.when(\r\n                    setPaymentInformationAction(\r\n                        this.messageContainer,\r\n                        this.getData()\r\n                    )\r\n                ).done(this.done.bind(this))\r\n                    .fail(this.fail.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * {Function}\r\n         */\r\n        fail: function () {\r\n            fullScreenLoader.stopLoader();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {Function}\r\n         */\r\n        done: function () {\r\n            fullScreenLoader.stopLoader();\r\n            $('#multishipping-billing-form').trigger('submit');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/view/payment/method-renderer/multishipping/paypal.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'braintreeCheckoutPayPalAdapter',\r\n    'Magento_Checkout/js/model/quote',\r\n    'PayPal_Braintree/js/view/payment/method-renderer/paypal',\r\n    'PayPal_Braintree/js/helper/format-amount',\r\n    'Magento_Checkout/js/action/set-payment-information',\r\n    'Magento_Checkout/js/model/payment/additional-validators',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'mage/translate'\r\n], function (\r\n    $,\r\n    _,\r\n    Braintree,\r\n    quote,\r\n    Component,\r\n    formatAmount,\r\n    setPaymentInformationAction,\r\n    additionalValidators,\r\n    fullScreenLoader,\r\n    $t\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'PayPal_Braintree/payment/multishipping/paypal',\r\n            submitButtonSelector: '[id=\"parent-payment-continue\"]',\r\n            reviewButtonHtml: ''\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        initObservable: function () {\r\n            this.reviewButtonHtml = $(this.submitButtonSelector).html();\r\n            return this._super();\r\n        },\r\n\r\n        initClientConfig: function () {\r\n            this.clientConfig = _.extend(this.clientConfig, this.getPayPalConfig());\r\n            this.clientConfig.paypal.enableShippingAddress = false;\r\n\r\n            _.each(this.clientConfig, function (fn, name) {\r\n                if (typeof fn === 'function') {\r\n                    this.clientConfig[name] = fn.bind(this);\r\n                }\r\n            }, this);\r\n            this.clientConfig.buttonPayPalId = 'parent-payment-continue';\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            this.updateSubmitButtonHtml(isActive);\r\n            this._super(isActive);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        beforePlaceOrder: function (data) {\r\n            this._super(data);\r\n        },\r\n\r\n        /**\r\n         * Re-init PayPal Auth Flow\r\n         */\r\n        reInitPayPal: function () {\r\n            this.disableButton();\r\n            this.clientConfig.paypal.amount = formatAmount(this.grandTotalAmount);\r\n\r\n            if (!quote.isVirtual()) {\r\n                this.clientConfig.paypal.enableShippingAddress = false;\r\n                this.clientConfig.paypal.shippingAddressEditable = false;\r\n            }\r\n\r\n            Braintree.setConfig(this.clientConfig);\r\n\r\n            if (Braintree.getPayPalInstance()) {\r\n                Braintree.getPayPalInstance().teardown(function () {\r\n                    Braintree.setup();\r\n                });\r\n                Braintree.setPayPalInstance(null);\r\n            } else {\r\n                Braintree.setup();\r\n                this.enableButton();\r\n            }\r\n        },\r\n\r\n        loadPayPalButton: function (paypalCheckoutInstance, funding) {\r\n            if (funding === 'credit') {\r\n                Braintree.config.buttonId = this.getCreditButtonId();\r\n            } else if (funding === 'paylater') {\r\n                Braintree.config.buttonId = this.getPayLaterButtonId();\r\n            } else {\r\n                Braintree.config.buttonId = this.getPayPalButtonId();\r\n            }\r\n\r\n            let paypalPayment = Braintree.config.paypal,\r\n                onPaymentMethodReceived = Braintree.config.onPaymentMethodReceived,\r\n                style = {\r\n                    label: Braintree.getLabel(funding),\r\n                    color: Braintree.getColor(funding),\r\n                    shape: Braintree.getShape(funding)\r\n                },\r\n                payPalButtonId = Braintree.config.buttonId,\r\n                payPalButtonElement = $('#' + Braintree.config.buttonId),\r\n                events = Braintree.events,\r\n\r\n                button = window.paypal.Buttons({\r\n                    fundingSource: funding,\r\n                    env: Braintree.getEnvironment(),\r\n                    style: style,\r\n                    commit: true,\r\n                    locale: Braintree.config.paypal.locale,\r\n\r\n                    createOrder: function () {\r\n                        return paypalCheckoutInstance.createPayment(paypalPayment);\r\n                    },\r\n\r\n                    onCancel: function (data) {\r\n                        console.log('checkout.js payment cancelled', JSON.stringify(data, 0, 2));\r\n\r\n                        if (typeof events.onCancel === 'function') {\r\n                            events.onCancel();\r\n                        }\r\n                    },\r\n\r\n                    onError: function (err) {\r\n                        let error = 'PayPal Checkout could not be initialized. Please contact the store owner.';\r\n\r\n                        Braintree.showError($t(error));\r\n                        Braintree.config.paypalInstance = null;\r\n                        console.error('Paypal checkout.js error', err);\r\n\r\n                        if (typeof events.onError === 'function') {\r\n                            events.onError(err);\r\n                        }\r\n                    },\r\n\r\n                    onClick: function (data) {\r\n                    // To check term & conditions input checked - validate additional validators.\r\n                        if (!additionalValidators.validate()) {\r\n                            return false;\r\n                        }\r\n\r\n                        if (typeof events.onClick === 'function') {\r\n                            events.onClick(data);\r\n                        }\r\n                    },\r\n\r\n                    onApprove: function (data) {\r\n                        return paypalCheckoutInstance.tokenizePayment(data)\r\n                            .then(function (payload) {\r\n                                onPaymentMethodReceived(payload);\r\n                            });\r\n                    }\r\n                });\r\n\r\n            payPalButtonElement.html('');\r\n\r\n            // Render\r\n            Braintree.config.paypalInstance = paypalCheckoutInstance;\r\n\r\n            if (button.isEligible() && payPalButtonElement.length) {\r\n                button.render('#' + payPalButtonId).then(function () {\r\n                    Braintree.enableButton();\r\n                    if (typeof Braintree.config.onPaymentMethodError === 'function') {\r\n                        Braintree.config.onPaymentMethodError();\r\n                    }\r\n                }).then(function (data) {\r\n                    if (typeof events.onRender === 'function') {\r\n                        events.onRender(data);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get configuration for PayPal\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getPayPalConfig: function () {\r\n            let totals = quote.totals(),\r\n                config = {};\r\n\r\n            config.paypal = {\r\n                flow: 'checkout',\r\n                amount: formatAmount(this.grandTotalAmount),\r\n                currency: totals['base_currency_code'],\r\n                locale: this.getLocale(),\r\n                requestBillingAgreement: true,\r\n\r\n                /**\r\n                 * Triggers on any Braintree error\r\n                 */\r\n                onError: function () {\r\n                    this.paymentMethodNonce = null;\r\n                },\r\n\r\n                /**\r\n                 * Triggers if browser doesn't support PayPal Checkout\r\n                 */\r\n                onUnsupported: function () {\r\n                    this.paymentMethodNonce = null;\r\n                }\r\n            };\r\n\r\n            if (!quote.isVirtual()) {\r\n                config.paypal.enableShippingAddress = false;\r\n                config.paypal.shippingAddressEditable = false;\r\n            }\r\n\r\n            if (this.getMerchantName()) {\r\n                config.paypal.displayName = this.getMerchantName();\r\n            }\r\n\r\n            return config;\r\n        },\r\n\r\n        /**\r\n         * Get shipping address\r\n         *\r\n         * @returns {{}}\r\n         */\r\n        getShippingAddress: function () {\r\n            return {};\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        getData: function () {\r\n            let data = this._super();\r\n\r\n            data['additional_data']['is_active_payment_token_enabler'] = true;\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        isActiveVault: function () {\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Checks if payment method nonce is already received.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isPaymentMethodNonceReceived: function () {\r\n            return this.paymentMethodNonce !== null;\r\n        },\r\n\r\n        /**\r\n         * Update submit button on multi-addresses checkout billing form.\r\n         *\r\n         * @param {Boolean} isActive\r\n         */\r\n        updateSubmitButtonHtml: function (isActive) {\r\n            $(this.submitButtonSelector).removeClass('primary');\r\n            if (this.isPaymentMethodNonceReceived() || !isActive) {\r\n                $(this.submitButtonSelector).addClass('primary');\r\n                $(this.submitButtonSelector).html(this.reviewButtonHtml);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        placeOrder: function () {\r\n            if (!this.isPaymentMethodNonceReceived()) {\r\n                this.payWithPayPal();\r\n            } else {\r\n                fullScreenLoader.startLoader();\r\n\r\n                $.when(\r\n                    setPaymentInformationAction(\r\n                        this.messageContainer,\r\n                        this.getData()\r\n                    )\r\n                ).done(this.done.bind(this))\r\n                    .fail(this.fail.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * {Function}\r\n         */\r\n        fail: function () {\r\n            fullScreenLoader.stopLoader();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {Function}\r\n         */\r\n        done: function () {\r\n            fullScreenLoader.stopLoader();\r\n            $('#multishipping-billing-form').trigger('submit');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","requirejs/domReady.js":"/**\r\n * @license RequireJS domReady 2.0.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/requirejs/domReady for details\r\n */\r\n/*jslint */\r\n/*global require: false, define: false, requirejs: false,\r\n  window: false, clearInterval: false, document: false,\r\n  self: false, setInterval: false */\r\n\r\n\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    var isTop, testDiv, scrollIntervalId,\r\n        isBrowser = typeof window !== \"undefined\" && window.document,\r\n        isPageLoaded = !isBrowser,\r\n        doc = isBrowser ? document : null,\r\n        readyCalls = [];\r\n\r\n    function runCallbacks(callbacks) {\r\n        var i;\r\n        for (i = 0; i < callbacks.length; i += 1) {\r\n            callbacks[i](doc);\r\n        }\r\n    }\r\n\r\n    function callReady() {\r\n        var callbacks = readyCalls;\r\n\r\n        if (isPageLoaded) {\r\n            //Call the DOM ready callbacks\r\n            if (callbacks.length) {\r\n                readyCalls = [];\r\n                runCallbacks(callbacks);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the page as loaded.\r\n     */\r\n    function pageLoaded() {\r\n        if (!isPageLoaded) {\r\n            isPageLoaded = true;\r\n            if (scrollIntervalId) {\r\n                clearInterval(scrollIntervalId);\r\n            }\r\n\r\n            callReady();\r\n        }\r\n    }\r\n\r\n    if (isBrowser) {\r\n        if (document.addEventListener) {\r\n            //Standards. Hooray! Assumption here that if standards based,\r\n            //it knows about DOMContentLoaded.\r\n            document.addEventListener(\"DOMContentLoaded\", pageLoaded, false);\r\n            window.addEventListener(\"load\", pageLoaded, false);\r\n        } else if (window.attachEvent) {\r\n            window.attachEvent(\"onload\", pageLoaded);\r\n\r\n            testDiv = document.createElement('div');\r\n            try {\r\n                isTop = window.frameElement === null;\r\n            } catch (e) {}\r\n\r\n            //DOMContentLoaded approximation that uses a doScroll, as found by\r\n            //Diego Perini: http://javascript.nwbox.com/IEContentLoaded/,\r\n            //but modified by other contributors, including jdalton\r\n            if (testDiv.doScroll && isTop && window.external) {\r\n                scrollIntervalId = setInterval(function () {\r\n                    try {\r\n                        testDiv.doScroll();\r\n                        pageLoaded();\r\n                    } catch (e) {}\r\n                }, 30);\r\n            }\r\n        }\r\n\r\n        //Check if document is no longer loading, and if so, just trigger page load\r\n        //listeners. Latest webkit browsers also use \"interactive\", and\r\n        //will fire the onDOMContentLoaded before \"interactive\" but not after\r\n        //entering \"interactive\" or \"complete\". More details:\r\n        //http://dev.w3.org/html5/spec/the-end.html#the-end\r\n        //http://stackoverflow.com/questions/3665561/document-readystate-of-interactive-vs-ondomcontentloaded\r\n        //Hmm, this is more complicated on further use, see \"firing too early\"\r\n        //bug: https://github.com/requirejs/domReady/issues/1\r\n        //so removing the || document.readyState === \"interactive\" test.\r\n        //There is still a window.onload binding that should get fired if\r\n        //DOMContentLoaded is missed.\r\n        if (document.readyState !== \"loading\") {\r\n            // Handle it asynchronously to allow scripts the opportunity to delay ready\r\n            setTimeout(pageLoaded);\r\n        }\r\n    }\r\n\r\n    /** START OF PUBLIC API **/\r\n\r\n    /**\r\n     * Registers a callback for DOM ready. If DOM is already ready, the\r\n     * callback is called immediately.\r\n     * @param {Function} callback\r\n     */\r\n    function domReady(callback) {\r\n        if (isPageLoaded) {\r\n            callback(doc);\r\n        } else {\r\n            readyCalls.push(callback);\r\n        }\r\n        return domReady;\r\n    }\r\n\r\n    domReady.version = '2.0.1';\r\n\r\n    /**\r\n     * Loader Plugin API method\r\n     */\r\n    domReady.load = function (name, req, onLoad, config) {\r\n        if (config.isBuild) {\r\n            onLoad(null);\r\n        } else {\r\n            domReady(onLoad);\r\n        }\r\n    };\r\n\r\n    /** END OF PUBLIC API **/\r\n\r\n    return domReady;\r\n});\r\n","Vendor_Check/js/postal-code.js":"define('Vendor_Check/js/postal-code', [\r\n    'jquery',\r\n    'mage/url',\r\n    'Magento_Checkout/js/model/quote'\r\n], function ($, urlBuilder, quote) {\r\n    'use strict';\r\n    console.log(\"Postal Code script loaded\");\r\n\r\n    return function (target) {\r\n        return target.extend({\r\n            initialize: function () {\r\n                this._super();\r\n                \r\n                this.waitForElements();\r\n\r\n                return this;\r\n            },\r\n\r\n            waitForElements: function () {\r\n                var self = this;\r\n                var intervalId = setInterval(function () {\r\n                    var countrySelect = $('[name=\"country_id\"]');\r\n                    var regionSelect = $('[name=\"region_id\"]');\r\n                    var postalCodeSelect = $('[name=\"custom_postcode\"]'); // Use custom_postcode for dropdown\r\n\r\n                    if (countrySelect.length && regionSelect.length && postalCodeSelect.length) {\r\n                        console.log('Country Select Element:', countrySelect);\r\n                        console.log('Region Select Element:', regionSelect);\r\n                        console.log('Postal Code Select Element:', postalCodeSelect);\r\n\r\n                        countrySelect.on('change', self.handleCountryChange.bind(self));\r\n                        regionSelect.on('change', self.handleCityChange.bind(self));\r\n\r\n                        clearInterval(intervalId); // Stop checking once elements are found\r\n                    } else {\r\n                        console.log(\"Country, region or postal code select elements not yet available.\");\r\n                    }\r\n                }, 500); \r\n            },\r\n\r\n            handleCountryChange: function (event) {\r\n                var selectedCountryId = $(event.target).val();\r\n                console.log(\"Selected country:\", selectedCountryId);\r\n\r\n                this.clearPostalCodes();\r\n                $('[name=\"region_id\"]').val('');\r\n            },\r\n\r\n            handleCityChange: function (event) {\r\n                var selectedRegionId = $(event.target).val();\r\n                var selectedCountryId = $('[name=\"country_id\"]').val();\r\n                console.log(\"Selected region:\", selectedRegionId);\r\n\r\n                if (selectedRegionId && selectedCountryId) {\r\n                    this.updatePostalCodes(selectedRegionId);\r\n                } else {\r\n                    this.clearPostalCodes();\r\n                }\r\n            },\r\n\r\n            updatePostalCodes: function (regionId) {\r\n                var self = this;\r\n\r\n                if (regionId) {\r\n                    console.log(\"Fetching postal codes for region:\", regionId);\r\n                    var serviceUrl = urlBuilder.build('check/city/getPostalCodes?region_id=' + regionId);\r\n\r\n                    $.getJSON(serviceUrl, function (data) {\r\n                        console.log(\"API response:\", data);\r\n                        if (Array.isArray(data.postal_codes)) {\r\n                            var postalCodeSelect = $('[name=\"custom_postcode\"]');\r\n                            postalCodeSelect.empty();\r\n                            postalCodeSelect.append('<option value=\"\">Please select a postal code</option>');\r\n                            $.each(data.postal_codes, function (index, postalCode) {\r\n                                postalCodeSelect.append('<option value=\"' + postalCode + '\">' + postalCode + '</option>');\r\n                            });\r\n                        } else {\r\n                            console.log('Invalid data format received from the server.');\r\n                        }\r\n                    }).fail(function () {\r\n                        console.log('AJAX request failed.');\r\n                    });\r\n                }\r\n            },\r\n\r\n            clearPostalCodes: function () {\r\n                var postalCodeSelect = $('[name=\"custom_postcode\"]'); \r\n                postalCodeSelect.empty();\r\n                postalCodeSelect.append('<option value=\"\">Please select a postal code</option>');\r\n            }\r\n        });\r\n    };\r\n});\r\n","Vendor_MegaMenu/js/mega-menu.js":"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n\r\n$(document).ready(function() {\r\n    $('.navigation > ul > li').hover(\r\n        function() {\r\n            $(this).find('.mega-menu').stop(true, true).slideDown(300).css('display', 'block');\r\n        }, function() {\r\n            $(this).find('.mega-menu').stop(true, true).slideUp(300);\r\n        }\r\n    );\r\n\r\n    $('.mega-menu-col').hover(\r\n        function() {\r\n            $(this).find('.subcategory-products').stop(true, true).slideDown(300).css('display', 'block');\r\n        }, function() {\r\n            $(this).find('.subcategory-products').stop(true, true).slideUp(300);\r\n        }\r\n    );\r\n});","vimeo/player.js":"/*! @vimeo/player v2.16.4 | (c) 2022 Vimeo | MIT License | https://github.com/vimeo/player.js */\r\n(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n  typeof define === 'function' && define.amd ? define(factory) :\r\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.Vimeo = global.Vimeo || {}, global.Vimeo.Player = factory()));\r\n}(this, (function () { 'use strict';\r\n\r\n  function _classCallCheck(instance, Constructor) {\r\n    if (!(instance instanceof Constructor)) {\r\n      throw new TypeError(\"Cannot call a class as a function\");\r\n    }\r\n  }\r\n\r\n  function _defineProperties(target, props) {\r\n    for (var i = 0; i < props.length; i++) {\r\n      var descriptor = props[i];\r\n      descriptor.enumerable = descriptor.enumerable || false;\r\n      descriptor.configurable = true;\r\n      if (\"value\" in descriptor) descriptor.writable = true;\r\n      Object.defineProperty(target, descriptor.key, descriptor);\r\n    }\r\n  }\r\n\r\n  function _createClass(Constructor, protoProps, staticProps) {\r\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\r\n    if (staticProps) _defineProperties(Constructor, staticProps);\r\n    return Constructor;\r\n  }\r\n\r\n  /**\r\n   * @module lib/functions\r\n   */\r\n\r\n  /**\r\n   * Check to see this is a node environment.\r\n   * @type {Boolean}\r\n   */\r\n\r\n  /* global global */\r\n  var isNode = typeof global !== 'undefined' && {}.toString.call(global) === '[object global]';\r\n  /**\r\n   * Get the name of the method for a given getter or setter.\r\n   *\r\n   * @param {string} prop The name of the property.\r\n   * @param {string} type Either \u201cget\u201d or \u201cset\u201d.\r\n   * @return {string}\r\n   */\r\n\r\n  function getMethodName(prop, type) {\r\n    if (prop.indexOf(type.toLowerCase()) === 0) {\r\n      return prop;\r\n    }\r\n\r\n    return \"\".concat(type.toLowerCase()).concat(prop.substr(0, 1).toUpperCase()).concat(prop.substr(1));\r\n  }\r\n  /**\r\n   * Check to see if the object is a DOM Element.\r\n   *\r\n   * @param {*} element The object to check.\r\n   * @return {boolean}\r\n   */\r\n\r\n  function isDomElement(element) {\r\n    return Boolean(element && element.nodeType === 1 && 'nodeName' in element && element.ownerDocument && element.ownerDocument.defaultView);\r\n  }\r\n  /**\r\n   * Check to see whether the value is a number.\r\n   *\r\n   * @see http://dl.dropboxusercontent.com/u/35146/js/tests/isNumber.html\r\n   * @param {*} value The value to check.\r\n   * @param {boolean} integer Check if the value is an integer.\r\n   * @return {boolean}\r\n   */\r\n\r\n  function isInteger(value) {\r\n    // eslint-disable-next-line eqeqeq\r\n    return !isNaN(parseFloat(value)) && isFinite(value) && Math.floor(value) == value;\r\n  }\r\n  /**\r\n   * Check to see if the URL is a Vimeo url.\r\n   *\r\n   * @param {string} url The url string.\r\n   * @return {boolean}\r\n   */\r\n\r\n  function isVimeoUrl(url) {\r\n    return /^(https?:)?\\/\\/((player|www)\\.)?vimeo\\.com(?=$|\\/)/.test(url);\r\n  }\r\n  /**\r\n   * Get the Vimeo URL from an element.\r\n   * The element must have either a data-vimeo-id or data-vimeo-url attribute.\r\n   *\r\n   * @param {object} oEmbedParameters The oEmbed parameters.\r\n   * @return {string}\r\n   */\r\n\r\n  function getVimeoUrl() {\r\n    var oEmbedParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    var id = oEmbedParameters.id;\r\n    var url = oEmbedParameters.url;\r\n    var idOrUrl = id || url;\r\n\r\n    if (!idOrUrl) {\r\n      throw new Error('An id or url must be passed, either in an options object or as a data-vimeo-id or data-vimeo-url attribute.');\r\n    }\r\n\r\n    if (isInteger(idOrUrl)) {\r\n      return \"https://vimeo.com/\".concat(idOrUrl);\r\n    }\r\n\r\n    if (isVimeoUrl(idOrUrl)) {\r\n      return idOrUrl.replace('http:', 'https:');\r\n    }\r\n\r\n    if (id) {\r\n      throw new TypeError(\"\\u201C\".concat(id, \"\\u201D is not a valid video id.\"));\r\n    }\r\n\r\n    throw new TypeError(\"\\u201C\".concat(idOrUrl, \"\\u201D is not a vimeo.com url.\"));\r\n  }\r\n\r\n  var arrayIndexOfSupport = typeof Array.prototype.indexOf !== 'undefined';\r\n  var postMessageSupport = typeof window !== 'undefined' && typeof window.postMessage !== 'undefined';\r\n\r\n  if (!isNode && (!arrayIndexOfSupport || !postMessageSupport)) {\r\n    throw new Error('Sorry, the Vimeo Player API is not available in this browser.');\r\n  }\r\n\r\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\r\n\r\n  function createCommonjsModule(fn, module) {\r\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\r\n  }\r\n\r\n  /*!\r\n   * weakmap-polyfill v2.0.1 - ECMAScript6 WeakMap polyfill\r\n   * https://github.com/polygonplanet/weakmap-polyfill\r\n   * Copyright (c) 2015-2020 Polygon Planet <polygon.planet.aqua@gmail.com>\r\n   * @license MIT\r\n   */\r\n  (function (self) {\r\n\r\n    if (self.WeakMap) {\r\n      return;\r\n    }\r\n\r\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n    var defineProperty = function (object, name, value) {\r\n      if (Object.defineProperty) {\r\n        Object.defineProperty(object, name, {\r\n          configurable: true,\r\n          writable: true,\r\n          value: value\r\n        });\r\n      } else {\r\n        object[name] = value;\r\n      }\r\n    };\r\n\r\n    self.WeakMap = function () {\r\n      // ECMA-262 23.3 WeakMap Objects\r\n      function WeakMap() {\r\n        if (this === void 0) {\r\n          throw new TypeError(\"Constructor WeakMap requires 'new'\");\r\n        }\r\n\r\n        defineProperty(this, '_id', genId('_WeakMap')); // ECMA-262 23.3.1.1 WeakMap([iterable])\r\n\r\n        if (arguments.length > 0) {\r\n          // Currently, WeakMap `iterable` argument is not supported\r\n          throw new TypeError('WeakMap iterable is not supported');\r\n        }\r\n      } // ECMA-262 23.3.3.2 WeakMap.prototype.delete(key)\r\n\r\n\r\n      defineProperty(WeakMap.prototype, 'delete', function (key) {\r\n        checkInstance(this, 'delete');\r\n\r\n        if (!isObject(key)) {\r\n          return false;\r\n        }\r\n\r\n        var entry = key[this._id];\r\n\r\n        if (entry && entry[0] === key) {\r\n          delete key[this._id];\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      }); // ECMA-262 23.3.3.3 WeakMap.prototype.get(key)\r\n\r\n      defineProperty(WeakMap.prototype, 'get', function (key) {\r\n        checkInstance(this, 'get');\r\n\r\n        if (!isObject(key)) {\r\n          return void 0;\r\n        }\r\n\r\n        var entry = key[this._id];\r\n\r\n        if (entry && entry[0] === key) {\r\n          return entry[1];\r\n        }\r\n\r\n        return void 0;\r\n      }); // ECMA-262 23.3.3.4 WeakMap.prototype.has(key)\r\n\r\n      defineProperty(WeakMap.prototype, 'has', function (key) {\r\n        checkInstance(this, 'has');\r\n\r\n        if (!isObject(key)) {\r\n          return false;\r\n        }\r\n\r\n        var entry = key[this._id];\r\n\r\n        if (entry && entry[0] === key) {\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      }); // ECMA-262 23.3.3.5 WeakMap.prototype.set(key, value)\r\n\r\n      defineProperty(WeakMap.prototype, 'set', function (key, value) {\r\n        checkInstance(this, 'set');\r\n\r\n        if (!isObject(key)) {\r\n          throw new TypeError('Invalid value used as weak map key');\r\n        }\r\n\r\n        var entry = key[this._id];\r\n\r\n        if (entry && entry[0] === key) {\r\n          entry[1] = value;\r\n          return this;\r\n        }\r\n\r\n        defineProperty(key, this._id, [key, value]);\r\n        return this;\r\n      });\r\n\r\n      function checkInstance(x, methodName) {\r\n        if (!isObject(x) || !hasOwnProperty.call(x, '_id')) {\r\n          throw new TypeError(methodName + ' method called on incompatible receiver ' + typeof x);\r\n        }\r\n      }\r\n\r\n      function genId(prefix) {\r\n        return prefix + '_' + rand() + '.' + rand();\r\n      }\r\n\r\n      function rand() {\r\n        return Math.random().toString().substring(2);\r\n      }\r\n\r\n      defineProperty(WeakMap, '_polyfill', true);\r\n      return WeakMap;\r\n    }();\r\n\r\n    function isObject(x) {\r\n      return Object(x) === x;\r\n    }\r\n  })(typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : commonjsGlobal);\r\n\r\n  var npo_src = createCommonjsModule(function (module) {\r\n  /*! Native Promise Only\r\n      v0.8.1 (c) Kyle Simpson\r\n      MIT License: http://getify.mit-license.org\r\n  */\r\n  (function UMD(name, context, definition) {\r\n    // special form of UMD for polyfilling across evironments\r\n    context[name] = context[name] || definition();\r\n\r\n    if (module.exports) {\r\n      module.exports = context[name];\r\n    }\r\n  })(\"Promise\", typeof commonjsGlobal != \"undefined\" ? commonjsGlobal : commonjsGlobal, function DEF() {\r\n\r\n    var builtInProp,\r\n        cycle,\r\n        scheduling_queue,\r\n        ToString = Object.prototype.toString,\r\n        timer = typeof setImmediate != \"undefined\" ? function timer(fn) {\r\n      return setImmediate(fn);\r\n    } : setTimeout; // dammit, IE8.\r\n\r\n    try {\r\n      Object.defineProperty({}, \"x\", {});\r\n\r\n      builtInProp = function builtInProp(obj, name, val, config) {\r\n        return Object.defineProperty(obj, name, {\r\n          value: val,\r\n          writable: true,\r\n          configurable: config !== false\r\n        });\r\n      };\r\n    } catch (err) {\r\n      builtInProp = function builtInProp(obj, name, val) {\r\n        obj[name] = val;\r\n        return obj;\r\n      };\r\n    } // Note: using a queue instead of array for efficiency\r\n\r\n\r\n    scheduling_queue = function Queue() {\r\n      var first, last, item;\r\n\r\n      function Item(fn, self) {\r\n        this.fn = fn;\r\n        this.self = self;\r\n        this.next = void 0;\r\n      }\r\n\r\n      return {\r\n        add: function add(fn, self) {\r\n          item = new Item(fn, self);\r\n\r\n          if (last) {\r\n            last.next = item;\r\n          } else {\r\n            first = item;\r\n          }\r\n\r\n          last = item;\r\n          item = void 0;\r\n        },\r\n        drain: function drain() {\r\n          var f = first;\r\n          first = last = cycle = void 0;\r\n\r\n          while (f) {\r\n            f.fn.call(f.self);\r\n            f = f.next;\r\n          }\r\n        }\r\n      };\r\n    }();\r\n\r\n    function schedule(fn, self) {\r\n      scheduling_queue.add(fn, self);\r\n\r\n      if (!cycle) {\r\n        cycle = timer(scheduling_queue.drain);\r\n      }\r\n    } // promise duck typing\r\n\r\n\r\n    function isThenable(o) {\r\n      var _then,\r\n          o_type = typeof o;\r\n\r\n      if (o != null && (o_type == \"object\" || o_type == \"function\")) {\r\n        _then = o.then;\r\n      }\r\n\r\n      return typeof _then == \"function\" ? _then : false;\r\n    }\r\n\r\n    function notify() {\r\n      for (var i = 0; i < this.chain.length; i++) {\r\n        notifyIsolated(this, this.state === 1 ? this.chain[i].success : this.chain[i].failure, this.chain[i]);\r\n      }\r\n\r\n      this.chain.length = 0;\r\n    } // NOTE: This is a separate function to isolate\r\n    // the `try..catch` so that other code can be\r\n    // optimized better\r\n\r\n\r\n    function notifyIsolated(self, cb, chain) {\r\n      var ret, _then;\r\n\r\n      try {\r\n        if (cb === false) {\r\n          chain.reject(self.msg);\r\n        } else {\r\n          if (cb === true) {\r\n            ret = self.msg;\r\n          } else {\r\n            ret = cb.call(void 0, self.msg);\r\n          }\r\n\r\n          if (ret === chain.promise) {\r\n            chain.reject(TypeError(\"Promise-chain cycle\"));\r\n          } else if (_then = isThenable(ret)) {\r\n            _then.call(ret, chain.resolve, chain.reject);\r\n          } else {\r\n            chain.resolve(ret);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        chain.reject(err);\r\n      }\r\n    }\r\n\r\n    function resolve(msg) {\r\n      var _then,\r\n          self = this; // already triggered?\r\n\r\n\r\n      if (self.triggered) {\r\n        return;\r\n      }\r\n\r\n      self.triggered = true; // unwrap\r\n\r\n      if (self.def) {\r\n        self = self.def;\r\n      }\r\n\r\n      try {\r\n        if (_then = isThenable(msg)) {\r\n          schedule(function () {\r\n            var def_wrapper = new MakeDefWrapper(self);\r\n\r\n            try {\r\n              _then.call(msg, function $resolve$() {\r\n                resolve.apply(def_wrapper, arguments);\r\n              }, function $reject$() {\r\n                reject.apply(def_wrapper, arguments);\r\n              });\r\n            } catch (err) {\r\n              reject.call(def_wrapper, err);\r\n            }\r\n          });\r\n        } else {\r\n          self.msg = msg;\r\n          self.state = 1;\r\n\r\n          if (self.chain.length > 0) {\r\n            schedule(notify, self);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        reject.call(new MakeDefWrapper(self), err);\r\n      }\r\n    }\r\n\r\n    function reject(msg) {\r\n      var self = this; // already triggered?\r\n\r\n      if (self.triggered) {\r\n        return;\r\n      }\r\n\r\n      self.triggered = true; // unwrap\r\n\r\n      if (self.def) {\r\n        self = self.def;\r\n      }\r\n\r\n      self.msg = msg;\r\n      self.state = 2;\r\n\r\n      if (self.chain.length > 0) {\r\n        schedule(notify, self);\r\n      }\r\n    }\r\n\r\n    function iteratePromises(Constructor, arr, resolver, rejecter) {\r\n      for (var idx = 0; idx < arr.length; idx++) {\r\n        (function IIFE(idx) {\r\n          Constructor.resolve(arr[idx]).then(function $resolver$(msg) {\r\n            resolver(idx, msg);\r\n          }, rejecter);\r\n        })(idx);\r\n      }\r\n    }\r\n\r\n    function MakeDefWrapper(self) {\r\n      this.def = self;\r\n      this.triggered = false;\r\n    }\r\n\r\n    function MakeDef(self) {\r\n      this.promise = self;\r\n      this.state = 0;\r\n      this.triggered = false;\r\n      this.chain = [];\r\n      this.msg = void 0;\r\n    }\r\n\r\n    function Promise(executor) {\r\n      if (typeof executor != \"function\") {\r\n        throw TypeError(\"Not a function\");\r\n      }\r\n\r\n      if (this.__NPO__ !== 0) {\r\n        throw TypeError(\"Not a promise\");\r\n      } // instance shadowing the inherited \"brand\"\r\n      // to signal an already \"initialized\" promise\r\n\r\n\r\n      this.__NPO__ = 1;\r\n      var def = new MakeDef(this);\r\n\r\n      this[\"then\"] = function then(success, failure) {\r\n        var o = {\r\n          success: typeof success == \"function\" ? success : true,\r\n          failure: typeof failure == \"function\" ? failure : false\r\n        }; // Note: `then(..)` itself can be borrowed to be used against\r\n        // a different promise constructor for making the chained promise,\r\n        // by substituting a different `this` binding.\r\n\r\n        o.promise = new this.constructor(function extractChain(resolve, reject) {\r\n          if (typeof resolve != \"function\" || typeof reject != \"function\") {\r\n            throw TypeError(\"Not a function\");\r\n          }\r\n\r\n          o.resolve = resolve;\r\n          o.reject = reject;\r\n        });\r\n        def.chain.push(o);\r\n\r\n        if (def.state !== 0) {\r\n          schedule(notify, def);\r\n        }\r\n\r\n        return o.promise;\r\n      };\r\n\r\n      this[\"catch\"] = function $catch$(failure) {\r\n        return this.then(void 0, failure);\r\n      };\r\n\r\n      try {\r\n        executor.call(void 0, function publicResolve(msg) {\r\n          resolve.call(def, msg);\r\n        }, function publicReject(msg) {\r\n          reject.call(def, msg);\r\n        });\r\n      } catch (err) {\r\n        reject.call(def, err);\r\n      }\r\n    }\r\n\r\n    var PromisePrototype = builtInProp({}, \"constructor\", Promise,\r\n    /*configurable=*/\r\n    false); // Note: Android 4 cannot use `Object.defineProperty(..)` here\r\n\r\n    Promise.prototype = PromisePrototype; // built-in \"brand\" to signal an \"uninitialized\" promise\r\n\r\n    builtInProp(PromisePrototype, \"__NPO__\", 0,\r\n    /*configurable=*/\r\n    false);\r\n    builtInProp(Promise, \"resolve\", function Promise$resolve(msg) {\r\n      var Constructor = this; // spec mandated checks\r\n      // note: best \"isPromise\" check that's practical for now\r\n\r\n      if (msg && typeof msg == \"object\" && msg.__NPO__ === 1) {\r\n        return msg;\r\n      }\r\n\r\n      return new Constructor(function executor(resolve, reject) {\r\n        if (typeof resolve != \"function\" || typeof reject != \"function\") {\r\n          throw TypeError(\"Not a function\");\r\n        }\r\n\r\n        resolve(msg);\r\n      });\r\n    });\r\n    builtInProp(Promise, \"reject\", function Promise$reject(msg) {\r\n      return new this(function executor(resolve, reject) {\r\n        if (typeof resolve != \"function\" || typeof reject != \"function\") {\r\n          throw TypeError(\"Not a function\");\r\n        }\r\n\r\n        reject(msg);\r\n      });\r\n    });\r\n    builtInProp(Promise, \"all\", function Promise$all(arr) {\r\n      var Constructor = this; // spec mandated checks\r\n\r\n      if (ToString.call(arr) != \"[object Array]\") {\r\n        return Constructor.reject(TypeError(\"Not an array\"));\r\n      }\r\n\r\n      if (arr.length === 0) {\r\n        return Constructor.resolve([]);\r\n      }\r\n\r\n      return new Constructor(function executor(resolve, reject) {\r\n        if (typeof resolve != \"function\" || typeof reject != \"function\") {\r\n          throw TypeError(\"Not a function\");\r\n        }\r\n\r\n        var len = arr.length,\r\n            msgs = Array(len),\r\n            count = 0;\r\n        iteratePromises(Constructor, arr, function resolver(idx, msg) {\r\n          msgs[idx] = msg;\r\n\r\n          if (++count === len) {\r\n            resolve(msgs);\r\n          }\r\n        }, reject);\r\n      });\r\n    });\r\n    builtInProp(Promise, \"race\", function Promise$race(arr) {\r\n      var Constructor = this; // spec mandated checks\r\n\r\n      if (ToString.call(arr) != \"[object Array]\") {\r\n        return Constructor.reject(TypeError(\"Not an array\"));\r\n      }\r\n\r\n      return new Constructor(function executor(resolve, reject) {\r\n        if (typeof resolve != \"function\" || typeof reject != \"function\") {\r\n          throw TypeError(\"Not a function\");\r\n        }\r\n\r\n        iteratePromises(Constructor, arr, function resolver(idx, msg) {\r\n          resolve(msg);\r\n        }, reject);\r\n      });\r\n    });\r\n    return Promise;\r\n  });\r\n  });\r\n\r\n  /**\r\n   * @module lib/callbacks\r\n   */\r\n  var callbackMap = new WeakMap();\r\n  /**\r\n   * Store a callback for a method or event for a player.\r\n   *\r\n   * @param {Player} player The player object.\r\n   * @param {string} name The method or event name.\r\n   * @param {(function(this:Player, *): void|{resolve: function, reject: function})} callback\r\n   *        The callback to call or an object with resolve and reject functions for a promise.\r\n   * @return {void}\r\n   */\r\n\r\n  function storeCallback(player, name, callback) {\r\n    var playerCallbacks = callbackMap.get(player.element) || {};\r\n\r\n    if (!(name in playerCallbacks)) {\r\n      playerCallbacks[name] = [];\r\n    }\r\n\r\n    playerCallbacks[name].push(callback);\r\n    callbackMap.set(player.element, playerCallbacks);\r\n  }\r\n  /**\r\n   * Get the callbacks for a player and event or method.\r\n   *\r\n   * @param {Player} player The player object.\r\n   * @param {string} name The method or event name\r\n   * @return {function[]}\r\n   */\r\n\r\n  function getCallbacks(player, name) {\r\n    var playerCallbacks = callbackMap.get(player.element) || {};\r\n    return playerCallbacks[name] || [];\r\n  }\r\n  /**\r\n   * Remove a stored callback for a method or event for a player.\r\n   *\r\n   * @param {Player} player The player object.\r\n   * @param {string} name The method or event name\r\n   * @param {function} [callback] The specific callback to remove.\r\n   * @return {boolean} Was this the last callback?\r\n   */\r\n\r\n  function removeCallback(player, name, callback) {\r\n    var playerCallbacks = callbackMap.get(player.element) || {};\r\n\r\n    if (!playerCallbacks[name]) {\r\n      return true;\r\n    } // If no callback is passed, remove all callbacks for the event\r\n\r\n\r\n    if (!callback) {\r\n      playerCallbacks[name] = [];\r\n      callbackMap.set(player.element, playerCallbacks);\r\n      return true;\r\n    }\r\n\r\n    var index = playerCallbacks[name].indexOf(callback);\r\n\r\n    if (index !== -1) {\r\n      playerCallbacks[name].splice(index, 1);\r\n    }\r\n\r\n    callbackMap.set(player.element, playerCallbacks);\r\n    return playerCallbacks[name] && playerCallbacks[name].length === 0;\r\n  }\r\n  /**\r\n   * Return the first stored callback for a player and event or method.\r\n   *\r\n   * @param {Player} player The player object.\r\n   * @param {string} name The method or event name.\r\n   * @return {function} The callback, or false if there were none\r\n   */\r\n\r\n  function shiftCallbacks(player, name) {\r\n    var playerCallbacks = getCallbacks(player, name);\r\n\r\n    if (playerCallbacks.length < 1) {\r\n      return false;\r\n    }\r\n\r\n    var callback = playerCallbacks.shift();\r\n    removeCallback(player, name, callback);\r\n    return callback;\r\n  }\r\n  /**\r\n   * Move callbacks associated with an element to another element.\r\n   *\r\n   * @param {HTMLElement} oldElement The old element.\r\n   * @param {HTMLElement} newElement The new element.\r\n   * @return {void}\r\n   */\r\n\r\n  function swapCallbacks(oldElement, newElement) {\r\n    var playerCallbacks = callbackMap.get(oldElement);\r\n    callbackMap.set(newElement, playerCallbacks);\r\n    callbackMap.delete(oldElement);\r\n  }\r\n\r\n  /**\r\n   * @module lib/embed\r\n   */\r\n  var oEmbedParameters = ['autopause', 'autoplay', 'background', 'byline', 'color', 'controls', 'dnt', 'height', 'id', 'interactive_params', 'keyboard', 'loop', 'maxheight', 'maxwidth', 'muted', 'playsinline', 'portrait', 'responsive', 'speed', 'texttrack', 'title', 'transparent', 'url', 'width'];\r\n  /**\r\n   * Get the 'data-vimeo'-prefixed attributes from an element as an object.\r\n   *\r\n   * @param {HTMLElement} element The element.\r\n   * @param {Object} [defaults={}] The default values to use.\r\n   * @return {Object<string, string>}\r\n   */\r\n\r\n  function getOEmbedParameters(element) {\r\n    var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n    return oEmbedParameters.reduce(function (params, param) {\r\n      var value = element.getAttribute(\"data-vimeo-\".concat(param));\r\n\r\n      if (value || value === '') {\r\n        params[param] = value === '' ? 1 : value;\r\n      }\r\n\r\n      return params;\r\n    }, defaults);\r\n  }\r\n  /**\r\n   * Create an embed from oEmbed data inside an element.\r\n   *\r\n   * @param {object} data The oEmbed data.\r\n   * @param {HTMLElement} element The element to put the iframe in.\r\n   * @return {HTMLIFrameElement} The iframe embed.\r\n   */\r\n\r\n  function createEmbed(_ref, element) {\r\n    var html = _ref.html;\r\n\r\n    if (!element) {\r\n      throw new TypeError('An element must be provided');\r\n    }\r\n\r\n    if (element.getAttribute('data-vimeo-initialized') !== null) {\r\n      return element.querySelector('iframe');\r\n    }\r\n\r\n    var div = document.createElement('div');\r\n    div.innerHTML = html;\r\n    element.appendChild(div.firstChild);\r\n    element.setAttribute('data-vimeo-initialized', 'true');\r\n    return element.querySelector('iframe');\r\n  }\r\n  /**\r\n   * Make an oEmbed call for the specified URL.\r\n   *\r\n   * @param {string} videoUrl The vimeo.com url for the video.\r\n   * @param {Object} [params] Parameters to pass to oEmbed.\r\n   * @param {HTMLElement} element The element.\r\n   * @return {Promise}\r\n   */\r\n\r\n  function getOEmbedData(videoUrl) {\r\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n    var element = arguments.length > 2 ? arguments[2] : undefined;\r\n    return new Promise(function (resolve, reject) {\r\n      if (!isVimeoUrl(videoUrl)) {\r\n        throw new TypeError(\"\\u201C\".concat(videoUrl, \"\\u201D is not a vimeo.com url.\"));\r\n      }\r\n\r\n      var url = \"https://vimeo.com/api/oembed.json?url=\".concat(encodeURIComponent(videoUrl));\r\n\r\n      for (var param in params) {\r\n        if (params.hasOwnProperty(param)) {\r\n          url += \"&\".concat(param, \"=\").concat(encodeURIComponent(params[param]));\r\n        }\r\n      }\r\n\r\n      var xhr = 'XDomainRequest' in window ? new XDomainRequest() : new XMLHttpRequest();\r\n      xhr.open('GET', url, true);\r\n\r\n      xhr.onload = function () {\r\n        if (xhr.status === 404) {\r\n          reject(new Error(\"\\u201C\".concat(videoUrl, \"\\u201D was not found.\")));\r\n          return;\r\n        }\r\n\r\n        if (xhr.status === 403) {\r\n          reject(new Error(\"\\u201C\".concat(videoUrl, \"\\u201D is not embeddable.\")));\r\n          return;\r\n        }\r\n\r\n        try {\r\n          var json = JSON.parse(xhr.responseText); // Check api response for 403 on oembed\r\n\r\n          if (json.domain_status_code === 403) {\r\n            // We still want to create the embed to give users visual feedback\r\n            createEmbed(json, element);\r\n            reject(new Error(\"\\u201C\".concat(videoUrl, \"\\u201D is not embeddable.\")));\r\n            return;\r\n          }\r\n\r\n          resolve(json);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      };\r\n\r\n      xhr.onerror = function () {\r\n        var status = xhr.status ? \" (\".concat(xhr.status, \")\") : '';\r\n        reject(new Error(\"There was an error fetching the embed code from Vimeo\".concat(status, \".\")));\r\n      };\r\n\r\n      xhr.send();\r\n    });\r\n  }\r\n  /**\r\n   * Initialize all embeds within a specific element\r\n   *\r\n   * @param {HTMLElement} [parent=document] The parent element.\r\n   * @return {void}\r\n   */\r\n\r\n  function initializeEmbeds() {\r\n    var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\r\n    var elements = [].slice.call(parent.querySelectorAll('[data-vimeo-id], [data-vimeo-url]'));\r\n\r\n    var handleError = function handleError(error) {\r\n      if ('console' in window && console.error) {\r\n        console.error(\"There was an error creating an embed: \".concat(error));\r\n      }\r\n    };\r\n\r\n    elements.forEach(function (element) {\r\n      try {\r\n        // Skip any that have data-vimeo-defer\r\n        if (element.getAttribute('data-vimeo-defer') !== null) {\r\n          return;\r\n        }\r\n\r\n        var params = getOEmbedParameters(element);\r\n        var url = getVimeoUrl(params);\r\n        getOEmbedData(url, params, element).then(function (data) {\r\n          return createEmbed(data, element);\r\n        }).catch(handleError);\r\n      } catch (error) {\r\n        handleError(error);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Resize embeds when messaged by the player.\r\n   *\r\n   * @param {HTMLElement} [parent=document] The parent element.\r\n   * @return {void}\r\n   */\r\n\r\n  function resizeEmbeds() {\r\n    var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\r\n\r\n    // Prevent execution if users include the player.js script multiple times.\r\n    if (window.VimeoPlayerResizeEmbeds_) {\r\n      return;\r\n    }\r\n\r\n    window.VimeoPlayerResizeEmbeds_ = true;\r\n\r\n    var onMessage = function onMessage(event) {\r\n      if (!isVimeoUrl(event.origin)) {\r\n        return;\r\n      } // 'spacechange' is fired only on embeds with cards\r\n\r\n\r\n      if (!event.data || event.data.event !== 'spacechange') {\r\n        return;\r\n      }\r\n\r\n      var iframes = parent.querySelectorAll('iframe');\r\n\r\n      for (var i = 0; i < iframes.length; i++) {\r\n        if (iframes[i].contentWindow !== event.source) {\r\n          continue;\r\n        } // Change padding-bottom of the enclosing div to accommodate\r\n        // card carousel without distorting aspect ratio\r\n\r\n\r\n        var space = iframes[i].parentElement;\r\n        space.style.paddingBottom = \"\".concat(event.data.data[0].bottom, \"px\");\r\n        break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('message', onMessage);\r\n  }\r\n\r\n  /**\r\n   * @module lib/postmessage\r\n   */\r\n  /**\r\n   * Parse a message received from postMessage.\r\n   *\r\n   * @param {*} data The data received from postMessage.\r\n   * @return {object}\r\n   */\r\n\r\n  function parseMessageData(data) {\r\n    if (typeof data === 'string') {\r\n      try {\r\n        data = JSON.parse(data);\r\n      } catch (error) {\r\n        // If the message cannot be parsed, throw the error as a warning\r\n        console.warn(error);\r\n        return {};\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n  /**\r\n   * Post a message to the specified target.\r\n   *\r\n   * @param {Player} player The player object to use.\r\n   * @param {string} method The API method to call.\r\n   * @param {object} params The parameters to send to the player.\r\n   * @return {void}\r\n   */\r\n\r\n  function postMessage(player, method, params) {\r\n    if (!player.element.contentWindow || !player.element.contentWindow.postMessage) {\r\n      return;\r\n    }\r\n\r\n    var message = {\r\n      method: method\r\n    };\r\n\r\n    if (params !== undefined) {\r\n      message.value = params;\r\n    } // IE 8 and 9 do not support passing messages, so stringify them\r\n\r\n\r\n    var ieVersion = parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\\d+).*$/, '$1'));\r\n\r\n    if (ieVersion >= 8 && ieVersion < 10) {\r\n      message = JSON.stringify(message);\r\n    }\r\n\r\n    player.element.contentWindow.postMessage(message, player.origin);\r\n  }\r\n  /**\r\n   * Parse the data received from a message event.\r\n   *\r\n   * @param {Player} player The player that received the message.\r\n   * @param {(Object|string)} data The message data. Strings will be parsed into JSON.\r\n   * @return {void}\r\n   */\r\n\r\n  function processData(player, data) {\r\n    data = parseMessageData(data);\r\n    var callbacks = [];\r\n    var param;\r\n\r\n    if (data.event) {\r\n      if (data.event === 'error') {\r\n        var promises = getCallbacks(player, data.data.method);\r\n        promises.forEach(function (promise) {\r\n          var error = new Error(data.data.message);\r\n          error.name = data.data.name;\r\n          promise.reject(error);\r\n          removeCallback(player, data.data.method, promise);\r\n        });\r\n      }\r\n\r\n      callbacks = getCallbacks(player, \"event:\".concat(data.event));\r\n      param = data.data;\r\n    } else if (data.method) {\r\n      var callback = shiftCallbacks(player, data.method);\r\n\r\n      if (callback) {\r\n        callbacks.push(callback);\r\n        param = data.value;\r\n      }\r\n    }\r\n\r\n    callbacks.forEach(function (callback) {\r\n      try {\r\n        if (typeof callback === 'function') {\r\n          callback.call(player, param);\r\n          return;\r\n        }\r\n\r\n        callback.resolve(param);\r\n      } catch (e) {// empty\r\n      }\r\n    });\r\n  }\r\n\r\n  /* MIT License\r\n\r\n  Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\r\n\r\n  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\n  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n  Terms */\r\n  function initializeScreenfull() {\r\n    var fn = function () {\r\n      var val;\r\n      var fnMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'], // New WebKit\r\n      ['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'], // Old WebKit\r\n      ['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'], ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'], ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];\r\n      var i = 0;\r\n      var l = fnMap.length;\r\n      var ret = {};\r\n\r\n      for (; i < l; i++) {\r\n        val = fnMap[i];\r\n\r\n        if (val && val[1] in document) {\r\n          for (i = 0; i < val.length; i++) {\r\n            ret[fnMap[0][i]] = val[i];\r\n          }\r\n\r\n          return ret;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }();\r\n\r\n    var eventNameMap = {\r\n      fullscreenchange: fn.fullscreenchange,\r\n      fullscreenerror: fn.fullscreenerror\r\n    };\r\n    var screenfull = {\r\n      request: function request(element) {\r\n        return new Promise(function (resolve, reject) {\r\n          var onFullScreenEntered = function onFullScreenEntered() {\r\n            screenfull.off('fullscreenchange', onFullScreenEntered);\r\n            resolve();\r\n          };\r\n\r\n          screenfull.on('fullscreenchange', onFullScreenEntered);\r\n          element = element || document.documentElement;\r\n          var returnPromise = element[fn.requestFullscreen]();\r\n\r\n          if (returnPromise instanceof Promise) {\r\n            returnPromise.then(onFullScreenEntered).catch(reject);\r\n          }\r\n        });\r\n      },\r\n      exit: function exit() {\r\n        return new Promise(function (resolve, reject) {\r\n          if (!screenfull.isFullscreen) {\r\n            resolve();\r\n            return;\r\n          }\r\n\r\n          var onFullScreenExit = function onFullScreenExit() {\r\n            screenfull.off('fullscreenchange', onFullScreenExit);\r\n            resolve();\r\n          };\r\n\r\n          screenfull.on('fullscreenchange', onFullScreenExit);\r\n          var returnPromise = document[fn.exitFullscreen]();\r\n\r\n          if (returnPromise instanceof Promise) {\r\n            returnPromise.then(onFullScreenExit).catch(reject);\r\n          }\r\n        });\r\n      },\r\n      on: function on(event, callback) {\r\n        var eventName = eventNameMap[event];\r\n\r\n        if (eventName) {\r\n          document.addEventListener(eventName, callback);\r\n        }\r\n      },\r\n      off: function off(event, callback) {\r\n        var eventName = eventNameMap[event];\r\n\r\n        if (eventName) {\r\n          document.removeEventListener(eventName, callback);\r\n        }\r\n      }\r\n    };\r\n    Object.defineProperties(screenfull, {\r\n      isFullscreen: {\r\n        get: function get() {\r\n          return Boolean(document[fn.fullscreenElement]);\r\n        }\r\n      },\r\n      element: {\r\n        enumerable: true,\r\n        get: function get() {\r\n          return document[fn.fullscreenElement];\r\n        }\r\n      },\r\n      isEnabled: {\r\n        enumerable: true,\r\n        get: function get() {\r\n          // Coerce to boolean in case of old WebKit\r\n          return Boolean(document[fn.fullscreenEnabled]);\r\n        }\r\n      }\r\n    });\r\n    return screenfull;\r\n  }\r\n\r\n  var playerMap = new WeakMap();\r\n  var readyMap = new WeakMap();\r\n  var screenfull = {};\r\n\r\n  var Player = /*#__PURE__*/function () {\r\n    /**\r\n     * Create a Player.\r\n     *\r\n     * @param {(HTMLIFrameElement|HTMLElement|string|jQuery)} element A reference to the Vimeo\r\n     *        player iframe, and id, or a jQuery object.\r\n     * @param {object} [options] oEmbed parameters to use when creating an embed in the element.\r\n     * @return {Player}\r\n     */\r\n    function Player(element) {\r\n      var _this = this;\r\n\r\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n      _classCallCheck(this, Player);\r\n\r\n      /* global jQuery */\r\n      if (window.jQuery && element instanceof jQuery) {\r\n        if (element.length > 1 && window.console && console.warn) {\r\n          console.warn('A jQuery object with multiple elements was passed, using the first element.');\r\n        }\r\n\r\n        element = element[0];\r\n      } // Find an element by ID\r\n\r\n\r\n      if (typeof document !== 'undefined' && typeof element === 'string') {\r\n        element = document.getElementById(element);\r\n      } // Not an element!\r\n\r\n\r\n      if (!isDomElement(element)) {\r\n        throw new TypeError('You must pass either a valid element or a valid id.');\r\n      } // Already initialized an embed in this div, so grab the iframe\r\n\r\n\r\n      if (element.nodeName !== 'IFRAME') {\r\n        var iframe = element.querySelector('iframe');\r\n\r\n        if (iframe) {\r\n          element = iframe;\r\n        }\r\n      } // iframe url is not a Vimeo url\r\n\r\n\r\n      if (element.nodeName === 'IFRAME' && !isVimeoUrl(element.getAttribute('src') || '')) {\r\n        throw new Error('The player element passed isn\u2019t a Vimeo embed.');\r\n      } // If there is already a player object in the map, return that\r\n\r\n\r\n      if (playerMap.has(element)) {\r\n        return playerMap.get(element);\r\n      }\r\n\r\n      this._window = element.ownerDocument.defaultView;\r\n      this.element = element;\r\n      this.origin = '*';\r\n      var readyPromise = new npo_src(function (resolve, reject) {\r\n        _this._onMessage = function (event) {\r\n          if (!isVimeoUrl(event.origin) || _this.element.contentWindow !== event.source) {\r\n            return;\r\n          }\r\n\r\n          if (_this.origin === '*') {\r\n            _this.origin = event.origin;\r\n          }\r\n\r\n          var data = parseMessageData(event.data);\r\n          var isError = data && data.event === 'error';\r\n          var isReadyError = isError && data.data && data.data.method === 'ready';\r\n\r\n          if (isReadyError) {\r\n            var error = new Error(data.data.message);\r\n            error.name = data.data.name;\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          var isReadyEvent = data && data.event === 'ready';\r\n          var isPingResponse = data && data.method === 'ping';\r\n\r\n          if (isReadyEvent || isPingResponse) {\r\n            _this.element.setAttribute('data-ready', 'true');\r\n\r\n            resolve();\r\n            return;\r\n          }\r\n\r\n          processData(_this, data);\r\n        };\r\n\r\n        _this._window.addEventListener('message', _this._onMessage);\r\n\r\n        if (_this.element.nodeName !== 'IFRAME') {\r\n          var params = getOEmbedParameters(element, options);\r\n          var url = getVimeoUrl(params);\r\n          getOEmbedData(url, params, element).then(function (data) {\r\n            var iframe = createEmbed(data, element); // Overwrite element with the new iframe,\r\n            // but store reference to the original element\r\n\r\n            _this.element = iframe;\r\n            _this._originalElement = element;\r\n            swapCallbacks(element, iframe);\r\n            playerMap.set(_this.element, _this);\r\n            return data;\r\n          }).catch(reject);\r\n        }\r\n      }); // Store a copy of this Player in the map\r\n\r\n      readyMap.set(this, readyPromise);\r\n      playerMap.set(this.element, this); // Send a ping to the iframe so the ready promise will be resolved if\r\n      // the player is already ready.\r\n\r\n      if (this.element.nodeName === 'IFRAME') {\r\n        postMessage(this, 'ping');\r\n      }\r\n\r\n      if (screenfull.isEnabled) {\r\n        var exitFullscreen = function exitFullscreen() {\r\n          return screenfull.exit();\r\n        };\r\n\r\n        this.fullscreenchangeHandler = function () {\r\n          if (screenfull.isFullscreen) {\r\n            storeCallback(_this, 'event:exitFullscreen', exitFullscreen);\r\n          } else {\r\n            removeCallback(_this, 'event:exitFullscreen', exitFullscreen);\r\n          } // eslint-disable-next-line\r\n\r\n\r\n          _this.ready().then(function () {\r\n            postMessage(_this, 'fullscreenchange', screenfull.isFullscreen);\r\n          });\r\n        };\r\n\r\n        screenfull.on('fullscreenchange', this.fullscreenchangeHandler);\r\n      }\r\n\r\n      return this;\r\n    }\r\n    /**\r\n     * Get a promise for a method.\r\n     *\r\n     * @param {string} name The API method to call.\r\n     * @param {Object} [args={}] Arguments to send via postMessage.\r\n     * @return {Promise}\r\n     */\r\n\r\n\r\n    _createClass(Player, [{\r\n      key: \"callMethod\",\r\n      value: function callMethod(name) {\r\n        var _this2 = this;\r\n\r\n        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n        return new npo_src(function (resolve, reject) {\r\n          // We are storing the resolve/reject handlers to call later, so we\r\n          // can\u2019t return here.\r\n          // eslint-disable-next-line promise/always-return\r\n          return _this2.ready().then(function () {\r\n            storeCallback(_this2, name, {\r\n              resolve: resolve,\r\n              reject: reject\r\n            });\r\n            postMessage(_this2, name, args);\r\n          }).catch(reject);\r\n        });\r\n      }\r\n      /**\r\n       * Get a promise for the value of a player property.\r\n       *\r\n       * @param {string} name The property name\r\n       * @return {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"get\",\r\n      value: function get(name) {\r\n        var _this3 = this;\r\n\r\n        return new npo_src(function (resolve, reject) {\r\n          name = getMethodName(name, 'get'); // We are storing the resolve/reject handlers to call later, so we\r\n          // can\u2019t return here.\r\n          // eslint-disable-next-line promise/always-return\r\n\r\n          return _this3.ready().then(function () {\r\n            storeCallback(_this3, name, {\r\n              resolve: resolve,\r\n              reject: reject\r\n            });\r\n            postMessage(_this3, name);\r\n          }).catch(reject);\r\n        });\r\n      }\r\n      /**\r\n       * Get a promise for setting the value of a player property.\r\n       *\r\n       * @param {string} name The API method to call.\r\n       * @param {mixed} value The value to set.\r\n       * @return {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"set\",\r\n      value: function set(name, value) {\r\n        var _this4 = this;\r\n\r\n        return new npo_src(function (resolve, reject) {\r\n          name = getMethodName(name, 'set');\r\n\r\n          if (value === undefined || value === null) {\r\n            throw new TypeError('There must be a value to set.');\r\n          } // We are storing the resolve/reject handlers to call later, so we\r\n          // can\u2019t return here.\r\n          // eslint-disable-next-line promise/always-return\r\n\r\n\r\n          return _this4.ready().then(function () {\r\n            storeCallback(_this4, name, {\r\n              resolve: resolve,\r\n              reject: reject\r\n            });\r\n            postMessage(_this4, name, value);\r\n          }).catch(reject);\r\n        });\r\n      }\r\n      /**\r\n       * Add an event listener for the specified event. Will call the\r\n       * callback with a single parameter, `data`, that contains the data for\r\n       * that event.\r\n       *\r\n       * @param {string} eventName The name of the event.\r\n       * @param {function(*)} callback The function to call when the event fires.\r\n       * @return {void}\r\n       */\r\n\r\n    }, {\r\n      key: \"on\",\r\n      value: function on(eventName, callback) {\r\n        if (!eventName) {\r\n          throw new TypeError('You must pass an event name.');\r\n        }\r\n\r\n        if (!callback) {\r\n          throw new TypeError('You must pass a callback function.');\r\n        }\r\n\r\n        if (typeof callback !== 'function') {\r\n          throw new TypeError('The callback must be a function.');\r\n        }\r\n\r\n        var callbacks = getCallbacks(this, \"event:\".concat(eventName));\r\n\r\n        if (callbacks.length === 0) {\r\n          this.callMethod('addEventListener', eventName).catch(function () {// Ignore the error. There will be an error event fired that\r\n            // will trigger the error callback if they are listening.\r\n          });\r\n        }\r\n\r\n        storeCallback(this, \"event:\".concat(eventName), callback);\r\n      }\r\n      /**\r\n       * Remove an event listener for the specified event. Will remove all\r\n       * listeners for that event if a `callback` isn\u2019t passed, or only that\r\n       * specific callback if it is passed.\r\n       *\r\n       * @param {string} eventName The name of the event.\r\n       * @param {function} [callback] The specific callback to remove.\r\n       * @return {void}\r\n       */\r\n\r\n    }, {\r\n      key: \"off\",\r\n      value: function off(eventName, callback) {\r\n        if (!eventName) {\r\n          throw new TypeError('You must pass an event name.');\r\n        }\r\n\r\n        if (callback && typeof callback !== 'function') {\r\n          throw new TypeError('The callback must be a function.');\r\n        }\r\n\r\n        var lastCallback = removeCallback(this, \"event:\".concat(eventName), callback); // If there are no callbacks left, remove the listener\r\n\r\n        if (lastCallback) {\r\n          this.callMethod('removeEventListener', eventName).catch(function (e) {// Ignore the error. There will be an error event fired that\r\n            // will trigger the error callback if they are listening.\r\n          });\r\n        }\r\n      }\r\n      /**\r\n       * A promise to load a new video.\r\n       *\r\n       * @promise LoadVideoPromise\r\n       * @fulfill {number} The video with this id or url successfully loaded.\r\n       * @reject {TypeError} The id was not a number.\r\n       */\r\n\r\n      /**\r\n       * Load a new video into this embed. The promise will be resolved if\r\n       * the video is successfully loaded, or it will be rejected if it could\r\n       * not be loaded.\r\n       *\r\n       * @param {number|string|object} options The id of the video, the url of the video, or an object with embed options.\r\n       * @return {LoadVideoPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"loadVideo\",\r\n      value: function loadVideo(options) {\r\n        return this.callMethod('loadVideo', options);\r\n      }\r\n      /**\r\n       * A promise to perform an action when the Player is ready.\r\n       *\r\n       * @todo document errors\r\n       * @promise LoadVideoPromise\r\n       * @fulfill {void}\r\n       */\r\n\r\n      /**\r\n       * Trigger a function when the player iframe has initialized. You do not\r\n       * need to wait for `ready` to trigger to begin adding event listeners\r\n       * or calling other methods.\r\n       *\r\n       * @return {ReadyPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"ready\",\r\n      value: function ready() {\r\n        var readyPromise = readyMap.get(this) || new npo_src(function (resolve, reject) {\r\n          reject(new Error('Unknown player. Probably unloaded.'));\r\n        });\r\n        return npo_src.resolve(readyPromise);\r\n      }\r\n      /**\r\n       * A promise to add a cue point to the player.\r\n       *\r\n       * @promise AddCuePointPromise\r\n       * @fulfill {string} The id of the cue point to use for removeCuePoint.\r\n       * @reject {RangeError} the time was less than 0 or greater than the\r\n       *         video\u2019s duration.\r\n       * @reject {UnsupportedError} Cue points are not supported with the current\r\n       *         player or browser.\r\n       */\r\n\r\n      /**\r\n       * Add a cue point to the player.\r\n       *\r\n       * @param {number} time The time for the cue point.\r\n       * @param {object} [data] Arbitrary data to be returned with the cue point.\r\n       * @return {AddCuePointPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"addCuePoint\",\r\n      value: function addCuePoint(time) {\r\n        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n        return this.callMethod('addCuePoint', {\r\n          time: time,\r\n          data: data\r\n        });\r\n      }\r\n      /**\r\n       * A promise to remove a cue point from the player.\r\n       *\r\n       * @promise AddCuePointPromise\r\n       * @fulfill {string} The id of the cue point that was removed.\r\n       * @reject {InvalidCuePoint} The cue point with the specified id was not\r\n       *         found.\r\n       * @reject {UnsupportedError} Cue points are not supported with the current\r\n       *         player or browser.\r\n       */\r\n\r\n      /**\r\n       * Remove a cue point from the video.\r\n       *\r\n       * @param {string} id The id of the cue point to remove.\r\n       * @return {RemoveCuePointPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"removeCuePoint\",\r\n      value: function removeCuePoint(id) {\r\n        return this.callMethod('removeCuePoint', id);\r\n      }\r\n      /**\r\n       * A representation of a text track on a video.\r\n       *\r\n       * @typedef {Object} VimeoTextTrack\r\n       * @property {string} language The ISO language code.\r\n       * @property {string} kind The kind of track it is (captions or subtitles).\r\n       * @property {string} label The human\u2010readable label for the track.\r\n       */\r\n\r\n      /**\r\n       * A promise to enable a text track.\r\n       *\r\n       * @promise EnableTextTrackPromise\r\n       * @fulfill {VimeoTextTrack} The text track that was enabled.\r\n       * @reject {InvalidTrackLanguageError} No track was available with the\r\n       *         specified language.\r\n       * @reject {InvalidTrackError} No track was available with the specified\r\n       *         language and kind.\r\n       */\r\n\r\n      /**\r\n       * Enable the text track with the specified language, and optionally the\r\n       * specified kind (captions or subtitles).\r\n       *\r\n       * When set via the API, the track language will not change the viewer\u2019s\r\n       * stored preference.\r\n       *\r\n       * @param {string} language The two\u2010letter language code.\r\n       * @param {string} [kind] The kind of track to enable (captions or subtitles).\r\n       * @return {EnableTextTrackPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"enableTextTrack\",\r\n      value: function enableTextTrack(language, kind) {\r\n        if (!language) {\r\n          throw new TypeError('You must pass a language.');\r\n        }\r\n\r\n        return this.callMethod('enableTextTrack', {\r\n          language: language,\r\n          kind: kind\r\n        });\r\n      }\r\n      /**\r\n       * A promise to disable the active text track.\r\n       *\r\n       * @promise DisableTextTrackPromise\r\n       * @fulfill {void} The track was disabled.\r\n       */\r\n\r\n      /**\r\n       * Disable the currently-active text track.\r\n       *\r\n       * @return {DisableTextTrackPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"disableTextTrack\",\r\n      value: function disableTextTrack() {\r\n        return this.callMethod('disableTextTrack');\r\n      }\r\n      /**\r\n       * A promise to pause the video.\r\n       *\r\n       * @promise PausePromise\r\n       * @fulfill {void} The video was paused.\r\n       */\r\n\r\n      /**\r\n       * Pause the video if it\u2019s playing.\r\n       *\r\n       * @return {PausePromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"pause\",\r\n      value: function pause() {\r\n        return this.callMethod('pause');\r\n      }\r\n      /**\r\n       * A promise to play the video.\r\n       *\r\n       * @promise PlayPromise\r\n       * @fulfill {void} The video was played.\r\n       */\r\n\r\n      /**\r\n       * Play the video if it\u2019s paused. **Note:** on iOS and some other\r\n       * mobile devices, you cannot programmatically trigger play. Once the\r\n       * viewer has tapped on the play button in the player, however, you\r\n       * will be able to use this function.\r\n       *\r\n       * @return {PlayPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"play\",\r\n      value: function play() {\r\n        return this.callMethod('play');\r\n      }\r\n      /**\r\n       * Request that the player enters fullscreen.\r\n       * @return {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"requestFullscreen\",\r\n      value: function requestFullscreen() {\r\n        if (screenfull.isEnabled) {\r\n          return screenfull.request(this.element);\r\n        }\r\n\r\n        return this.callMethod('requestFullscreen');\r\n      }\r\n      /**\r\n       * Request that the player exits fullscreen.\r\n       * @return {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"exitFullscreen\",\r\n      value: function exitFullscreen() {\r\n        if (screenfull.isEnabled) {\r\n          return screenfull.exit();\r\n        }\r\n\r\n        return this.callMethod('exitFullscreen');\r\n      }\r\n      /**\r\n       * Returns true if the player is currently fullscreen.\r\n       * @return {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getFullscreen\",\r\n      value: function getFullscreen() {\r\n        if (screenfull.isEnabled) {\r\n          return npo_src.resolve(screenfull.isFullscreen);\r\n        }\r\n\r\n        return this.get('fullscreen');\r\n      }\r\n      /**\r\n       * Request that the player enters picture-in-picture.\r\n       * @return {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"requestPictureInPicture\",\r\n      value: function requestPictureInPicture() {\r\n        return this.callMethod('requestPictureInPicture');\r\n      }\r\n      /**\r\n       * Request that the player exits picture-in-picture.\r\n       * @return {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"exitPictureInPicture\",\r\n      value: function exitPictureInPicture() {\r\n        return this.callMethod('exitPictureInPicture');\r\n      }\r\n      /**\r\n       * Returns true if the player is currently picture-in-picture.\r\n       * @return {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getPictureInPicture\",\r\n      value: function getPictureInPicture() {\r\n        return this.get('pictureInPicture');\r\n      }\r\n      /**\r\n       * A promise to unload the video.\r\n       *\r\n       * @promise UnloadPromise\r\n       * @fulfill {void} The video was unloaded.\r\n       */\r\n\r\n      /**\r\n       * Return the player to its initial state.\r\n       *\r\n       * @return {UnloadPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"unload\",\r\n      value: function unload() {\r\n        return this.callMethod('unload');\r\n      }\r\n      /**\r\n       * Cleanup the player and remove it from the DOM\r\n       *\r\n       * It won't be usable and a new one should be constructed\r\n       *  in order to do any operations.\r\n       *\r\n       * @return {Promise}\r\n       */\r\n\r\n    }, {\r\n      key: \"destroy\",\r\n      value: function destroy() {\r\n        var _this5 = this;\r\n\r\n        return new npo_src(function (resolve) {\r\n          readyMap.delete(_this5);\r\n          playerMap.delete(_this5.element);\r\n\r\n          if (_this5._originalElement) {\r\n            playerMap.delete(_this5._originalElement);\r\n\r\n            _this5._originalElement.removeAttribute('data-vimeo-initialized');\r\n          }\r\n\r\n          if (_this5.element && _this5.element.nodeName === 'IFRAME' && _this5.element.parentNode) {\r\n            // If we've added an additional wrapper div, remove that from the DOM.\r\n            // If not, just remove the iframe element.\r\n            if (_this5.element.parentNode.parentNode && _this5._originalElement && _this5._originalElement !== _this5.element.parentNode) {\r\n              _this5.element.parentNode.parentNode.removeChild(_this5.element.parentNode);\r\n            } else {\r\n              _this5.element.parentNode.removeChild(_this5.element);\r\n            }\r\n          } // If the clip is private there is a case where the element stays the\r\n          // div element. Destroy should reset the div and remove the iframe child.\r\n\r\n\r\n          if (_this5.element && _this5.element.nodeName === 'DIV' && _this5.element.parentNode) {\r\n            _this5.element.removeAttribute('data-vimeo-initialized');\r\n\r\n            var iframe = _this5.element.querySelector('iframe');\r\n\r\n            if (iframe && iframe.parentNode) {\r\n              // If we've added an additional wrapper div, remove that from the DOM.\r\n              // If not, just remove the iframe element.\r\n              if (iframe.parentNode.parentNode && _this5._originalElement && _this5._originalElement !== iframe.parentNode) {\r\n                iframe.parentNode.parentNode.removeChild(iframe.parentNode);\r\n              } else {\r\n                iframe.parentNode.removeChild(iframe);\r\n              }\r\n            }\r\n          }\r\n\r\n          _this5._window.removeEventListener('message', _this5._onMessage);\r\n\r\n          if (screenfull.isEnabled) {\r\n            screenfull.off('fullscreenchange', _this5.fullscreenchangeHandler);\r\n          }\r\n\r\n          resolve();\r\n        });\r\n      }\r\n      /**\r\n       * A promise to get the autopause behavior of the video.\r\n       *\r\n       * @promise GetAutopausePromise\r\n       * @fulfill {boolean} Whether autopause is turned on or off.\r\n       * @reject {UnsupportedError} Autopause is not supported with the current\r\n       *         player or browser.\r\n       */\r\n\r\n      /**\r\n       * Get the autopause behavior for this player.\r\n       *\r\n       * @return {GetAutopausePromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getAutopause\",\r\n      value: function getAutopause() {\r\n        return this.get('autopause');\r\n      }\r\n      /**\r\n       * A promise to set the autopause behavior of the video.\r\n       *\r\n       * @promise SetAutopausePromise\r\n       * @fulfill {boolean} Whether autopause is turned on or off.\r\n       * @reject {UnsupportedError} Autopause is not supported with the current\r\n       *         player or browser.\r\n       */\r\n\r\n      /**\r\n       * Enable or disable the autopause behavior of this player.\r\n       *\r\n       * By default, when another video is played in the same browser, this\r\n       * player will automatically pause. Unless you have a specific reason\r\n       * for doing so, we recommend that you leave autopause set to the\r\n       * default (`true`).\r\n       *\r\n       * @param {boolean} autopause\r\n       * @return {SetAutopausePromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setAutopause\",\r\n      value: function setAutopause(autopause) {\r\n        return this.set('autopause', autopause);\r\n      }\r\n      /**\r\n       * A promise to get the buffered property of the video.\r\n       *\r\n       * @promise GetBufferedPromise\r\n       * @fulfill {Array} Buffered Timeranges converted to an Array.\r\n       */\r\n\r\n      /**\r\n       * Get the buffered property of the video.\r\n       *\r\n       * @return {GetBufferedPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getBuffered\",\r\n      value: function getBuffered() {\r\n        return this.get('buffered');\r\n      }\r\n      /**\r\n       * @typedef {Object} CameraProperties\r\n       * @prop {number} props.yaw - Number between 0 and 360.\r\n       * @prop {number} props.pitch - Number between -90 and 90.\r\n       * @prop {number} props.roll - Number between -180 and 180.\r\n       * @prop {number} props.fov - The field of view in degrees.\r\n       */\r\n\r\n      /**\r\n       * A promise to get the camera properties of the player.\r\n       *\r\n       * @promise GetCameraPromise\r\n       * @fulfill {CameraProperties} The camera properties.\r\n       */\r\n\r\n      /**\r\n       * For 360\u00b0 videos get the camera properties for this player.\r\n       *\r\n       * @return {GetCameraPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getCameraProps\",\r\n      value: function getCameraProps() {\r\n        return this.get('cameraProps');\r\n      }\r\n      /**\r\n       * A promise to set the camera properties of the player.\r\n       *\r\n       * @promise SetCameraPromise\r\n       * @fulfill {Object} The camera was successfully set.\r\n       * @reject {RangeError} The range was out of bounds.\r\n       */\r\n\r\n      /**\r\n       * For 360\u00b0 videos set the camera properties for this player.\r\n       *\r\n       * @param {CameraProperties} camera The camera properties\r\n       * @return {SetCameraPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setCameraProps\",\r\n      value: function setCameraProps(camera) {\r\n        return this.set('cameraProps', camera);\r\n      }\r\n      /**\r\n       * A representation of a chapter.\r\n       *\r\n       * @typedef {Object} VimeoChapter\r\n       * @property {number} startTime The start time of the chapter.\r\n       * @property {object} title The title of the chapter.\r\n       * @property {number} index The place in the order of Chapters. Starts at 1.\r\n       */\r\n\r\n      /**\r\n       * A promise to get chapters for the video.\r\n       *\r\n       * @promise GetChaptersPromise\r\n       * @fulfill {VimeoChapter[]} The chapters for the video.\r\n       */\r\n\r\n      /**\r\n       * Get an array of all the chapters for the video.\r\n       *\r\n       * @return {GetChaptersPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getChapters\",\r\n      value: function getChapters() {\r\n        return this.get('chapters');\r\n      }\r\n      /**\r\n       * A promise to get the currently active chapter.\r\n       *\r\n       * @promise GetCurrentChaptersPromise\r\n       * @fulfill {VimeoChapter|undefined} The current chapter for the video.\r\n       */\r\n\r\n      /**\r\n       * Get the currently active chapter for the video.\r\n       *\r\n       * @return {GetCurrentChaptersPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getCurrentChapter\",\r\n      value: function getCurrentChapter() {\r\n        return this.get('currentChapter');\r\n      }\r\n      /**\r\n       * A promise to get the color of the player.\r\n       *\r\n       * @promise GetColorPromise\r\n       * @fulfill {string} The hex color of the player.\r\n       */\r\n\r\n      /**\r\n       * Get the color for this player.\r\n       *\r\n       * @return {GetColorPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getColor\",\r\n      value: function getColor() {\r\n        return this.get('color');\r\n      }\r\n      /**\r\n       * A promise to set the color of the player.\r\n       *\r\n       * @promise SetColorPromise\r\n       * @fulfill {string} The color was successfully set.\r\n       * @reject {TypeError} The string was not a valid hex or rgb color.\r\n       * @reject {ContrastError} The color was set, but the contrast is\r\n       *         outside of the acceptable range.\r\n       * @reject {EmbedSettingsError} The owner of the player has chosen to\r\n       *         use a specific color.\r\n       */\r\n\r\n      /**\r\n       * Set the color of this player to a hex or rgb string. Setting the\r\n       * color may fail if the owner of the video has set their embed\r\n       * preferences to force a specific color.\r\n       *\r\n       * @param {string} color The hex or rgb color string to set.\r\n       * @return {SetColorPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setColor\",\r\n      value: function setColor(color) {\r\n        return this.set('color', color);\r\n      }\r\n      /**\r\n       * A representation of a cue point.\r\n       *\r\n       * @typedef {Object} VimeoCuePoint\r\n       * @property {number} time The time of the cue point.\r\n       * @property {object} data The data passed when adding the cue point.\r\n       * @property {string} id The unique id for use with removeCuePoint.\r\n       */\r\n\r\n      /**\r\n       * A promise to get the cue points of a video.\r\n       *\r\n       * @promise GetCuePointsPromise\r\n       * @fulfill {VimeoCuePoint[]} The cue points added to the video.\r\n       * @reject {UnsupportedError} Cue points are not supported with the current\r\n       *         player or browser.\r\n       */\r\n\r\n      /**\r\n       * Get an array of the cue points added to the video.\r\n       *\r\n       * @return {GetCuePointsPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getCuePoints\",\r\n      value: function getCuePoints() {\r\n        return this.get('cuePoints');\r\n      }\r\n      /**\r\n       * A promise to get the current time of the video.\r\n       *\r\n       * @promise GetCurrentTimePromise\r\n       * @fulfill {number} The current time in seconds.\r\n       */\r\n\r\n      /**\r\n       * Get the current playback position in seconds.\r\n       *\r\n       * @return {GetCurrentTimePromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getCurrentTime\",\r\n      value: function getCurrentTime() {\r\n        return this.get('currentTime');\r\n      }\r\n      /**\r\n       * A promise to set the current time of the video.\r\n       *\r\n       * @promise SetCurrentTimePromise\r\n       * @fulfill {number} The actual current time that was set.\r\n       * @reject {RangeError} the time was less than 0 or greater than the\r\n       *         video\u2019s duration.\r\n       */\r\n\r\n      /**\r\n       * Set the current playback position in seconds. If the player was\r\n       * paused, it will remain paused. Likewise, if the player was playing,\r\n       * it will resume playing once the video has buffered.\r\n       *\r\n       * You can provide an accurate time and the player will attempt to seek\r\n       * to as close to that time as possible. The exact time will be the\r\n       * fulfilled value of the promise.\r\n       *\r\n       * @param {number} currentTime\r\n       * @return {SetCurrentTimePromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setCurrentTime\",\r\n      value: function setCurrentTime(currentTime) {\r\n        return this.set('currentTime', currentTime);\r\n      }\r\n      /**\r\n       * A promise to get the duration of the video.\r\n       *\r\n       * @promise GetDurationPromise\r\n       * @fulfill {number} The duration in seconds.\r\n       */\r\n\r\n      /**\r\n       * Get the duration of the video in seconds. It will be rounded to the\r\n       * nearest second before playback begins, and to the nearest thousandth\r\n       * of a second after playback begins.\r\n       *\r\n       * @return {GetDurationPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getDuration\",\r\n      value: function getDuration() {\r\n        return this.get('duration');\r\n      }\r\n      /**\r\n       * A promise to get the ended state of the video.\r\n       *\r\n       * @promise GetEndedPromise\r\n       * @fulfill {boolean} Whether or not the video has ended.\r\n       */\r\n\r\n      /**\r\n       * Get the ended state of the video. The video has ended if\r\n       * `currentTime === duration`.\r\n       *\r\n       * @return {GetEndedPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getEnded\",\r\n      value: function getEnded() {\r\n        return this.get('ended');\r\n      }\r\n      /**\r\n       * A promise to get the loop state of the player.\r\n       *\r\n       * @promise GetLoopPromise\r\n       * @fulfill {boolean} Whether or not the player is set to loop.\r\n       */\r\n\r\n      /**\r\n       * Get the loop state of the player.\r\n       *\r\n       * @return {GetLoopPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getLoop\",\r\n      value: function getLoop() {\r\n        return this.get('loop');\r\n      }\r\n      /**\r\n       * A promise to set the loop state of the player.\r\n       *\r\n       * @promise SetLoopPromise\r\n       * @fulfill {boolean} The loop state that was set.\r\n       */\r\n\r\n      /**\r\n       * Set the loop state of the player. When set to `true`, the player\r\n       * will start over immediately once playback ends.\r\n       *\r\n       * @param {boolean} loop\r\n       * @return {SetLoopPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setLoop\",\r\n      value: function setLoop(loop) {\r\n        return this.set('loop', loop);\r\n      }\r\n      /**\r\n       * A promise to set the muted state of the player.\r\n       *\r\n       * @promise SetMutedPromise\r\n       * @fulfill {boolean} The muted state that was set.\r\n       */\r\n\r\n      /**\r\n       * Set the muted state of the player. When set to `true`, the player\r\n       * volume will be muted.\r\n       *\r\n       * @param {boolean} muted\r\n       * @return {SetMutedPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setMuted\",\r\n      value: function setMuted(muted) {\r\n        return this.set('muted', muted);\r\n      }\r\n      /**\r\n       * A promise to get the muted state of the player.\r\n       *\r\n       * @promise GetMutedPromise\r\n       * @fulfill {boolean} Whether or not the player is muted.\r\n       */\r\n\r\n      /**\r\n       * Get the muted state of the player.\r\n       *\r\n       * @return {GetMutedPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getMuted\",\r\n      value: function getMuted() {\r\n        return this.get('muted');\r\n      }\r\n      /**\r\n       * A promise to get the paused state of the player.\r\n       *\r\n       * @promise GetLoopPromise\r\n       * @fulfill {boolean} Whether or not the video is paused.\r\n       */\r\n\r\n      /**\r\n       * Get the paused state of the player.\r\n       *\r\n       * @return {GetLoopPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getPaused\",\r\n      value: function getPaused() {\r\n        return this.get('paused');\r\n      }\r\n      /**\r\n       * A promise to get the playback rate of the player.\r\n       *\r\n       * @promise GetPlaybackRatePromise\r\n       * @fulfill {number} The playback rate of the player on a scale from 0.5 to 2.\r\n       */\r\n\r\n      /**\r\n       * Get the playback rate of the player on a scale from `0.5` to `2`.\r\n       *\r\n       * @return {GetPlaybackRatePromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getPlaybackRate\",\r\n      value: function getPlaybackRate() {\r\n        return this.get('playbackRate');\r\n      }\r\n      /**\r\n       * A promise to set the playbackrate of the player.\r\n       *\r\n       * @promise SetPlaybackRatePromise\r\n       * @fulfill {number} The playback rate was set.\r\n       * @reject {RangeError} The playback rate was less than 0.5 or greater than 2.\r\n       */\r\n\r\n      /**\r\n       * Set the playback rate of the player on a scale from `0.5` to `2`. When set\r\n       * via the API, the playback rate will not be synchronized to other\r\n       * players or stored as the viewer's preference.\r\n       *\r\n       * @param {number} playbackRate\r\n       * @return {SetPlaybackRatePromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setPlaybackRate\",\r\n      value: function setPlaybackRate(playbackRate) {\r\n        return this.set('playbackRate', playbackRate);\r\n      }\r\n      /**\r\n       * A promise to get the played property of the video.\r\n       *\r\n       * @promise GetPlayedPromise\r\n       * @fulfill {Array} Played Timeranges converted to an Array.\r\n       */\r\n\r\n      /**\r\n       * Get the played property of the video.\r\n       *\r\n       * @return {GetPlayedPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getPlayed\",\r\n      value: function getPlayed() {\r\n        return this.get('played');\r\n      }\r\n      /**\r\n       * A promise to get the qualities available of the current video.\r\n       *\r\n       * @promise GetQualitiesPromise\r\n       * @fulfill {Array} The qualities of the video.\r\n       */\r\n\r\n      /**\r\n       * Get the qualities of the current video.\r\n       *\r\n       * @return {GetQualitiesPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getQualities\",\r\n      value: function getQualities() {\r\n        return this.get('qualities');\r\n      }\r\n      /**\r\n       * A promise to get the current set quality of the video.\r\n       *\r\n       * @promise GetQualityPromise\r\n       * @fulfill {string} The current set quality.\r\n       */\r\n\r\n      /**\r\n       * Get the current set quality of the video.\r\n       *\r\n       * @return {GetQualityPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getQuality\",\r\n      value: function getQuality() {\r\n        return this.get('quality');\r\n      }\r\n      /**\r\n       * A promise to set the video quality.\r\n       *\r\n       * @promise SetQualityPromise\r\n       * @fulfill {number} The quality was set.\r\n       * @reject {RangeError} The quality is not available.\r\n       */\r\n\r\n      /**\r\n       * Set a video quality.\r\n       *\r\n       * @param {string} quality\r\n       * @return {SetQualityPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setQuality\",\r\n      value: function setQuality(quality) {\r\n        return this.set('quality', quality);\r\n      }\r\n      /**\r\n       * A promise to get the seekable property of the video.\r\n       *\r\n       * @promise GetSeekablePromise\r\n       * @fulfill {Array} Seekable Timeranges converted to an Array.\r\n       */\r\n\r\n      /**\r\n       * Get the seekable property of the video.\r\n       *\r\n       * @return {GetSeekablePromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getSeekable\",\r\n      value: function getSeekable() {\r\n        return this.get('seekable');\r\n      }\r\n      /**\r\n       * A promise to get the seeking property of the player.\r\n       *\r\n       * @promise GetSeekingPromise\r\n       * @fulfill {boolean} Whether or not the player is currently seeking.\r\n       */\r\n\r\n      /**\r\n       * Get if the player is currently seeking.\r\n       *\r\n       * @return {GetSeekingPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getSeeking\",\r\n      value: function getSeeking() {\r\n        return this.get('seeking');\r\n      }\r\n      /**\r\n       * A promise to get the text tracks of a video.\r\n       *\r\n       * @promise GetTextTracksPromise\r\n       * @fulfill {VimeoTextTrack[]} The text tracks associated with the video.\r\n       */\r\n\r\n      /**\r\n       * Get an array of the text tracks that exist for the video.\r\n       *\r\n       * @return {GetTextTracksPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getTextTracks\",\r\n      value: function getTextTracks() {\r\n        return this.get('textTracks');\r\n      }\r\n      /**\r\n       * A promise to get the embed code for the video.\r\n       *\r\n       * @promise GetVideoEmbedCodePromise\r\n       * @fulfill {string} The `<iframe>` embed code for the video.\r\n       */\r\n\r\n      /**\r\n       * Get the `<iframe>` embed code for the video.\r\n       *\r\n       * @return {GetVideoEmbedCodePromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getVideoEmbedCode\",\r\n      value: function getVideoEmbedCode() {\r\n        return this.get('videoEmbedCode');\r\n      }\r\n      /**\r\n       * A promise to get the id of the video.\r\n       *\r\n       * @promise GetVideoIdPromise\r\n       * @fulfill {number} The id of the video.\r\n       */\r\n\r\n      /**\r\n       * Get the id of the video.\r\n       *\r\n       * @return {GetVideoIdPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getVideoId\",\r\n      value: function getVideoId() {\r\n        return this.get('videoId');\r\n      }\r\n      /**\r\n       * A promise to get the title of the video.\r\n       *\r\n       * @promise GetVideoTitlePromise\r\n       * @fulfill {number} The title of the video.\r\n       */\r\n\r\n      /**\r\n       * Get the title of the video.\r\n       *\r\n       * @return {GetVideoTitlePromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getVideoTitle\",\r\n      value: function getVideoTitle() {\r\n        return this.get('videoTitle');\r\n      }\r\n      /**\r\n       * A promise to get the native width of the video.\r\n       *\r\n       * @promise GetVideoWidthPromise\r\n       * @fulfill {number} The native width of the video.\r\n       */\r\n\r\n      /**\r\n       * Get the native width of the currently\u2010playing video. The width of\r\n       * the highest\u2010resolution available will be used before playback begins.\r\n       *\r\n       * @return {GetVideoWidthPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getVideoWidth\",\r\n      value: function getVideoWidth() {\r\n        return this.get('videoWidth');\r\n      }\r\n      /**\r\n       * A promise to get the native height of the video.\r\n       *\r\n       * @promise GetVideoHeightPromise\r\n       * @fulfill {number} The native height of the video.\r\n       */\r\n\r\n      /**\r\n       * Get the native height of the currently\u2010playing video. The height of\r\n       * the highest\u2010resolution available will be used before playback begins.\r\n       *\r\n       * @return {GetVideoHeightPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getVideoHeight\",\r\n      value: function getVideoHeight() {\r\n        return this.get('videoHeight');\r\n      }\r\n      /**\r\n       * A promise to get the vimeo.com url for the video.\r\n       *\r\n       * @promise GetVideoUrlPromise\r\n       * @fulfill {number} The vimeo.com url for the video.\r\n       * @reject {PrivacyError} The url isn\u2019t available because of the video\u2019s privacy setting.\r\n       */\r\n\r\n      /**\r\n       * Get the vimeo.com url for the video.\r\n       *\r\n       * @return {GetVideoUrlPromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getVideoUrl\",\r\n      value: function getVideoUrl() {\r\n        return this.get('videoUrl');\r\n      }\r\n      /**\r\n       * A promise to get the volume level of the player.\r\n       *\r\n       * @promise GetVolumePromise\r\n       * @fulfill {number} The volume level of the player on a scale from 0 to 1.\r\n       */\r\n\r\n      /**\r\n       * Get the current volume level of the player on a scale from `0` to `1`.\r\n       *\r\n       * Most mobile devices do not support an independent volume from the\r\n       * system volume. In those cases, this method will always return `1`.\r\n       *\r\n       * @return {GetVolumePromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"getVolume\",\r\n      value: function getVolume() {\r\n        return this.get('volume');\r\n      }\r\n      /**\r\n       * A promise to set the volume level of the player.\r\n       *\r\n       * @promise SetVolumePromise\r\n       * @fulfill {number} The volume was set.\r\n       * @reject {RangeError} The volume was less than 0 or greater than 1.\r\n       */\r\n\r\n      /**\r\n       * Set the volume of the player on a scale from `0` to `1`. When set\r\n       * via the API, the volume level will not be synchronized to other\r\n       * players or stored as the viewer\u2019s preference.\r\n       *\r\n       * Most mobile devices do not support setting the volume. An error will\r\n       * *not* be triggered in that situation.\r\n       *\r\n       * @param {number} volume\r\n       * @return {SetVolumePromise}\r\n       */\r\n\r\n    }, {\r\n      key: \"setVolume\",\r\n      value: function setVolume(volume) {\r\n        return this.set('volume', volume);\r\n      }\r\n    }]);\r\n\r\n    return Player;\r\n  }(); // Setup embed only if this is not a node environment\r\n\r\n\r\n  if (!isNode) {\r\n    screenfull = initializeScreenfull();\r\n    initializeEmbeds();\r\n    resizeEmbeds();\r\n  }\r\n\r\n  return Player;\r\n\r\n})));\r\n\r\n//# sourceMappingURL=player.js.map","vimeo/player.min.js":"/*! @vimeo/player v2.16.4 | (c) 2022 Vimeo | MIT License | https://github.com/vimeo/player.js */\r\n!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):((e=\"undefined\"!=typeof globalThis?globalThis:e||self).Vimeo=e.Vimeo||{},e.Vimeo.Player=t())}(this,function(){\"use strict\";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var e=\"undefined\"!=typeof global&&\"[object global]\"==={}.toString.call(global);function i(e,t){return 0===e.indexOf(t.toLowerCase())?e:\"\".concat(t.toLowerCase()).concat(e.substr(0,1).toUpperCase()).concat(e.substr(1))}function l(e){return/^(https?:)?\\/\\/((player|www)\\.)?vimeo\\.com(?=$|\\/)/.test(e)}function u(e){var t=0<arguments.length&&void 0!==e?e:{},n=t.id,e=t.url,t=n||e;if(!t)throw new Error(\"An id or url must be passed, either in an options object or as a data-vimeo-id or data-vimeo-url attribute.\");if(e=t,!isNaN(parseFloat(e))&&isFinite(e)&&Math.floor(e)==e)return\"https://vimeo.com/\".concat(t);if(l(t))return t.replace(\"http:\",\"https:\");if(n)throw new TypeError(\"\u201c\".concat(n,\"\u201d is not a valid video id.\"));throw new TypeError(\"\u201c\".concat(t,\"\u201d is not a vimeo.com url.\"))}var t=void 0!==Array.prototype.indexOf,Player=\"undefined\"!=typeof window&&void 0!==window.postMessage;if(!(e||t&&Player))throw new Error(\"Sorry, the Vimeo Player API is not available in this browser.\");var n,o,a=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{};function c(){if(void 0===this)throw new TypeError(\"Constructor WeakMap requires 'new'\");if(o(this,\"_id\",\"_WeakMap_\"+f()+\".\"+f()),0<arguments.length)throw new TypeError(\"WeakMap iterable is not supported\")}function s(e,t){if(!d(e)||!n.call(e,\"_id\"))throw new TypeError(t+\" method called on incompatible receiver \"+typeof e)}function f(){return Math.random().toString().substring(2)}function d(e){return Object(e)===e}(Player=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:a).WeakMap||(n=Object.prototype.hasOwnProperty,Player.WeakMap=((o=function(e,t,n){Object.defineProperty?Object.defineProperty(e,t,{configurable:!0,writable:!0,value:n}):e[t]=n})(c.prototype,\"delete\",function(e){if(s(this,\"delete\"),!d(e))return!1;var t=e[this._id];return!(!t||t[0]!==e)&&(delete e[this._id],!0)}),o(c.prototype,\"get\",function(e){if(s(this,\"get\"),d(e)){var t=e[this._id];return t&&t[0]===e?t[1]:void 0}}),o(c.prototype,\"has\",function(e){if(s(this,\"has\"),!d(e))return!1;var t=e[this._id];return!(!t||t[0]!==e)}),o(c.prototype,\"set\",function(e,t){if(s(this,\"set\"),!d(e))throw new TypeError(\"Invalid value used as weak map key\");var n=e[this._id];return n&&n[0]===e?n[1]=t:o(e,this._id,[e,t]),this}),o(c,\"_polyfill\",!0),c));var h,m=(function(e){var t,n,r;r=function(){var t,n,r,o,i,e=Object.prototype.toString,a=\"undefined\"!=typeof setImmediate?function(e){return setImmediate(e)}:setTimeout;try{Object.defineProperty({},\"x\",{}),t=function(e,t,n,r){return Object.defineProperty(e,t,{value:n,writable:!0,configurable:!1!==r})}}catch(e){t=function(e,t,n){return e[t]=n,e}}function u(e,t){this.fn=e,this.self=t,this.next=void 0}function l(e,t){y.add(e,t),n=n||a(y.drain)}function c(e){var t,n=typeof e;return\"function\"==typeof(t=null!=e&&(\"object\"==n||\"function\"==n)?e.then:t)&&t}function s(){for(var e=0;e<this.chain.length;e++)!function(e,t,n){var r,o;try{!1===t?n.reject(e.msg):(r=!0===t?e.msg:t.call(void 0,e.msg))===n.promise?n.reject(TypeError(\"Promise-chain cycle\")):(o=c(r))?o.call(r,n.resolve,n.reject):n.resolve(r)}catch(e){n.reject(e)}}(this,1===this.state?this.chain[e].success:this.chain[e].failure,this.chain[e]);this.chain.length=0}function f(e){var n,r=this;if(!r.triggered){r.triggered=!0,r.def&&(r=r.def);try{(n=c(e))?l(function(){var t=new m(r);try{n.call(e,function(){f.apply(t,arguments)},function(){d.apply(t,arguments)})}catch(e){d.call(t,e)}}):(r.msg=e,r.state=1,0<r.chain.length&&l(s,r))}catch(e){d.call(new m(r),e)}}}function d(e){var t=this;t.triggered||(t.triggered=!0,(t=t.def?t.def:t).msg=e,t.state=2,0<t.chain.length&&l(s,t))}function h(e,n,r,o){for(var t=0;t<n.length;t++)!function(t){e.resolve(n[t]).then(function(e){r(t,e)},o)}(t)}function m(e){this.def=e,this.triggered=!1}function v(e){this.promise=e,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}function p(e){if(\"function\"!=typeof e)throw TypeError(\"Not a function\");if(0!==this.__NPO__)throw TypeError(\"Not a promise\");this.__NPO__=1;var r=new v(this);this.then=function(e,t){var n={success:\"function\"!=typeof e||e,failure:\"function\"==typeof t&&t};return n.promise=new this.constructor(function(e,t){if(\"function\"!=typeof e||\"function\"!=typeof t)throw TypeError(\"Not a function\");n.resolve=e,n.reject=t}),r.chain.push(n),0!==r.state&&l(s,r),n.promise},this.catch=function(e){return this.then(void 0,e)};try{e.call(void 0,function(e){f.call(r,e)},function(e){d.call(r,e)})}catch(e){d.call(r,e)}}var y={add:function(e,t){i=new u(e,t),o?o.next=i:r=i,o=i,i=void 0},drain:function(){var e=r;for(r=o=n=void 0;e;)e.fn.call(e.self),e=e.next}},g=t({},\"constructor\",p,!1);return t(p.prototype=g,\"__NPO__\",0,!1),t(p,\"resolve\",function(n){return n&&\"object\"==typeof n&&1===n.__NPO__?n:new this(function(e,t){if(\"function\"!=typeof e||\"function\"!=typeof t)throw TypeError(\"Not a function\");e(n)})}),t(p,\"reject\",function(n){return new this(function(e,t){if(\"function\"!=typeof e||\"function\"!=typeof t)throw TypeError(\"Not a function\");t(n)})}),t(p,\"all\",function(t){var a=this;return\"[object Array]\"!=e.call(t)?a.reject(TypeError(\"Not an array\")):0===t.length?a.resolve([]):new a(function(n,e){if(\"function\"!=typeof n||\"function\"!=typeof e)throw TypeError(\"Not a function\");var r=t.length,o=Array(r),i=0;h(a,t,function(e,t){o[e]=t,++i===r&&n(o)},e)})}),t(p,\"race\",function(t){var r=this;return\"[object Array]\"!=e.call(t)?r.reject(TypeError(\"Not an array\")):new r(function(n,e){if(\"function\"!=typeof n||\"function\"!=typeof e)throw TypeError(\"Not a function\");h(r,t,function(e,t){n(t)},e)})}),p},(n=a)[t=\"Promise\"]=n[t]||r(),e.exports&&(e.exports=n[t])}(h={exports:{}}),h.exports),v=new WeakMap;function p(e,t,n){var r=v.get(e.element)||{};t in r||(r[t]=[]),r[t].push(n),v.set(e.element,r)}function y(e,t){return(v.get(e.element)||{})[t]||[]}function g(e,t,n){var r=v.get(e.element)||{};if(!r[t])return!0;if(!n)return r[t]=[],v.set(e.element,r),!0;n=r[t].indexOf(n);return-1!==n&&r[t].splice(n,1),v.set(e.element,r),r[t]&&0===r[t].length}var w=[\"autopause\",\"autoplay\",\"background\",\"byline\",\"color\",\"controls\",\"dnt\",\"height\",\"id\",\"interactive_params\",\"keyboard\",\"loop\",\"maxheight\",\"maxwidth\",\"muted\",\"playsinline\",\"portrait\",\"responsive\",\"speed\",\"texttrack\",\"title\",\"transparent\",\"url\",\"width\"];function b(r,e){return w.reduce(function(e,t){var n=r.getAttribute(\"data-vimeo-\".concat(t));return!n&&\"\"!==n||(e[t]=\"\"===n?1:n),e},1<arguments.length&&void 0!==e?e:{})}function k(e,t){var n=e.html;if(!t)throw new TypeError(\"An element must be provided\");if(null!==t.getAttribute(\"data-vimeo-initialized\"))return t.querySelector(\"iframe\");e=document.createElement(\"div\");return e.innerHTML=n,t.appendChild(e.firstChild),t.setAttribute(\"data-vimeo-initialized\",\"true\"),t.querySelector(\"iframe\")}function E(i,e,t){var a=1<arguments.length&&void 0!==e?e:{},u=2<arguments.length?t:void 0;return new Promise(function(t,n){if(!l(i))throw new TypeError(\"\u201c\".concat(i,\"\u201d is not a vimeo.com url.\"));var e,r=\"https://vimeo.com/api/oembed.json?url=\".concat(encodeURIComponent(i));for(e in a)a.hasOwnProperty(e)&&(r+=\"&\".concat(e,\"=\").concat(encodeURIComponent(a[e])));var o=new(\"XDomainRequest\"in window?XDomainRequest:XMLHttpRequest);o.open(\"GET\",r,!0),o.onload=function(){if(404!==o.status)if(403!==o.status)try{var e=JSON.parse(o.responseText);if(403===e.domain_status_code)return k(e,u),void n(new Error(\"\u201c\".concat(i,\"\u201d is not embeddable.\")));t(e)}catch(e){n(e)}else n(new Error(\"\u201c\".concat(i,\"\u201d is not embeddable.\")));else n(new Error(\"\u201c\".concat(i,\"\u201d was not found.\")))},o.onerror=function(){var e=o.status?\" (\".concat(o.status,\")\"):\"\";n(new Error(\"There was an error fetching the embed code from Vimeo\".concat(e,\".\")))},o.send()})}function T(e){function n(e){\"console\"in window&&console.error&&console.error(\"There was an error creating an embed: \".concat(e))}e=0<arguments.length&&void 0!==e?e:document,e=[].slice.call(e.querySelectorAll(\"[data-vimeo-id], [data-vimeo-url]\"));e.forEach(function(t){try{if(null!==t.getAttribute(\"data-vimeo-defer\"))return;var e=b(t);E(u(e),e,t).then(function(e){return k(e,t)}).catch(n)}catch(e){n(e)}})}function P(e){if(\"string\"==typeof e)try{e=JSON.parse(e)}catch(e){return console.warn(e),{}}return e}function _(e,t,n){e.element.contentWindow&&e.element.contentWindow.postMessage&&(t={method:t},void 0!==n&&(t.value=n),8<=(n=parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\\d+).*$/,\"$1\")))&&n<10&&(t=JSON.stringify(t)),e.element.contentWindow.postMessage(t,e.origin))}function M(n,r){var t,e,o,i,a=[];(r=P(r)).event?(\"error\"===r.event&&y(n,r.data.method).forEach(function(e){var t=new Error(r.data.message);t.name=r.data.name,e.reject(t),g(n,r.data.method,e)}),a=y(n,\"event:\".concat(r.event)),t=r.data):r.method&&(e=n,o=r.method,(i=!((i=y(e,o)).length<1)&&(i=i.shift(),g(e,o,i),i))&&(a.push(i),t=r.value)),a.forEach(function(e){try{if(\"function\"==typeof e)return void e.call(n,t);e.resolve(t)}catch(e){}})}var N,F,x,C=new WeakMap,j=new WeakMap,A={},Player=function(){function Player(i){var e,a=this,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,Player),window.jQuery&&i instanceof jQuery&&(1<i.length&&window.console&&console.warn&&console.warn(\"A jQuery object with multiple elements was passed, using the first element.\"),i=i[0]),\"undefined\"!=typeof document&&\"string\"==typeof i&&(i=document.getElementById(i)),e=i,!Boolean(e&&1===e.nodeType&&\"nodeName\"in e&&e.ownerDocument&&e.ownerDocument.defaultView))throw new TypeError(\"You must pass either a valid element or a valid id.\");if(\"IFRAME\"===i.nodeName||(r=i.querySelector(\"iframe\"))&&(i=r),\"IFRAME\"===i.nodeName&&!l(i.getAttribute(\"src\")||\"\"))throw new Error(\"The player element passed isn\u2019t a Vimeo embed.\");if(C.has(i))return C.get(i);this._window=i.ownerDocument.defaultView,this.element=i,this.origin=\"*\";var n,r=new m(function(r,o){var e;a._onMessage=function(e){if(l(e.origin)&&a.element.contentWindow===e.source){\"*\"===a.origin&&(a.origin=e.origin);var t=P(e.data);if(t&&\"error\"===t.event&&t.data&&\"ready\"===t.data.method){var n=new Error(t.data.message);return n.name=t.data.name,void o(n)}e=t&&\"ready\"===t.event,n=t&&\"ping\"===t.method;if(e||n)return a.element.setAttribute(\"data-ready\",\"true\"),void r();M(a,t)}},a._window.addEventListener(\"message\",a._onMessage),\"IFRAME\"!==a.element.nodeName&&E(u(e=b(i,t)),e,i).then(function(e){var t,n,r=k(e,i);return a.element=r,a._originalElement=i,t=i,n=r,r=v.get(t),v.set(n,r),v.delete(t),C.set(a.element,a),e}).catch(o)});return j.set(this,r),C.set(this.element,this),\"IFRAME\"===this.element.nodeName&&_(this,\"ping\"),A.isEnabled&&(n=function(){return A.exit()},this.fullscreenchangeHandler=function(){(A.isFullscreen?p:g)(a,\"event:exitFullscreen\",n),a.ready().then(function(){_(a,\"fullscreenchange\",A.isFullscreen)})},A.on(\"fullscreenchange\",this.fullscreenchangeHandler)),this}var e,t,n;return e=Player,(t=[{key:\"callMethod\",value:function(n){var r=this,o=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return new m(function(e,t){return r.ready().then(function(){p(r,n,{resolve:e,reject:t}),_(r,n,o)}).catch(t)})}},{key:\"get\",value:function(n){var r=this;return new m(function(e,t){return n=i(n,\"get\"),r.ready().then(function(){p(r,n,{resolve:e,reject:t}),_(r,n)}).catch(t)})}},{key:\"set\",value:function(n,r){var o=this;return new m(function(e,t){if(n=i(n,\"set\"),null==r)throw new TypeError(\"There must be a value to set.\");return o.ready().then(function(){p(o,n,{resolve:e,reject:t}),_(o,n,r)}).catch(t)})}},{key:\"on\",value:function(e,t){if(!e)throw new TypeError(\"You must pass an event name.\");if(!t)throw new TypeError(\"You must pass a callback function.\");if(\"function\"!=typeof t)throw new TypeError(\"The callback must be a function.\");0===y(this,\"event:\".concat(e)).length&&this.callMethod(\"addEventListener\",e).catch(function(){}),p(this,\"event:\".concat(e),t)}},{key:\"off\",value:function(e,t){if(!e)throw new TypeError(\"You must pass an event name.\");if(t&&\"function\"!=typeof t)throw new TypeError(\"The callback must be a function.\");g(this,\"event:\".concat(e),t)&&this.callMethod(\"removeEventListener\",e).catch(function(e){})}},{key:\"loadVideo\",value:function(e){return this.callMethod(\"loadVideo\",e)}},{key:\"ready\",value:function(){var e=j.get(this)||new m(function(e,t){t(new Error(\"Unknown player. Probably unloaded.\"))});return m.resolve(e)}},{key:\"addCuePoint\",value:function(e){return this.callMethod(\"addCuePoint\",{time:e,data:1<arguments.length&&void 0!==arguments[1]?arguments[1]:{}})}},{key:\"removeCuePoint\",value:function(e){return this.callMethod(\"removeCuePoint\",e)}},{key:\"enableTextTrack\",value:function(e,t){if(!e)throw new TypeError(\"You must pass a language.\");return this.callMethod(\"enableTextTrack\",{language:e,kind:t})}},{key:\"disableTextTrack\",value:function(){return this.callMethod(\"disableTextTrack\")}},{key:\"pause\",value:function(){return this.callMethod(\"pause\")}},{key:\"play\",value:function(){return this.callMethod(\"play\")}},{key:\"requestFullscreen\",value:function(){return A.isEnabled?A.request(this.element):this.callMethod(\"requestFullscreen\")}},{key:\"exitFullscreen\",value:function(){return A.isEnabled?A.exit():this.callMethod(\"exitFullscreen\")}},{key:\"getFullscreen\",value:function(){return A.isEnabled?m.resolve(A.isFullscreen):this.get(\"fullscreen\")}},{key:\"requestPictureInPicture\",value:function(){return this.callMethod(\"requestPictureInPicture\")}},{key:\"exitPictureInPicture\",value:function(){return this.callMethod(\"exitPictureInPicture\")}},{key:\"getPictureInPicture\",value:function(){return this.get(\"pictureInPicture\")}},{key:\"unload\",value:function(){return this.callMethod(\"unload\")}},{key:\"destroy\",value:function(){var n=this;return new m(function(e){var t;j.delete(n),C.delete(n.element),n._originalElement&&(C.delete(n._originalElement),n._originalElement.removeAttribute(\"data-vimeo-initialized\")),n.element&&\"IFRAME\"===n.element.nodeName&&n.element.parentNode&&(n.element.parentNode.parentNode&&n._originalElement&&n._originalElement!==n.element.parentNode?n.element.parentNode.parentNode.removeChild(n.element.parentNode):n.element.parentNode.removeChild(n.element)),n.element&&\"DIV\"===n.element.nodeName&&n.element.parentNode&&(n.element.removeAttribute(\"data-vimeo-initialized\"),(t=n.element.querySelector(\"iframe\"))&&t.parentNode&&(t.parentNode.parentNode&&n._originalElement&&n._originalElement!==t.parentNode?t.parentNode.parentNode.removeChild(t.parentNode):t.parentNode.removeChild(t))),n._window.removeEventListener(\"message\",n._onMessage),A.isEnabled&&A.off(\"fullscreenchange\",n.fullscreenchangeHandler),e()})}},{key:\"getAutopause\",value:function(){return this.get(\"autopause\")}},{key:\"setAutopause\",value:function(e){return this.set(\"autopause\",e)}},{key:\"getBuffered\",value:function(){return this.get(\"buffered\")}},{key:\"getCameraProps\",value:function(){return this.get(\"cameraProps\")}},{key:\"setCameraProps\",value:function(e){return this.set(\"cameraProps\",e)}},{key:\"getChapters\",value:function(){return this.get(\"chapters\")}},{key:\"getCurrentChapter\",value:function(){return this.get(\"currentChapter\")}},{key:\"getColor\",value:function(){return this.get(\"color\")}},{key:\"setColor\",value:function(e){return this.set(\"color\",e)}},{key:\"getCuePoints\",value:function(){return this.get(\"cuePoints\")}},{key:\"getCurrentTime\",value:function(){return this.get(\"currentTime\")}},{key:\"setCurrentTime\",value:function(e){return this.set(\"currentTime\",e)}},{key:\"getDuration\",value:function(){return this.get(\"duration\")}},{key:\"getEnded\",value:function(){return this.get(\"ended\")}},{key:\"getLoop\",value:function(){return this.get(\"loop\")}},{key:\"setLoop\",value:function(e){return this.set(\"loop\",e)}},{key:\"setMuted\",value:function(e){return this.set(\"muted\",e)}},{key:\"getMuted\",value:function(){return this.get(\"muted\")}},{key:\"getPaused\",value:function(){return this.get(\"paused\")}},{key:\"getPlaybackRate\",value:function(){return this.get(\"playbackRate\")}},{key:\"setPlaybackRate\",value:function(e){return this.set(\"playbackRate\",e)}},{key:\"getPlayed\",value:function(){return this.get(\"played\")}},{key:\"getQualities\",value:function(){return this.get(\"qualities\")}},{key:\"getQuality\",value:function(){return this.get(\"quality\")}},{key:\"setQuality\",value:function(e){return this.set(\"quality\",e)}},{key:\"getSeekable\",value:function(){return this.get(\"seekable\")}},{key:\"getSeeking\",value:function(){return this.get(\"seeking\")}},{key:\"getTextTracks\",value:function(){return this.get(\"textTracks\")}},{key:\"getVideoEmbedCode\",value:function(){return this.get(\"videoEmbedCode\")}},{key:\"getVideoId\",value:function(){return this.get(\"videoId\")}},{key:\"getVideoTitle\",value:function(){return this.get(\"videoTitle\")}},{key:\"getVideoWidth\",value:function(){return this.get(\"videoWidth\")}},{key:\"getVideoHeight\",value:function(){return this.get(\"videoHeight\")}},{key:\"getVideoUrl\",value:function(){return this.get(\"videoUrl\")}},{key:\"getVolume\",value:function(){return this.get(\"volume\")}},{key:\"setVolume\",value:function(e){return this.set(\"volume\",e)}}])&&r(e.prototype,t),n&&r(e,n),Player}();return e||(N=function(){for(var e,t=[[\"requestFullscreen\",\"exitFullscreen\",\"fullscreenElement\",\"fullscreenEnabled\",\"fullscreenchange\",\"fullscreenerror\"],[\"webkitRequestFullscreen\",\"webkitExitFullscreen\",\"webkitFullscreenElement\",\"webkitFullscreenEnabled\",\"webkitfullscreenchange\",\"webkitfullscreenerror\"],[\"webkitRequestFullScreen\",\"webkitCancelFullScreen\",\"webkitCurrentFullScreenElement\",\"webkitCancelFullScreen\",\"webkitfullscreenchange\",\"webkitfullscreenerror\"],[\"mozRequestFullScreen\",\"mozCancelFullScreen\",\"mozFullScreenElement\",\"mozFullScreenEnabled\",\"mozfullscreenchange\",\"mozfullscreenerror\"],[\"msRequestFullscreen\",\"msExitFullscreen\",\"msFullscreenElement\",\"msFullscreenEnabled\",\"MSFullscreenChange\",\"MSFullscreenError\"]],n=0,r=t.length,o={};n<r;n++)if((e=t[n])&&e[1]in document){for(n=0;n<e.length;n++)o[t[0][n]]=e[n];return o}return!1}(),F={fullscreenchange:N.fullscreenchange,fullscreenerror:N.fullscreenerror},x={request:function(o){return new Promise(function(e,t){function n(){x.off(\"fullscreenchange\",n),e()}x.on(\"fullscreenchange\",n);var r=(o=o||document.documentElement)[N.requestFullscreen]();r instanceof Promise&&r.then(n).catch(t)})},exit:function(){return new Promise(function(t,e){var n,r;x.isFullscreen?(n=function e(){x.off(\"fullscreenchange\",e),t()},x.on(\"fullscreenchange\",n),(r=document[N.exitFullscreen]())instanceof Promise&&r.then(n).catch(e)):t()})},on:function(e,t){e=F[e];e&&document.addEventListener(e,t)},off:function(e,t){e=F[e];e&&document.removeEventListener(e,t)}},Object.defineProperties(x,{isFullscreen:{get:function(){return Boolean(document[N.fullscreenElement])}},element:{enumerable:!0,get:function(){return document[N.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(document[N.fullscreenEnabled])}}}),A=x,T(),function(e){var r=0<arguments.length&&void 0!==e?e:document;window.VimeoPlayerResizeEmbeds_||(window.VimeoPlayerResizeEmbeds_=!0,window.addEventListener(\"message\",function(e){if(l(e.origin)&&e.data&&\"spacechange\"===e.data.event)for(var t=r.querySelectorAll(\"iframe\"),n=0;n<t.length;n++)if(t[n].contentWindow===e.source){t[n].parentElement.style.paddingBottom=\"\".concat(e.data.data[0].bottom,\"px\");break}}))}()),Player});\r\n","vimeo/vimeo-wrapper.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'vimeo'\r\n], function (Player) {\r\n    'use strict';\r\n\r\n    window.Vimeo = window.Vimeo || {\r\n        'Player': Player\r\n    };\r\n});\r\n"}
}});
