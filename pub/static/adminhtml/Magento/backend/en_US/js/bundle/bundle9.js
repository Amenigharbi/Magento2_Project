require.config({"config": {
        "jsbuild":{"Magento_Ui/js/grid/toolbar.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'Magento_Ui/js/lib/view/utils/raf',\r\n    'rjsResolver',\r\n    'uiCollection'\r\n], function (_, $, raf, resolver, Collection) {\r\n    'use strict';\r\n\r\n    var transformProp;\r\n\r\n    /**\r\n     * Defines supported css 'transform' property.\r\n     *\r\n     * @returns {String|Undefined}\r\n     */\r\n    transformProp = (function () {\r\n        var style = document.documentElement.style,\r\n            base = 'Transform',\r\n            vendors = ['webkit', 'moz', 'ms', 'o'],\r\n            vi = vendors.length,\r\n            property;\r\n\r\n        if (typeof style.transform != 'undefined') {\r\n            return 'transform';\r\n        }\r\n\r\n        while (vi--) {\r\n            property = vendors[vi] + base;\r\n\r\n            if (typeof style[property] != 'undefined') {\r\n                return property;\r\n            }\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Moves specified DOM element to the x and y coordinates.\r\n     *\r\n     * @param {HTMLElement} elem - Element to be relocated.\r\n     * @param {Number} x - X coordinate.\r\n     * @param {Number} y - Y coordinate.\r\n     */\r\n    function locate(elem, x, y) {\r\n        var value = 'translate(' + x + 'px,' + y + 'px)';\r\n\r\n        elem.style[transformProp] = value;\r\n    }\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/toolbar',\r\n            stickyTmpl: 'ui/grid/sticky/sticky',\r\n            tableSelector: 'table',\r\n            columnsProvider: 'ns = ${ $.ns }, componentType = columns',\r\n            refreshFPS: 15,\r\n            sticky: false,\r\n            visible: false,\r\n            _resized: true,\r\n            _scrolled: true,\r\n            _tableScrolled: true,\r\n            _requiredNodes: {\r\n                '$stickyToolbar': true,\r\n                '$stickyTable': true,\r\n                '$table': true,\r\n                '$sticky': true\r\n            },\r\n            stickyClass: {\r\n                'sticky-header': true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes sticky toolbar component.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.sticky) {\r\n                this.waitDOMElements()\r\n                    .then(this.run.bind(this));\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Establishes DOM elements wait process.\r\n         *\r\n         * @returns {jQueryPromise} Promise which will be resolved\r\n         *      when all of the required DOM elements are defined.\r\n         */\r\n        waitDOMElements: function () {\r\n            var _domPromise = $.Deferred();\r\n\r\n            _.bindAll(this, 'setStickyTable', 'setTableNode');\r\n\r\n            $.async({\r\n                ctx: ':not([data-role=\"sticky-el-root\"])',\r\n                component: this.columnsProvider,\r\n                selector: this.tableSelector\r\n            }, this.setTableNode);\r\n\r\n            $.async({\r\n                ctx: '[data-role=\"sticky-el-root\"]',\r\n                component: this.columnsProvider,\r\n                selector: this.tableSelector\r\n            }, this.setStickyTable);\r\n\r\n            this._domPromise = _domPromise;\r\n\r\n            return _domPromise.promise();\r\n        },\r\n\r\n        /**\r\n         * Defines left caption element.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setLeftCap: function (node) {\r\n            this.$leftCap = node;\r\n        },\r\n\r\n        /**\r\n         * Defines right caption element.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setRightCap: function (node) {\r\n            this.$rightCap = node;\r\n        },\r\n\r\n        /**\r\n         * Defines original table element.\r\n         *\r\n         * @param {HTMLTableElement} node\r\n         */\r\n        setTableNode: function (node) {\r\n            this.$cols = node.tHead.children[0].cells;\r\n            this.$tableContainer = node.parentNode;\r\n\r\n            this.setNode('$table', node);\r\n        },\r\n\r\n        /**\r\n         * Defines sticky table element.\r\n         *\r\n         * @param {HTMLTableElement} node\r\n         */\r\n        setStickyTable: function (node) {\r\n            this.$stickyCols = node.tHead.children[0].cells;\r\n\r\n            this.setNode('$stickyTable', node);\r\n        },\r\n\r\n        /**\r\n         * Defines sticky toolbar node.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setStickyToolbarNode: function (node) {\r\n            this.setNode('$stickyToolbar', node);\r\n        },\r\n\r\n        /**\r\n         * Defines sticky element container.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setStickyNode: function (node) {\r\n            this.setNode('$sticky', node);\r\n        },\r\n\r\n        /**\r\n         * Defines toolbar element container.\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        setToolbarNode: function (node) {\r\n            this.$toolbar = node;\r\n        },\r\n\r\n        /**\r\n         * Sets provided node as a value of 'key' property and\r\n         * performs check for required DOM elements.\r\n         *\r\n         * @param {String} key - Properties key.\r\n         * @param {HTMLElement} node - DOM element.\r\n         */\r\n        setNode: function (key, node) {\r\n            var nodes = this._requiredNodes,\r\n                promise = this._domPromise,\r\n                defined;\r\n\r\n            this[key] = node;\r\n\r\n            defined = _.every(nodes, function (enabled, name) {\r\n                return enabled ? this[name] : true;\r\n            }, this);\r\n\r\n            if (defined) {\r\n                resolver(promise.resolve, promise);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Starts refresh process of the sticky element\r\n         * and assigns DOM elements events handlers.\r\n         */\r\n        run: function () {\r\n            _.bindAll(\r\n                this,\r\n                'refresh',\r\n                '_onWindowResize',\r\n                '_onWindowScroll',\r\n                '_onTableScroll'\r\n            );\r\n\r\n            $(window).on({\r\n                scroll: this._onWindowScroll,\r\n                resize: this._onWindowResize\r\n            });\r\n\r\n            $(this.$tableContainer).on('scroll', this._onTableScroll);\r\n\r\n            this.refresh();\r\n            this.checkTableWidth();\r\n        },\r\n\r\n        /**\r\n         * Refreshes state of the sticky element and\r\n         * invokes DOM elements events handlers\r\n         * if corresponding event has been triggered.\r\n         */\r\n        refresh: function () {\r\n            if (!raf(this.refresh, this.refreshFPS)) {\r\n                return;\r\n            }\r\n\r\n            if (this._scrolled) {\r\n                this.onWindowScroll();\r\n            }\r\n\r\n            if (this._tableScrolled) {\r\n                this.onTableScroll();\r\n            }\r\n\r\n            if (this._resized) {\r\n                this.onWindowResize();\r\n            }\r\n\r\n            if (this.visible) {\r\n                this.checkTableWidth();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Shows sticky toolbar.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        show: function () {\r\n            this.visible = true;\r\n            //Check admin grid button has addedr not\r\n            if ($('.page-main-actions').length === 0) {\r\n                this.$sticky.style.top = 0;\r\n            }\r\n            this.$sticky.style.display = '';\r\n            this.$toolbar.style.visibility = 'hidden';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides sticky toolbar.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        hide: function () {\r\n            this.visible = false;\r\n\r\n            this.$sticky.style.display = 'none';\r\n            this.$toolbar.style.visibility = '';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if sticky toolbar covers original elements.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isCovered: function () {\r\n            var stickyTop = this._stickyTableTop + this._wScrollTop;\r\n\r\n            return stickyTop > this._tableTop;\r\n        },\r\n\r\n        /**\r\n         * Updates offset of the sticky table element.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateStickyTableOffset: function () {\r\n            var style,\r\n                top;\r\n\r\n            if (this.visible) {\r\n                top = this.$stickyTable.getBoundingClientRect().top;\r\n            } else {\r\n                style = this.$sticky.style;\r\n\r\n                style.visibility = 'hidden';\r\n                style.display = '';\r\n\r\n                top = this.$stickyTable.getBoundingClientRect().top;\r\n\r\n                style.display = 'none';\r\n                style.visibility = '';\r\n            }\r\n\r\n            this._stickyTableTop = top;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates offset of the original table element.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateTableOffset: function () {\r\n            var box = this.$table.getBoundingClientRect(),\r\n                top = box.top + this._wScrollTop;\r\n\r\n            if (this._tableTop !== top) {\r\n                this._tableTop = top;\r\n\r\n                this.onTableTopChange(top);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if width of the table or it's columns has changed.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        checkTableWidth: function () {\r\n            var cols        = this.$cols,\r\n                total       = cols.length,\r\n                rightBorder = cols[total - 2].offsetLeft,\r\n                tableWidth  = this.$table.offsetWidth;\r\n\r\n            if (this._tableWidth !== tableWidth) {\r\n                this._tableWidth = tableWidth;\r\n\r\n                this.onTableWidthChange(tableWidth);\r\n            }\r\n\r\n            if (this._rightBorder !== rightBorder) {\r\n                this._rightBorder = rightBorder;\r\n\r\n                this.onColumnsWidthChange();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates width of the sticky table.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateTableWidth: function () {\r\n            this.$stickyTable.style.width = this._tableWidth + 'px';\r\n\r\n            if (this._tableWidth < this._toolbarWidth) {\r\n                this.checkToolbarSize();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates width of the sticky columns.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateColumnsWidth: function () {\r\n            var cols        = this.$cols,\r\n                index       = cols.length,\r\n                stickyCols  = this.$stickyCols;\r\n\r\n            while (index--) {\r\n                stickyCols[index].width = cols[index].offsetWidth;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Upadates size of the sticky toolbar element\r\n         * and invokes corresponding 'change' event handlers.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        checkToolbarSize: function () {\r\n            var width = this.$tableContainer.offsetWidth;\r\n\r\n            if (this._toolbarWidth !== width) {\r\n                this._toolbarWidth = width;\r\n\r\n                this.onToolbarWidthChange(width);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles sticky toolbar visibility if it's necessary.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateVisibility: function () {\r\n            if (this.visible !== this.isCovered()) {\r\n                this.visible ? this.hide() : this.show();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates position of the left cover area.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateLeftCap: function () {\r\n            locate(this.$leftCap, -this._wScrollLeft, 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates position of the right cover area.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateRightCap: function () {\r\n            var left = this._toolbarWidth - this._wScrollLeft;\r\n\r\n            locate(this.$rightCap, left, 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates position of the sticky table.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateTableScroll: function () {\r\n            var container = this.$tableContainer,\r\n                left = container.scrollLeft + this._wScrollLeft;\r\n\r\n            locate(this.$stickyTable, -left, 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates width of the toolbar element.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        updateToolbarWidth: function () {\r\n            this.$stickyToolbar.style.width = this._toolbarWidth + 'px';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the toolbar element's width.\r\n         */\r\n        onToolbarWidthChange: function () {\r\n            this.updateToolbarWidth()\r\n                .updateRightCap();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the table top position.\r\n         */\r\n        onTableTopChange: function () {\r\n            this.updateStickyTableOffset();\r\n        },\r\n\r\n        /**\r\n         * Handles change of the table width.\r\n         */\r\n        onTableWidthChange: function () {\r\n            this.updateTableWidth();\r\n        },\r\n\r\n        /**\r\n         * Handles change of the table columns width.\r\n         */\r\n        onColumnsWidthChange: function () {\r\n            this.updateColumnsWidth();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the window's size.\r\n         */\r\n        onWindowResize: function () {\r\n            this.checkToolbarSize();\r\n\r\n            this._resized = false;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the original table scroll position.\r\n         */\r\n        onTableScroll: function () {\r\n            this.updateTableScroll();\r\n\r\n            this._tableScrolled = false;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of window's scroll position.\r\n         */\r\n        onWindowScroll: function () {\r\n            var scrollTop = window.pageYOffset,\r\n                scrollLeft = window.pageXOffset;\r\n\r\n            if (this._wScrollTop !== scrollTop) {\r\n                this._wScrollTop = scrollTop;\r\n\r\n                this.onWindowScrollTop(scrollTop);\r\n            }\r\n\r\n            if (this._wScrollLeft !== scrollLeft) {\r\n                this._wScrollLeft = scrollLeft;\r\n\r\n                this.onWindowScrollLeft(scrollLeft);\r\n            }\r\n\r\n            this._scrolled = false;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of windows' top scroll position.\r\n         */\r\n        onWindowScrollTop: function () {\r\n            this.updateTableOffset()\r\n                .updateVisibility();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of windows' left scroll position.\r\n         */\r\n        onWindowScrollLeft: function () {\r\n            this.updateRightCap()\r\n                .updateLeftCap()\r\n                .updateTableScroll();\r\n        },\r\n\r\n        /**\r\n         * Original window 'scroll' event handler.\r\n         * Sets 'scrolled' flag to 'true'.\r\n         *\r\n         * @private\r\n         */\r\n        _onWindowScroll: function () {\r\n            this._scrolled = true;\r\n        },\r\n\r\n        /**\r\n         * Original window 'resize' event handler.\r\n         * Sets 'resized' flag to 'true'.\r\n         *\r\n         * @private\r\n         */\r\n        _onWindowResize: function () {\r\n            this._resized = true;\r\n        },\r\n\r\n        /**\r\n         * Original table 'scroll' event handler.\r\n         * Sets '_tableScrolled' flag to 'true'.\r\n         *\r\n         * @private\r\n         */\r\n        _onTableScroll: function () {\r\n            this._tableScrolled = true;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/tree-massactions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/grid/massactions'\r\n], function (ko, _, Massactions) {\r\n    'use strict';\r\n\r\n    return Massactions.extend({\r\n        defaults: {\r\n            template: 'ui/grid/tree-massactions',\r\n            submenuTemplate: 'ui/grid/submenu',\r\n            listens: {\r\n                opened: 'hideSubmenus'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .recursiveObserveActions(this.actions());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Recursive initializes observable actions.\r\n         *\r\n         * @param {Array} actions - Action objects.\r\n         * @param {String} [prefix] - An optional string that will be prepended\r\n         *      to the \"type\" field of all child actions.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        recursiveObserveActions: function (actions, prefix) {\r\n            _.each(actions, function (action) {\r\n                if (prefix) {\r\n                    action.type = prefix + '.' + action.type;\r\n                }\r\n\r\n                if (action.actions) {\r\n                    action.visible = ko.observable(false);\r\n                    action.parent = actions;\r\n                    this.recursiveObserveActions(action.actions, action.type);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies specified action.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        applyAction: function (actionIndex) {\r\n            var action = this.getAction(actionIndex),\r\n                visibility;\r\n\r\n            if (action.visible) {\r\n                visibility = action.visible();\r\n\r\n                this.hideSubmenus(action.parent);\r\n                action.visible(!visibility);\r\n\r\n                return this;\r\n            }\r\n\r\n            return this._super(actionIndex);\r\n        },\r\n\r\n        /**\r\n         * Retrieves action object associated with a specified index.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @param {Array} actions - Action objects.\r\n         * @returns {Object} Action object.\r\n         */\r\n        getAction: function (actionIndex, actions) {\r\n            var currentActions = actions || this.actions(),\r\n                result = false;\r\n\r\n            _.find(currentActions, function (action) {\r\n                if (action.type === actionIndex) {\r\n                    result = action;\r\n\r\n                    return true;\r\n                }\r\n\r\n                if (action.actions) {\r\n                    result = this.getAction(actionIndex, action.actions);\r\n\r\n                    return result;\r\n                }\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Recursive hide all sub folders in given array.\r\n         *\r\n         * @param {Array} actions - Action objects.\r\n         * @returns {Massactions} Chainable.\r\n         */\r\n        hideSubmenus: function (actions) {\r\n            var currentActions = actions || this.actions();\r\n\r\n            _.each(currentActions, function (action) {\r\n                if (action.visible && action.visible()) {\r\n                    action.visible(false);\r\n                }\r\n\r\n                if (action.actions) {\r\n                    this.hideSubmenus(action.actions);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/url-filter-applier.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'underscore',\r\n    'jquery'\r\n], function (Component, _, $) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            listingNamespace: null,\r\n            bookmarkProvider: 'componentType = bookmark, ns = ${ $.listingNamespace }',\r\n            filterProvider: 'componentType = filters, ns = ${ $.listingNamespace }',\r\n            filterKey: 'filters',\r\n            searchString: location.search,\r\n            modules: {\r\n                bookmarks: '${ $.bookmarkProvider }',\r\n                filterComponent: '${ $.filterProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init component\r\n         *\r\n         * @return {exports}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.apply();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Apply filter\r\n         */\r\n        apply: function () {\r\n            var urlFilter = this.getFilterParam(this.searchString),\r\n                applied,\r\n                filters;\r\n\r\n            if (_.isUndefined(this.filterComponent())) {\r\n                setTimeout(function () {\r\n                    this.apply();\r\n                }.bind(this), 100);\r\n\r\n                return;\r\n            }\r\n\r\n            if (!_.isUndefined(this.bookmarks())) {\r\n                if (!_.size(this.bookmarks().getViewData(this.bookmarks().defaultIndex))) {\r\n                    setTimeout(function () {\r\n                        this.apply();\r\n                    }.bind(this), 500);\r\n\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (Object.keys(urlFilter).length) {\r\n                applied = this.filterComponent().get('applied');\r\n                filters = $.extend({}, applied, urlFilter);\r\n                this.filterComponent().set('applied', filters);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get filter param from url\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getFilterParam: function (url) {\r\n            var searchString = decodeURI(url),\r\n                itemArray;\r\n\r\n            return _.chain(searchString.slice(1).split('&'))\r\n                .map(function (item) {\r\n\r\n                    if (item && item.search(this.filterKey) !== -1) {\r\n                        itemArray = item.split('=');\r\n\r\n                        if (itemArray[1].search('\\\\[') === 0) {\r\n                            itemArray[1] = itemArray[1].replace(/[\\[\\]]/g, '').split(',');\r\n                        }\r\n\r\n                        itemArray[0] = itemArray[0].replace(this.filterKey, '')\r\n                                .replace(/[\\[\\]]/g, '');\r\n\r\n                        return itemArray;\r\n                    }\r\n                }.bind(this))\r\n                .compact()\r\n                .object()\r\n                .value();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/cells/sanitizedHtml.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'escaper'\r\n], function (Column, escaper) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            allowedTags: ['div', 'span', 'b', 'strong', 'i', 'em', 'u', 'a']\r\n        },\r\n\r\n        /**\r\n         * Name column.\r\n         *\r\n         * @param {String} label\r\n         * @returns {String}\r\n         */\r\n        getSafeHtml: function (label) {\r\n            return escaper.escapeHtml(label, this.allowedTags);\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getSafeHtml.\r\n         *\r\n         * @param {String} label\r\n         * @returns {String}\r\n         */\r\n        getSafeUnsanitizedHtml: function (label) {\r\n            return this.getSafeHtml(label);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/actions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    './column',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/dataPost'\r\n], function (_, utils, registry, Column, confirm, dataPost) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/cells/actions',\r\n            sortable: false,\r\n            draggable: false,\r\n            actions: [],\r\n            rows: [],\r\n            rowsProvider: '${ $.parentName }',\r\n            fieldClass: {\r\n                'data-grid-actions-cell': true\r\n            },\r\n            templates: {\r\n                actions: {}\r\n            },\r\n            imports: {\r\n                rows: '${ $.rowsProvider }:rows'\r\n            },\r\n            listens: {\r\n                rows: 'updateActions'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {ActionsColumn} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track('actions');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns specific action of a specified row\r\n         * or all action objects associated with it.\r\n         *\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @param {String} [actionIndex] - Action identifier.\r\n         * @returns {Array|Object}\r\n         */\r\n        getAction: function (rowIndex, actionIndex) {\r\n            var rowActions = this.actions[rowIndex];\r\n\r\n            return rowActions && actionIndex ?\r\n                rowActions[actionIndex] :\r\n                rowActions;\r\n        },\r\n\r\n        /**\r\n         * Returns visible actions for a specified row.\r\n         *\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @returns {Array} Visible actions.\r\n         */\r\n        getVisibleActions: function (rowIndex) {\r\n            var rowActions = this.getAction(rowIndex);\r\n\r\n            return _.filter(rowActions, this.isActionVisible, this);\r\n        },\r\n\r\n        /**\r\n         * Adds new action. If an action with the specified identifier\r\n         * already exists, then the original will be overridden.\r\n         *\r\n         * @param {String} index - Actions' identifier.\r\n         * @param {Object} action - Actions' data.\r\n         * @returns {ActionsColumn} Chainable.\r\n         */\r\n        addAction: function (index, action) {\r\n            var actionTmpls = this.templates.actions;\r\n\r\n            actionTmpls[index] = action;\r\n\r\n            this.updateActions();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Recreates actions for each row.\r\n         *\r\n         * @returns {ActionsColumn} Chainable.\r\n         */\r\n        updateActions: function () {\r\n            this.actions = this.rows.map(this._formatActions, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Processes actions, setting additional information to them and\r\n         * evaluating their properties as string templates.\r\n         *\r\n         * @private\r\n         * @param {Object} row - Row object.\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @returns {Array}\r\n         */\r\n        _formatActions: function (row, rowIndex) {\r\n            var rowActions      = row[this.index] || {},\r\n                recordId        = row[this.indexField],\r\n                customActions   = this.templates.actions;\r\n\r\n            /**\r\n             * Actions iterator.\r\n             */\r\n            function iterate(action, index) {\r\n                action = utils.extend({\r\n                    index: index,\r\n                    rowIndex: rowIndex,\r\n                    recordId: recordId\r\n                }, action);\r\n\r\n                return utils.template(action, row, true);\r\n            }\r\n\r\n            rowActions      = _.mapObject(rowActions, iterate);\r\n            customActions   = _.map(customActions, iterate);\r\n\r\n            customActions.forEach(function (action) {\r\n                rowActions[action.index] = action;\r\n            });\r\n\r\n            return rowActions;\r\n        },\r\n\r\n        /**\r\n         * Applies specified action.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @returns {ActionsColumn} Chainable.\r\n         */\r\n        applyAction: function (actionIndex, rowIndex) {\r\n            var action = this.getAction(rowIndex, actionIndex),\r\n                callback = this._getCallback(action);\r\n\r\n            action.confirm ?\r\n                this._confirm(action, callback) :\r\n                callback();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates handler for the provided action if it's required.\r\n         *\r\n         * @param {Object} action - Action object.\r\n         * @returns {Function|Undefined}\r\n         */\r\n        getActionHandler: function (action) {\r\n            var index = action.index,\r\n                rowIndex = action.rowIndex;\r\n\r\n            if (this.isHandlerRequired(index, rowIndex)) {\r\n                return this.applyAction.bind(this, index, rowIndex);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns target of action if it's been set.\r\n         *\r\n         * @param {Object} action - Action object.\r\n         * @returns {String}\r\n         */\r\n        getTarget: function (action) {\r\n            if (action.target) {\r\n                return action.target;\r\n            }\r\n\r\n            return '_self';\r\n        },\r\n\r\n        /**\r\n         * Checks if specified action requires a handler function.\r\n         *\r\n         * @param {String} actionIndex - Actions' identifier.\r\n         * @param {Number} rowIndex - Index of a row.\r\n         * @returns {Boolean}\r\n         */\r\n        isHandlerRequired: function (actionIndex, rowIndex) {\r\n            var action = this.getAction(rowIndex, actionIndex);\r\n\r\n            return _.isObject(action.callback) || action.confirm || !action.href;\r\n        },\r\n\r\n        /**\r\n         * Creates action callback based on it's data. If the action doesn't specify\r\n         * a callback function than the default one will be used.\r\n         *\r\n         * @private\r\n         * @param {Object} action - Action's object.\r\n         * @returns {Function} Callback function.\r\n         */\r\n        _getCallback: function (action) {\r\n            var args = [action.index, action.recordId, action],\r\n                callback = action.callback;\r\n\r\n            if (utils.isObject(callback)) {\r\n                args.unshift(callback.target);\r\n\r\n                callback = registry.async(callback.provider);\r\n            } else if (_.isArray(callback)) {\r\n                return this._getCallbacks(action);\r\n            } else if (!_.isFunction(callback)) {\r\n                callback = this.defaultCallback.bind(this);\r\n            }\r\n\r\n            return function () {\r\n                callback.apply(callback, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Creates action callback for multiple actions.\r\n         *\r\n         * @private\r\n         * @param {Object} action - Action's object.\r\n         * @returns {Function} Callback function.\r\n         */\r\n        _getCallbacks: function (action) {\r\n            var callback = action.callback,\r\n                callbacks = [],\r\n                tmpCallback;\r\n\r\n            _.each(callback, function (cb) {\r\n                tmpCallback = {\r\n                    action: registry.async(cb.provider),\r\n                    args: _.compact([cb.target, cb.params])\r\n                };\r\n                callbacks.push(tmpCallback);\r\n            });\r\n\r\n            return function () {\r\n                _.each(callbacks, function (cb) {\r\n                    cb.action.apply(cb.action, cb.args);\r\n                });\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Default action callback. Redirects to\r\n         * the specified in action's data url.\r\n         *\r\n         * @param {String} actionIndex - Action's identifier.\r\n         * @param {(Number|String)} recordId - Id of the record associated\r\n         *      with a specified action.\r\n         * @param {Object} action - Action's data.\r\n         */\r\n        defaultCallback: function (actionIndex, recordId, action) {\r\n            if (action.post) {\r\n                dataPost().postData({\r\n                    action: action.href,\r\n                    data: {}\r\n                });\r\n            } else {\r\n                window.location.href = action.href;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Shows actions' confirmation window.\r\n         *\r\n         * @param {Object} action - Action's data.\r\n         * @param {Function} callback - Callback that will be\r\n         *      invoked if action is confirmed.\r\n         */\r\n        _confirm: function (action, callback) {\r\n            var confirmData = action.confirm;\r\n\r\n            confirm({\r\n                title: confirmData.title,\r\n                content: confirmData.message,\r\n                actions: {\r\n                    confirm: callback\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Checks if row has only one visible action.\r\n         *\r\n         * @param {Number} rowIndex - Row index.\r\n         * @returns {Boolean}\r\n         */\r\n        isSingle: function (rowIndex) {\r\n            return this.getVisibleActions(rowIndex).length === 1;\r\n        },\r\n\r\n        /**\r\n         * Checks if row has more than one visible action.\r\n         *\r\n         * @param {Number} rowIndex - Row index.\r\n         * @returns {Boolean}\r\n         */\r\n        isMultiple: function (rowIndex) {\r\n            return this.getVisibleActions(rowIndex).length > 1;\r\n        },\r\n\r\n        /**\r\n         * Checks if action should be displayed.\r\n         *\r\n         * @param {Object} action - Action object.\r\n         * @returns {Boolean}\r\n         */\r\n        isActionVisible: function (action) {\r\n            return action.hidden !== true;\r\n        },\r\n\r\n        /**\r\n         * Overrides base method, because this component\r\n         * can't have global field action.\r\n         *\r\n         * @returns {Boolean} False.\r\n         */\r\n        hasFieldAction: function () {\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/column.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'uiElement'\r\n], function (_, registry, utils, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            headerTmpl: 'ui/grid/columns/text',\r\n            bodyTmpl: 'ui/grid/cells/text',\r\n            disableAction: false,\r\n            controlVisibility: true,\r\n            sortable: true,\r\n            sorting: false,\r\n            visible: true,\r\n            draggable: true,\r\n            fieldClass: {},\r\n            ignoreTmpls: {\r\n                fieldAction: true\r\n            },\r\n            statefull: {\r\n                visible: true,\r\n                sorting: true\r\n            },\r\n            imports: {\r\n                exportSorting: 'sorting'\r\n            },\r\n            listens: {\r\n                '${ $.provider }:params.sorting.field': 'onSortChange'\r\n            },\r\n            modules: {\r\n                source: '${ $.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes column component.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initFieldClass();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'visible',\r\n                    'sorting',\r\n                    'disableAction'\r\n                ])\r\n                .observe([\r\n                    'dragging'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends list of field classes.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        initFieldClass: function () {\r\n            _.extend(this.fieldClass, {\r\n                _dragging: this.dragging\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies specified stored state of a column or one of its' properties.\r\n         *\r\n         * @param {String} state - Defines what state should be used: saved or default.\r\n         * @param {String} [property] - Defines what columns' property should be applied.\r\n         *      If not specified, then all columns stored properties will be used.\r\n         * @returns {Column} Chainable.\r\n         */\r\n        applyState: function (state, property) {\r\n            var namespace = this.storageConfig.root;\r\n\r\n            if (property) {\r\n                namespace += '.' + property;\r\n            }\r\n\r\n            this.storage('applyStateOf', state, namespace);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets columns' sorting. If column is currently sorted,\r\n         * than its' direction will be toggled.\r\n         *\r\n         * @param {*} [enable=true] - If false, than sorting will\r\n         *      be removed from a column.\r\n         * @returns {Column} Chainable.\r\n         */\r\n        sort: function (enable) {\r\n            if (!this.sortable) {\r\n                return this;\r\n            }\r\n\r\n            enable !== false ?\r\n                this.toggleSorting() :\r\n                this.sorting = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets descending columns' sorting.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        sortDescending: function () {\r\n            if (this.sortable) {\r\n                this.sorting = 'desc';\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets ascending columns' sorting.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        sortAscending: function () {\r\n            if (this.sortable) {\r\n                this.sorting = 'asc';\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles sorting direction.\r\n         *\r\n         * @returns {Column} Chainable.\r\n         */\r\n        toggleSorting: function () {\r\n            this.sorting === 'asc' ?\r\n                this.sortDescending() :\r\n                this.sortAscending();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if column is sorted.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isSorted: function () {\r\n            return !!this.sorting;\r\n        },\r\n\r\n        /**\r\n         * Exports sorting data to the dataProvider if\r\n         * sorting of a column is enabled.\r\n         */\r\n        exportSorting: function () {\r\n            if (!this.sorting) {\r\n                return;\r\n            }\r\n\r\n            this.source('set', 'params.sorting', {\r\n                field: this.index,\r\n                direction: this.sorting\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Checks if column has an assigned action that will\r\n         * be performed when clicking on one of its' fields.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasFieldAction: function () {\r\n            return !!this.fieldAction || !!this.fieldActions;\r\n        },\r\n\r\n        /**\r\n         * Applies action described in a 'fieldAction' property\r\n         * or actions described in 'fieldActions' property.\r\n         *\r\n         * @param {Number} rowIndex - Index of a row which initiates action.\r\n         * @returns {Column} Chainable.\r\n         *\r\n         * @example Example of fieldAction definition, which is equivalent to\r\n         *      referencing to external component named 'listing.multiselect'\r\n         *      and calling its' method 'toggleSelect' with params [rowIndex, true] =>\r\n         *\r\n         *      {\r\n         *          provider: 'listing.multiselect',\r\n         *          target: 'toggleSelect',\r\n         *          params: ['${ $.$data.rowIndex }', true]\r\n         *      }\r\n         */\r\n        applyFieldAction: function (rowIndex) {\r\n            if (!this.hasFieldAction() || this.disableAction) {\r\n                return this;\r\n            }\r\n\r\n            if (this.fieldActions) {\r\n                this.fieldActions.forEach(this.applySingleAction.bind(this, rowIndex), this);\r\n            } else {\r\n                this.applySingleAction(rowIndex);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies single action\r\n         *\r\n         * @param {Number} rowIndex - Index of a row which initiates action.\r\n         * @param {Object} action - Action (fieldAction) to be applied\r\n         *\r\n         */\r\n        applySingleAction: function (rowIndex, action) {\r\n            var callback;\r\n\r\n            action = action || this.fieldAction;\r\n            action = utils.template(action, {\r\n                column: this,\r\n                rowIndex: rowIndex\r\n            }, true);\r\n\r\n            callback = this._getFieldCallback(action);\r\n\r\n            if (_.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns field action handler if it was specified.\r\n         *\r\n         * @param {Object} record - Record object with which action is associated.\r\n         * @returns {Function|Undefined}\r\n         */\r\n        getFieldHandler: function (record) {\r\n            if (this.hasFieldAction()) {\r\n                return this.applyFieldAction.bind(this, record._rowIndex);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates action callback based on its' data.\r\n         *\r\n         * @param {Object} action - Actions' object.\r\n         * @returns {Function|Boolean} Callback function or false\r\n         *      value if it was impossible create a callback.\r\n         */\r\n        _getFieldCallback: function (action) {\r\n            var args     = action.params || [],\r\n                callback = action.target;\r\n\r\n            if (action.provider && action.target) {\r\n                args.unshift(action.target);\r\n\r\n                callback = registry.async(action.provider);\r\n            }\r\n\r\n            if (!_.isFunction(callback)) {\r\n                return false;\r\n            }\r\n\r\n            return function () {\r\n                callback.apply(callback, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Ment to preprocess data associated with a current columns' field.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {String}\r\n         */\r\n        getLabel: function (record) {\r\n            return record !== undefined ? record[this.index] : null;\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getLabel.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {String}\r\n         */\r\n        getLabelUnsanitizedHtml: function (record) {\r\n            return this.getLabel(record);\r\n        },\r\n\r\n        /**\r\n         * Returns list of classes that should be applied to a field.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getFieldClass: function () {\r\n            return this.fieldClass;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the columns' header template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getHeader: function () {\r\n            return this.headerTmpl;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the columns' body template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getBody: function () {\r\n            return this.bodyTmpl;\r\n        },\r\n\r\n        /**\r\n         * Listener of the providers' sorting state changes.\r\n         *\r\n         * @param {Srting} field - Field by which current sorting is performed.\r\n         */\r\n        onSortChange: function (field) {\r\n            if (field !== this.index) {\r\n                this.sort(false);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/date.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'mageUtils',\r\n    'moment',\r\n    './column',\r\n    'underscore',\r\n    'moment-timezone-with-data'\r\n], function (utils, moment, Column, _) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            dateFormat: 'MMM d, YYYY h:mm:ss A',\r\n            calendarConfig: []\r\n        },\r\n\r\n        /**\r\n         * Overrides base method to normalize date format\r\n         *\r\n         * @returns {DateColumn} Chainable\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.dateFormat = utils.normalizeDate(this.dateFormat ? this.dateFormat : this.options.dateFormat);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Formats incoming date based on the 'dateFormat' property.\r\n         *\r\n         * @returns {String} Formatted date.\r\n         */\r\n        getLabel: function (value, format) {\r\n            var date;\r\n\r\n            if (this.storeLocale !== undefined) {\r\n                moment.locale(this.storeLocale, utils.extend({}, this.calendarConfig));\r\n            }\r\n\r\n            date = moment.utc(this._super());\r\n\r\n            if (!_.isUndefined(this.timezone) && moment.tz.zone(this.timezone) !== null) {\r\n                date = date.tz(this.timezone);\r\n            }\r\n\r\n            date = date.isValid() && value[this.index] ?\r\n                date.format(format || this.dateFormat) :\r\n                '';\r\n\r\n            return date;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/expandable.js":"/**\r\n * Copyright \u00a9 2016 Magento. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    './column',\r\n    'underscore'\r\n], function (Column, _) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/cells/expandable',\r\n            tooltipTmpl: 'ui/grid/cells/expandable/content',\r\n            visibeItemsLimit: 5,\r\n            tooltipTitle: ''\r\n        },\r\n\r\n        /**\r\n         * Gets label from full options array.\r\n         *\r\n         * @param {Object} record - Record object.\r\n         * @returns {String}\r\n         */\r\n        getFullLabel: function (record) {\r\n            return this.getLabelsArray(record).join(', ');\r\n        },\r\n\r\n        /**\r\n         * Gets label from options array limited by 'visibeItemsLimit'.\r\n         *\r\n         * @param {Object} record - Record object.\r\n         * @returns {String}\r\n         */\r\n        getShortLabel: function (record) {\r\n            return this.getLabelsArray(record).slice(0, this.visibeItemsLimit).join(', ');\r\n        },\r\n\r\n        /**\r\n         * Extracts array of labels associated with provided values and sort it alphabetically.\r\n         *\r\n         * @param {Object} record - Record object.\r\n         * @returns {Array}\r\n         */\r\n        getLabelsArray: function (record) {\r\n            var values = this.getLabel(record),\r\n                options = this.options || [],\r\n                labels = [];\r\n\r\n            if (_.isString(values)) {\r\n                values = values.split(',');\r\n            }\r\n\r\n            if (!Array.isArray(values)) {\r\n                values = [values];\r\n            }\r\n\r\n            values = values.map(function (value) {\r\n                return value + '';\r\n            });\r\n\r\n            options = this.flatOptions(options);\r\n\r\n            options.forEach(function (item) {\r\n                if (_.contains(values, item.value + '')) {\r\n                    labels.push(item.label);\r\n                }\r\n            });\r\n\r\n            return labels.sort(\r\n                function (labelFirst, labelSecond) {\r\n                    return labelFirst.toLowerCase().localeCompare(labelSecond.toLowerCase());\r\n                }\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Transformation tree options structure to liner array.\r\n         *\r\n         * @param {Array} options\r\n         * @returns {Array}\r\n         */\r\n        flatOptions: function (options) {\r\n            var self = this;\r\n\r\n            return options.reduce(function (opts, option) {\r\n                if (_.isArray(option.value)) {\r\n                    opts = opts.concat(self.flatOptions(option.value));\r\n                } else {\r\n                    opts.push(option);\r\n                }\r\n\r\n                return opts;\r\n            }, []);\r\n        },\r\n\r\n        /**\r\n         * Checks if amount of options is more than limit value.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Boolean}\r\n         */\r\n        isExpandable: function (record) {\r\n            return this.getLabel(record).length > this.visibeItemsLimit;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/image-preview.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/* eslint-disable no-undef */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Ui/js/lib/key-codes'\r\n], function ($, _, Column, keyCodes) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/columns/image-preview',\r\n            previewImageSelector: '[data-image-preview]',\r\n            visibleRecord: null,\r\n            height: 0,\r\n            displayedRecord: {},\r\n            lastOpenedImage: false,\r\n            fields: {\r\n                previewUrl: 'preview_url',\r\n                title: 'title'\r\n            },\r\n            modules: {\r\n                masonry: '${ $.parentName }',\r\n                thumbnailComponent: '${ $.parentName }.thumbnail_url'\r\n            },\r\n            statefull: {\r\n                sorting: true,\r\n                lastOpenedImage: true\r\n            },\r\n            listens: {\r\n                '${ $.provider }:params.filters': 'hide',\r\n                '${ $.provider }:params.search': 'hide',\r\n                '${ $.provider }:params.paging': 'hide',\r\n                '${ $.provider }:data.items': 'updateDisplayedRecord'\r\n            },\r\n            exports: {\r\n                height: '${ $.parentName }.thumbnail_url:previewHeight'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize image preview component\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            $(document).on('keydown', this.handleKeyDown.bind(this));\r\n\r\n            this.lastOpenedImage.subscribe(function (newValue) {\r\n\r\n                if (newValue === false && _.isNull(this.visibleRecord())) {\r\n                    return;\r\n                }\r\n\r\n                if (newValue === this.visibleRecord()) {\r\n                    return;\r\n                }\r\n\r\n                if (newValue === false) {\r\n                    this.hide();\r\n\r\n                    return;\r\n                }\r\n\r\n                this.show(this.masonry().rows()[newValue]);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'visibleRecord',\r\n                    'height',\r\n                    'displayedRecord',\r\n                    'lastOpenedImage'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Next image preview\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        next: function (record) {\r\n            var recordToShow;\r\n\r\n            if (record._rowIndex + 1 === this.masonry().rows().length) {\r\n                return;\r\n            }\r\n\r\n            recordToShow = this.getRecord(record._rowIndex + 1);\r\n            recordToShow.rowNumber = record.lastInRow ? record.rowNumber + 1 : record.rowNumber;\r\n            this.show(recordToShow);\r\n        },\r\n\r\n        /**\r\n         * Previous image preview\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        prev: function (record) {\r\n            var recordToShow;\r\n\r\n            if (record._rowIndex === 0) {\r\n                return;\r\n            }\r\n            recordToShow = this.getRecord(record._rowIndex - 1);\r\n\r\n            recordToShow.rowNumber = record.firstInRow ? record.rowNumber - 1 : record.rowNumber;\r\n            this.show(recordToShow);\r\n        },\r\n\r\n        /**\r\n         * Get record\r\n         *\r\n         * @param {Integer} recordIndex\r\n         *\r\n         * @return {Object}\r\n         */\r\n        getRecord: function (recordIndex) {\r\n            return this.masonry().rows()[recordIndex];\r\n        },\r\n\r\n        /**\r\n         * Set selected row id\r\n         *\r\n         * @param {Number} rowId\r\n         * @private\r\n         */\r\n        _selectRow: function (rowId) {\r\n            this.thumbnailComponent().previewRowId(rowId);\r\n        },\r\n\r\n        /**\r\n         * Show image preview\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        show: function (record) {\r\n            if (record._rowIndex === this.visibleRecord()) {\r\n                this.hide();\r\n\r\n                return;\r\n            }\r\n\r\n            this.hide();\r\n            this.displayedRecord(record);\r\n            this._selectRow(record.rowNumber || null);\r\n            this.visibleRecord(record._rowIndex);\r\n\r\n            this.lastOpenedImage(record._rowIndex);\r\n            this.updateImageData();\r\n        },\r\n\r\n        /**\r\n         * Update image data when image preview is opened\r\n         */\r\n        updateImageData: function () {\r\n            var img = $(this.previewImageSelector + ' img'), self;\r\n\r\n            if (!img.get(0)) {\r\n                setTimeout(function () {\r\n                    this.updateImageData();\r\n                }.bind(this), 100);\r\n            } else if (img.get(0).complete) {\r\n                this.updateHeight();\r\n                this.scrollToPreview();\r\n            } else {\r\n                self = this;\r\n\r\n                img.on('load', function () {\r\n                    self.updateHeight();\r\n                    self.scrollToPreview();\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update preview displayed record data from the new items data if the preview is expanded\r\n         *\r\n         * @param {Array} items\r\n         */\r\n        updateDisplayedRecord: function (items) {\r\n            if (!_.isNull(this.visibleRecord())) {\r\n                this.displayedRecord(items[this.visibleRecord()]);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update image preview section height\r\n         */\r\n        updateHeight: function () {\r\n            this.height($(this.previewImageSelector).height() + 'px');\r\n        },\r\n\r\n        /**\r\n         * Close image preview\r\n         */\r\n        hide: function () {\r\n            this.lastOpenedImage(false);\r\n            this.visibleRecord(null);\r\n            this.height(0);\r\n            this._selectRow(null);\r\n        },\r\n\r\n        /**\r\n         * Returns visibility for given record.\r\n         *\r\n         * @param {Object} record\r\n         * @return {*|bool}\r\n         */\r\n        isVisible: function (record) {\r\n            if (this.lastOpenedImage() === record._rowIndex &&\r\n                this.visibleRecord() === null\r\n            ) {\r\n                this.show(record);\r\n            }\r\n\r\n            return this.visibleRecord() === record._rowIndex || false;\r\n        },\r\n\r\n        /**\r\n         * Returns preview image url for a given record.\r\n         *\r\n         * @param {Object} record\r\n         * @return {String}\r\n         */\r\n        getUrl: function (record) {\r\n            return record[this.fields.previewUrl];\r\n        },\r\n\r\n        /**\r\n         * Returns image title for a given record.\r\n         *\r\n         * @param {Object} record\r\n         * @return {String}\r\n         */\r\n        getTitle: function (record) {\r\n            return record[this.fields.title];\r\n        },\r\n\r\n        /**\r\n         * Get styles for preview\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getStyles: function () {\r\n            return {\r\n                'margin-top': '-' + this.height()\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Scroll to preview window\r\n         */\r\n        scrollToPreview: function () {\r\n            $(this.previewImageSelector).get(0).scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'center',\r\n                inline: 'nearest'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Handle keyboard navigation for image preview\r\n         *\r\n         * @param {Object} e\r\n         */\r\n        handleKeyDown: function (e) {\r\n            var key = keyCodes[e.keyCode];\r\n\r\n            if (this.visibleRecord() !== null && document.activeElement.tagName !== 'INPUT') {\r\n                if (key === 'pageLeftKey') {\r\n                    this.prev(this.displayedRecord());\r\n                } else if (key === 'pageRightKey') {\r\n                    this.next(this.displayedRecord());\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/image.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/columns/image',\r\n            modules: {\r\n                masonry: '${ $.parentName }',\r\n                previewComponent: '${ $.parentName }.preview'\r\n            },\r\n            previewRowId: null,\r\n            previewHeight: 0,\r\n            fields: {\r\n                id: 'id',\r\n                url: 'url'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'previewRowId',\r\n                    'previewHeight'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates styles when image loaded.\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        updateStyles: function (record) {\r\n            !record.lastInRow || this.masonry().updateStyles();\r\n        },\r\n\r\n        /**\r\n         * Returns url to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {String}\r\n         */\r\n        getUrl: function (record) {\r\n            return record[this.fields.url];\r\n        },\r\n\r\n        /**\r\n         * Returns id to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Number}\r\n         */\r\n        getId: function (record) {\r\n            return record[this.fields.id];\r\n        },\r\n\r\n        /**\r\n         * Returns container styles to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Object}\r\n         */\r\n        getStyles: function (record) {\r\n            var styles = record.styles();\r\n\r\n            styles['margin-bottom'] = this.previewRowId() === record.rowNumber ? this.previewHeight : 0;\r\n            record.styles(styles);\r\n\r\n            return record.styles;\r\n        },\r\n\r\n        /**\r\n         * Returns class list to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Object}\r\n         */\r\n        getClasses: function (record) {\r\n            return record.css || {};\r\n        },\r\n\r\n        /**\r\n         * Get is active record\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        getIsActive: function (record) {\r\n            return this.previewComponent().visibleRecord() === record._rowIndex || false;\r\n        },\r\n\r\n        /**\r\n         * Expand image preview\r\n         */\r\n        expandPreview: function (record) {\r\n            this.previewComponent().show(record);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/link.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    './column',\r\n    'mageUtils'\r\n], function (Column, utils) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            link: 'link',\r\n            bodyTmpl: 'ui/grid/cells/link'\r\n        },\r\n\r\n        /**\r\n         * Returns link to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {String}\r\n         */\r\n        getLink: function (record) {\r\n            return utils.nested(record, this.link);\r\n        },\r\n\r\n        /**\r\n         * Check if link parameter exist in record.\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Boolean}\r\n         */\r\n        isLink: function (record) {\r\n            return !!utils.nested(record, this.link);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/multiselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mage/translate',\r\n    './column'\r\n], function (_, $t, Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            headerTmpl: 'ui/grid/columns/multiselect',\r\n            bodyTmpl: 'ui/grid/cells/multiselect',\r\n            controlVisibility: false,\r\n            sortable: false,\r\n            draggable: false,\r\n            menuVisible: false,\r\n            excludeMode: false,\r\n            allSelected: false,\r\n            indetermine: false,\r\n            preserveSelectionsOnFilter: false,\r\n            disabled: [],\r\n            selected: [],\r\n            excluded: [],\r\n            fieldClass: {\r\n                'data-grid-checkbox-cell': true\r\n            },\r\n            actions: [{\r\n                value: 'selectAll',\r\n                label: $t('Select All')\r\n            }, {\r\n                value: 'deselectAll',\r\n                label: $t('Deselect All')\r\n            }, {\r\n                value: 'selectPage',\r\n                label: $t('Select All on This Page')\r\n            }, {\r\n                value: 'deselectPage',\r\n                label: $t('Deselect All on This Page')\r\n            }],\r\n\r\n            imports: {\r\n                totalRecords: '${ $.provider }:data.totalRecords',\r\n                showTotalRecords: '${ $.provider }:data.showTotalRecords',\r\n                rows: '${ $.provider }:data.items'\r\n            },\r\n\r\n            listens: {\r\n                '${ $.provider }:params.filters': 'onFilter',\r\n                '${ $.provider }:params.search': 'onSearch',\r\n                selected: 'onSelectedChange',\r\n                rows: 'onRowsChange'\r\n            },\r\n\r\n            modules: {\r\n                source: '${ $.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'disabled',\r\n                    'selected',\r\n                    'excluded',\r\n                    'excludeMode',\r\n                    'totalSelected',\r\n                    'allSelected',\r\n                    'indetermine',\r\n                    'totalRecords',\r\n                    'showTotalRecords',\r\n                    'rows'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Selects specified record.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        select: function (id, isIndex) {\r\n            this._setSelection(id, isIndex, true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Deselects specified record.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        deselect: function (id, isIndex) {\r\n            this._setSelection(id, isIndex, false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles selection of a specified record.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        toggleSelect: function (id, isIndex) {\r\n            this._setSelection(id, isIndex, !this.isSelected(id, isIndex));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if specified record is selected.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @returns {Boolean}\r\n         */\r\n        isSelected: function (id, isIndex) {\r\n            id = this.getId(id, isIndex);\r\n\r\n            return this.selected.contains(id);\r\n        },\r\n\r\n        /**\r\n         * Selects/deselects specified record base on a 'select' parameter value.\r\n         *\r\n         * @param {*} id - See definition of 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See definition of 'getId' method.\r\n         * @param {Boolean} select - Whether to select/deselect record.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        _setSelection: function (id, isIndex, select) {\r\n            var selected = this.selected;\r\n\r\n            id = this.getId(id, isIndex);\r\n\r\n            if (!select && this.isSelected(id)) {\r\n                selected.remove(id);\r\n            } else if (select) {\r\n                selected.push(id);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Selects all records, even those that\r\n         * are not visible on the page.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        selectAll: function () {\r\n            this.excludeMode(true);\r\n\r\n            this.clearExcluded()\r\n                .selectPage();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Deselects all records.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        deselectAll: function () {\r\n            this.excludeMode(false);\r\n\r\n            this.clearExcluded();\r\n            this.selected.removeAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Selects or deselects all records.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        toggleSelectAll: function () {\r\n            this.allSelected() ?\r\n                this.deselectAll() :\r\n                this.selectAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Selects all records on the current page.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        selectPage: function () {\r\n            var selected = _.union(this.selected(), this.getIds());\r\n\r\n            selected = _.difference(selected, this.disabled());\r\n\r\n            this.selected(selected);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Deselects all records on the current page.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        deselectPage: function () {\r\n            var pageIds = this.getIds();\r\n\r\n            this.selected.remove(function (value) {\r\n                return !!~pageIds.indexOf(value);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n        * Selects or deselects all records on the current page.\r\n        *\r\n        * @returns {Multiselect} Chainable.\r\n        */\r\n        togglePage: function () {\r\n            return this.isPageSelected() && !this.excluded().length ? this.deselectPage() : this.selectPage();\r\n        },\r\n\r\n        /**\r\n         * Clears the array of not selected records.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        clearExcluded: function () {\r\n            this.excluded.removeAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieve all id's from available records.\r\n         *\r\n         * @param {Boolean} [exclude] - Whether to exclude not selected ids' from result.\r\n         * @returns {Array} An array of ids'.\r\n         */\r\n        getIds: function (exclude) {\r\n            var items = this.rows(),\r\n                ids = _.pluck(items, this.indexField);\r\n\r\n            return exclude ?\r\n                _.difference(ids, this.excluded()) :\r\n                ids;\r\n        },\r\n\r\n        /**\r\n         * Returns identifier of a record.\r\n         *\r\n         * @param {*} id - Id of a record or its' index in a rows array.\r\n         * @param {Boolean} [isIndex=false] - Flag that specifies with what\r\n         *      kind of identifier we are dealing with.\r\n         * @returns {*}\r\n         */\r\n        getId: function (id, isIndex) {\r\n            var record = this.rows()[id];\r\n\r\n            if (isIndex && record) {\r\n                id = record[this.indexField];\r\n            }\r\n\r\n            return id;\r\n        },\r\n\r\n        /**\r\n         * Recalculates list of the excluded records.\r\n         * Changes value of `excluded`.\r\n         *\r\n         * @param {Array} selected - List of the currently selected records.\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        updateExcluded: function (selected) {\r\n            var excluded = this.excluded(),\r\n                fromPage = _.difference(this.getIds(), selected);\r\n\r\n            excluded = _.union(excluded, fromPage);\r\n            excluded = _.difference(excluded, selected);\r\n\r\n            this.excluded(excluded);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calculates number of selected records and\r\n         * updates 'totalSelected' property.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        countSelected: function () {\r\n            var total = this.totalRecords(),\r\n                excluded = this.excluded().length,\r\n                selected = this.selected().length;\r\n\r\n            if (this.excludeMode()) {\r\n                selected = total - excluded;\r\n            }\r\n\r\n            this.totalSelected(selected);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns selected items on a current page.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getPageSelections: function () {\r\n            var ids = this.getIds();\r\n\r\n            return this.selected.filter(function (id) {\r\n                return _.contains(ids, id);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Returns selections data.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getSelections: function () {\r\n            return {\r\n                excluded: this.excluded(),\r\n                selected: this.selected(),\r\n                total: this.totalSelected(),\r\n                showTotalRecords: this.showTotalRecords(),\r\n                excludeMode: this.excludeMode(),\r\n                params: this.getFiltering()\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Extracts filtering data from data provider.\r\n         *\r\n         * @returns {Object} Current filters state.\r\n         */\r\n        getFiltering: function () {\r\n            var source = this.source(),\r\n                keys = ['filters', 'search', 'namespace'];\r\n\r\n            if (!source) {\r\n                return {};\r\n            }\r\n\r\n            return _.pick(source.get('params'), keys);\r\n        },\r\n\r\n        /**\r\n         * Defines if provided select/deselect actions is relevant.\r\n         * E.g. there is no need in a 'select page' action if only one\r\n         * page is available.\r\n         *\r\n         * @param {String} actionId - Id of the action to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isActionRelevant: function (actionId) {\r\n            var pageIds         = this.getIds().length,\r\n                multiplePages   = pageIds < this.totalRecords(),\r\n                relevant        = true;\r\n\r\n            switch (actionId) {\r\n                case 'selectPage':\r\n                    relevant = multiplePages && !this.isPageSelected(true);\r\n                    break;\r\n\r\n                case 'deselectPage':\r\n                    relevant =  multiplePages && this.isPageSelected();\r\n                    break;\r\n\r\n                case 'selectAll':\r\n                    relevant = !this.allSelected();\r\n                    break;\r\n\r\n                case 'deselectAll':\r\n                    relevant = this.totalSelected() > 0;\r\n            }\r\n\r\n            return relevant;\r\n        },\r\n\r\n        /**\r\n         * Checks if current page has selected records.\r\n         *\r\n         * @param {Boolean} [all=false] - If set to 'true' checks that every\r\n         *      record on the page is selected. Otherwise checks that\r\n         *      page has some selected records.\r\n         * @returns {Boolean}\r\n         */\r\n        isPageSelected: function (all) {\r\n            var pageIds = this.getIds(),\r\n                selected = this.selected(),\r\n                excluded = this.excluded(),\r\n                iterator = all ? 'every' : 'some';\r\n\r\n            if (this.allSelected()) {\r\n                return true;\r\n            }\r\n\r\n            if (this.excludeMode()) {\r\n                return pageIds[iterator](function (id) {\r\n                    return !~excluded.indexOf(id);\r\n                });\r\n            }\r\n\r\n            return pageIds[iterator](function (id) {\r\n                return !!~selected.indexOf(id);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates values of the 'allSelected'\r\n         * and 'indetermine' properties.\r\n         *\r\n         * @returns {Multiselect} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var selected        = this.selected().length,\r\n                excluded        = this.excluded().length,\r\n                totalSelected   = this.totalSelected(),\r\n                totalRecords    = this.totalRecords(),\r\n                allSelected     = totalRecords && totalSelected === totalRecords;\r\n\r\n            if (this.excludeMode()) {\r\n                if (excluded === totalRecords && !this.preserveSelectionsOnFilter) {\r\n                    this.deselectAll();\r\n                }\r\n            } else if (totalRecords && selected === totalRecords && !this.preserveSelectionsOnFilter) {\r\n                this.selectAll();\r\n            }\r\n\r\n            this.allSelected(allSelected);\r\n            this.indetermine(totalSelected && !allSelected);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Overrides base method, because this component\r\n         * can't have global field action.\r\n         *\r\n         * @returns {Boolean} False.\r\n         */\r\n        hasFieldAction: function () {\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Callback method to handle changes of selected items.\r\n         *\r\n         * @param {Array} selected - An array of currently selected items.\r\n         */\r\n        onSelectedChange: function (selected) {\r\n            this.updateExcluded(selected)\r\n                .countSelected()\r\n                .updateState();\r\n        },\r\n\r\n        /**\r\n         * Is invoked when rows has changed. Recalculates selected items\r\n         * based on \"selectMode\" property.\r\n         */\r\n        onRowsChange: function () {\r\n            var newSelections;\r\n\r\n            if (this.excludeMode()) {\r\n                newSelections = _.union(this.getIds(true), this.selected());\r\n\r\n                this.selected(newSelections);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Is invoked when filtration is applied or removed\r\n         */\r\n        onFilter: function () {\r\n            if (!this.preserveSelectionsOnFilter) {\r\n                this.deselectAll();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Is invoked when search is applied or removed\r\n         */\r\n        onSearch: function () {\r\n            this.onFilter();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/onoff.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mage/translate',\r\n    './multiselect',\r\n    'uiRegistry'\r\n], function (_, $t, Column, registry) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            headerTmpl: 'ui/grid/columns/onoff',\r\n            bodyTmpl: 'ui/grid/cells/onoff',\r\n            fieldClass: {\r\n                'admin__scope-old': true,\r\n                'data-grid-onoff-cell': true,\r\n                'data-grid-checkbox-cell': false\r\n            },\r\n            imports: {\r\n                selectedData: '${ $.provider }:data.selectedData'\r\n            },\r\n            listens: {\r\n                '${ $.provider }:reloaded': 'setDefaultSelections'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Number} id\r\n         * @returns {*}\r\n         */\r\n        getLabel: function (id) {\r\n            return this.selected.indexOf(id) !== -1 ? $t('On') : $t('Off');\r\n        },\r\n\r\n        /**\r\n         * Sets the ids for preselected elements\r\n         * @returns void\r\n         */\r\n        setDefaultSelections: function () {\r\n            var positionCacheValid = registry.get('position_cache_valid'),\r\n                selectedFromCache = registry.get('selected_cache'),\r\n                key,\r\n                i;\r\n\r\n            if (positionCacheValid && this.selected().length === 0) {\r\n                // Check selected data\r\n                selectedFromCache = JSON.parse(selectedFromCache);\r\n\r\n                for (i = 0; i < selectedFromCache.length; i++) {\r\n                    this.selected.push(selectedFromCache[i]);\r\n                }\r\n\r\n                registry.set('position_cache_valid', true);\r\n                registry.set('selected_cache', JSON.stringify(this.selected()));\r\n\r\n                return;\r\n            }\r\n\r\n            if (positionCacheValid && this.selected().length > 0) {\r\n                registry.set('position_cache_valid', true);\r\n                registry.set('selected_cache', JSON.stringify(this.selected()));\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.selectedData.length === 0) {\r\n                registry.set('position_cache_valid', true);\r\n                registry.set('selected_cache', JSON.stringify([]));\r\n\r\n                return;\r\n            }\r\n\r\n            // Check selected data\r\n            for (key in this.selectedData) {\r\n                if (this.selectedData.hasOwnProperty(key) && this.selected().indexOf(key) === -1) {\r\n                    this.selected.push(key);\r\n                }\r\n            }\r\n            // Uncheck unselected data\r\n            for (i = 0; i < this.selected().length; i++) {\r\n                key = this.selected()[i];\r\n                this.selectedData.hasOwnProperty(key) || this.selected.splice(this.selected().indexOf(key), 1);\r\n                this.selectedData.hasOwnProperty(key) || i--;\r\n            }\r\n            registry.set('position_cache_valid', true);\r\n            registry.set('selected_cache', JSON.stringify(this.selected()));\r\n        },\r\n\r\n        /**\r\n         * Show/hide action in the massaction menu\r\n         * @param {Number} actionId\r\n         * @returns {Boolean}\r\n         */\r\n        isActionRelevant: function (actionId) {\r\n            var relevant = true;\r\n\r\n            switch (actionId) {\r\n                case 'selectPage':\r\n                    relevant = !this.isPageSelected(true);\r\n                    break;\r\n\r\n                case 'deselectPage':\r\n                    relevant =  this.isPageSelected();\r\n                    break;\r\n            }\r\n\r\n            return relevant;\r\n        },\r\n\r\n        /**\r\n         * Updates values of the 'allSelected'\r\n         * and 'indetermine' properties.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var positionCacheValid = registry.get('position_cache_valid'),\r\n                totalRecords    = this.totalRecords(),\r\n                selected        = this.selected().length,\r\n                excluded        = this.excluded().length,\r\n                totalSelected   = this.totalSelected(),\r\n                allSelected;\r\n\r\n            if (positionCacheValid && this.selected().length > 0) {\r\n                registry.set('position_cache_valid', true);\r\n                registry.set('selected_cache', JSON.stringify(this.selected()));\r\n            }\r\n\r\n            // When filters are enabled then totalRecords is unknown\r\n            if (this.getFiltering()) {\r\n                if (this.getFiltering().search !== '') {\r\n                    totalRecords = -1;\r\n                }\r\n            }\r\n\r\n            allSelected = totalRecords && totalSelected === totalRecords;\r\n\r\n            if (this.excludeMode()) {\r\n                if (excluded === totalRecords) {\r\n                    this.deselectAll();\r\n                }\r\n            } else if (totalRecords && selected === totalRecords) {\r\n                this.selectAll();\r\n            }\r\n\r\n            this.allSelected(allSelected);\r\n            this.indetermine(totalSelected && !allSelected);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/overlay.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/columns/overlay'\r\n        },\r\n\r\n        /**\r\n         * If overlay should be visible\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Boolean}\r\n         */\r\n        isVisible: function (row) {\r\n            return !!row[this.index];\r\n        },\r\n\r\n        /**\r\n         * Get overlay label\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getLabel: function (row) {\r\n            return row[this.index];\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    './column'\r\n], function (_, Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        /**\r\n         * Retrieves label associated with a provided value.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getLabel: function () {\r\n            var options = this.options || [],\r\n                values = this._super(),\r\n                label = [];\r\n\r\n            if (_.isString(values)) {\r\n                values = values.split(',');\r\n            }\r\n\r\n            if (!_.isArray(values)) {\r\n                values = [values];\r\n            }\r\n\r\n            values = values.map(function (value) {\r\n                return value + '';\r\n            });\r\n\r\n            options = this.flatOptions(options);\r\n\r\n            options.forEach(function (item) {\r\n                if (_.contains(values, item.value + '')) {\r\n                    label.push(item.label);\r\n                }\r\n            });\r\n\r\n            return label.join(', ');\r\n        },\r\n\r\n        /**\r\n         * Transformation tree options structure to liner array.\r\n         *\r\n         * @param {Array} options\r\n         * @returns {Array}\r\n         */\r\n        flatOptions: function (options) {\r\n            var self = this;\r\n\r\n            if (!_.isArray(options)) {\r\n                options = _.values(options);\r\n            }\r\n\r\n            return options.reduce(function (opts, option) {\r\n                if (_.isArray(option.value)) {\r\n                    opts = opts.concat(self.flatOptions(option.value));\r\n                } else {\r\n                    opts.push(option);\r\n                }\r\n\r\n                return opts;\r\n            }, []);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/columns/thumbnail.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    './column',\r\n    'jquery',\r\n    'mage/template',\r\n    'text!Magento_Ui/templates/grid/cells/thumbnail/preview.html',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate'\r\n], function (Column, $, mageTemplate, thumbnailPreviewTemplate, _) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'ui/grid/cells/thumbnail',\r\n            fieldClass: {\r\n                'data-grid-thumbnail-cell': true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get image source data per row.\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getSrc: function (row) {\r\n            return row[this.index + '_src'];\r\n        },\r\n\r\n        /**\r\n         * Get original image source data per row.\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getOrigSrc: function (row) {\r\n            return row[this.index + '_orig_src'];\r\n        },\r\n\r\n        /**\r\n         * Get link data per row.\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getLink: function (row) {\r\n            return row[this.index + '_link'];\r\n        },\r\n\r\n        /**\r\n         * Get alternative text data per row.\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getAlt: function (row) {\r\n            return _.escape(row[this.index + '_alt']);\r\n        },\r\n\r\n        /**\r\n         * Check if preview available.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isPreviewAvailable: function () {\r\n            return this['has_preview'] || false;\r\n        },\r\n\r\n        /**\r\n         * Build preview.\r\n         *\r\n         * @param {Object} row\r\n         */\r\n        preview: function (row) {\r\n            var modalHtml = mageTemplate(\r\n                    thumbnailPreviewTemplate,\r\n                    {\r\n                        src: this.getOrigSrc(row), alt: this.getAlt(row), link: this.getLink(row),\r\n                        linkText: $.mage.__('Go to Details Page')\r\n                    }\r\n                ),\r\n                previewPopup = $('<div></div>').html(modalHtml);\r\n\r\n            previewPopup.modal({\r\n                title: this.getAlt(row),\r\n                innerScroll: true,\r\n                modalClass: '_image-box',\r\n                buttons: []\r\n            }).trigger('openModal');\r\n        },\r\n\r\n        /**\r\n         * Get field handler per row.\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Function}\r\n         */\r\n        getFieldHandler: function (row) {\r\n            if (this.isPreviewAvailable()) {\r\n                return this.preview.bind(this, row);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/controls/columns.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'mage/translate',\r\n    'uiCollection'\r\n], function (_, utils, $t, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/controls/columns',\r\n            minVisible: 1,\r\n            maxVisible: 30,\r\n            viewportSize: 18,\r\n            displayArea: 'dataGridActions',\r\n            columnsProvider: 'ns = ${ $.ns }, componentType = columns',\r\n            imports: {\r\n                addColumns: '${ $.columnsProvider }:elems'\r\n            },\r\n            templates: {\r\n                headerMsg: $t('${ $.visible } out of ${ $.total } visible')\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Resets columns visibility to theirs default state.\r\n         *\r\n         * @returns {Columns} Chainable.\r\n         */\r\n        reset: function () {\r\n            this.elems.each('applyState', 'default', 'visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies last saved state of columns visibility.\r\n         *\r\n         * @returns {Columns} Chainable.\r\n         */\r\n        cancel: function () {\r\n            this.elems.each('applyState', '', 'visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds columns whose visibility can be controlled to the component.\r\n         *\r\n         * @param {Array} columns - Elements array that will be added to component.\r\n         * @returns {Columns} Chainable.\r\n         */\r\n        addColumns: function (columns) {\r\n            columns = _.where(columns, {\r\n                controlVisibility: true\r\n            });\r\n\r\n            this.insertChild(columns);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines whether child elements array length\r\n         * is greater than the 'viewportSize' property.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasOverflow: function () {\r\n            return this.elems().length > this.viewportSize;\r\n        },\r\n\r\n        /**\r\n         * Helper, checks\r\n         *  - if less than one item choosen\r\n         *  - if more then viewportMaxSize choosen\r\n         *\r\n         * @param {Object} elem\r\n         * @returns {Boolean}\r\n         */\r\n        isDisabled: function (elem) {\r\n            var visible = this.countVisible();\r\n\r\n            return elem.visible ?\r\n                    visible === this.minVisible :\r\n                    visible === this.maxVisible;\r\n        },\r\n\r\n        /**\r\n         * Counts number of visible columns.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countVisible: function () {\r\n            return this.elems.filter('visible').length;\r\n        },\r\n\r\n        /**\r\n         * Compile header message from headerMessage setting.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getHeaderMessage: function () {\r\n            return utils.template(this.templates.headerMsg, {\r\n                visible: this.countVisible(),\r\n                total: this.elems().length\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/controls/bookmarks/bookmarks.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'mage/translate',\r\n    'rjsResolver',\r\n    'uiLayout',\r\n    'uiCollection'\r\n], function (_, utils, $t, resolver, layout, Collection) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Removes 'current' namespace from a 'path' string.\r\n     *\r\n     * @param {String} path\r\n     * @returns {String} Path without namespace.\r\n     */\r\n    function removeStateNs(path) {\r\n        path = typeof path == 'string' ? path.split('.') : [];\r\n\r\n        if (path[0] === 'current') {\r\n            path.shift();\r\n        }\r\n\r\n        return path.join('.');\r\n    }\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/controls/bookmarks/bookmarks',\r\n            viewTmpl: 'ui/grid/controls/bookmarks/view',\r\n            newViewLabel: $t('New View'),\r\n            defaultIndex: 'default',\r\n            activeIndex: 'default',\r\n            viewsArray: [],\r\n            storageConfig: {\r\n                provider: '${ $.storageConfig.name }',\r\n                name: '${ $.name }_storage',\r\n                component: 'Magento_Ui/js/grid/controls/bookmarks/storage'\r\n            },\r\n            views: {\r\n                default: {\r\n                    label: $t('Default View'),\r\n                    index: 'default',\r\n                    editable: false\r\n                }\r\n            },\r\n            tracks: {\r\n                editing: true,\r\n                viewsArray: true,\r\n                activeView: true,\r\n                hasChanges: true,\r\n                customLabel: true,\r\n                customVisible: true,\r\n                isActiveIndexChanged: false\r\n            },\r\n            listens: {\r\n                activeIndex: 'onActiveIndexChange',\r\n                activeView: 'checkState',\r\n                current: 'onStateChange'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes bookmarks component.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        initialize: function () {\r\n            utils.limit(this, 'checkState', 5);\r\n            utils.limit(this, 'saveState', 2000);\r\n\r\n            this._super()\r\n                .restore()\r\n                .initStorage()\r\n                .initViews();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates custom storage instance.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        initStorage: function () {\r\n            layout([this.storageConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Defines default data if it wasn't gathered previously.\r\n         *\r\n         * @private\r\n         * @returns {Bookmarks} Chainbale.\r\n         */\r\n        initDefaultView: function () {\r\n            var data = this.getViewData(this.defaultIndex);\r\n\r\n            if (!_.size(data) && (this.current.columns && this.current.positions)) {\r\n                this.setViewData(this.defaultIndex, this.current)\r\n                    .saveView(this.defaultIndex);\r\n                this.defaultDefined = true;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates instances of a previously saved views.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        initViews: function () {\r\n            _.each(this.views, function (config) {\r\n                this.addView(config);\r\n            }, this);\r\n\r\n            this.activeView = this.getActiveView();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates complete configuration for a view.\r\n         *\r\n         * @param {Object} [config] - Additional configuration object.\r\n         * @returns {Object}\r\n         */\r\n        buildView: function (config) {\r\n            var view = {\r\n                label: this.newViewLabel,\r\n                index: '_' + Date.now(),\r\n                editable: true\r\n            };\r\n\r\n            utils.extend(view, config || {});\r\n\r\n            view.data   = view.data || utils.copy(this.current);\r\n            view.value  = view.label;\r\n\r\n            this.observe.call(view, true, 'label value');\r\n\r\n            return view;\r\n        },\r\n\r\n        /**\r\n         * Creates instance of a view with a provided configuration.\r\n         *\r\n         * @param {Object} [config] - View configuration.\r\n         * @param {Boolean} [saveView=false] - Whether to save created view automatically or not.\r\n         * @param {Boolean} [applyView=false] - Whether to apply created view automatically or not.\r\n         * @returns {View} Created view.\r\n         */\r\n        addView: function (config, saveView, applyView) {\r\n            var view    = this.buildView(config),\r\n                index   = view.index;\r\n\r\n            this.views[index] = view;\r\n\r\n            if (saveView) {\r\n                this.saveView(index);\r\n            }\r\n\r\n            if (applyView) {\r\n                this.applyView(index);\r\n            }\r\n\r\n            this.updateArray();\r\n\r\n            return view;\r\n        },\r\n\r\n        /**\r\n         * Removes specified view.\r\n         *\r\n         * @param {String} index - Index of a view to be removed.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        removeView: function (index) {\r\n            var viewPath = this.getViewPath(index);\r\n\r\n            if (this.isViewActive(index)) {\r\n                this.applyView(this.defaultIndex);\r\n            }\r\n\r\n            this.endEdit(index)\r\n                .remove(viewPath)\r\n                .removeStored(viewPath)\r\n                .updateArray();\r\n            this.isActiveIndexChanged = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Saves data of a specified view.\r\n         *\r\n         * @param {String} index - Index of a view to be saved.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        saveView: function (index) {\r\n            var viewPath = this.getViewPath(index);\r\n\r\n            this.updateViewLabel(index)\r\n                .endEdit(index)\r\n                .store(viewPath)\r\n                .checkState();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets specified view as active\r\n         * and applies its' state.\r\n         *\r\n         * @param {String} index - Index of a view to be applied.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        applyView: function (index) {\r\n            this.applyStateOf(index)\r\n                .set('activeIndex', index);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates data of a specified view if it's\r\n         * currently active and saves its' data.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        updateAndSave: function (index) {\r\n            if (this.isViewActive(index)) {\r\n                this.updateActiveView(index);\r\n            }\r\n\r\n            this.saveView(index);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns instance of a specified view.\r\n         *\r\n         * @param {String} index - Index of a view to be retrieved.\r\n         * @returns {View}\r\n         */\r\n        getView: function (index) {\r\n            return this.views[index];\r\n        },\r\n\r\n        /**\r\n         * Returns instance of an active view.\r\n         *\r\n         * @returns {View}\r\n         */\r\n        getActiveView: function () {\r\n            return this.views[this.activeIndex];\r\n        },\r\n\r\n        /**\r\n         * Checks if specified view is active.\r\n         *\r\n         * @param {String} index - Index of a view to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isViewActive: function (index) {\r\n            return this.activeView === this.getView(index);\r\n        },\r\n\r\n        /**\r\n         * Sets current state as a data of an active view.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        updateActiveView: function () {\r\n            this.setViewData(this.activeIndex, this.current);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Replaces label a view with a provided one.\r\n         * If new label is not specified, then views'\r\n         * 'value' property will be taken.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @param {String} [label=view.value] - New labels' value.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        updateViewLabel: function (index, label) {\r\n            var view    = this.getView(index),\r\n                current = view.label;\r\n\r\n            label = (label || view.value).trim() || current;\r\n            label = this.uniqueLabel(label, current);\r\n\r\n            view.label = view.value = label;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieves data of a specified view.\r\n         *\r\n         * @param {String} index - Index of a view whose data should be retrieved.\r\n         * @param {String} [property] - If not specified then whole views' data will be retrieved.\r\n         * @returns {Object} Views' data.\r\n         */\r\n        getViewData: function (index, property) {\r\n            var view = this.getView(index),\r\n                data = view.data;\r\n\r\n            if (property) {\r\n                data = utils.nested(data, property);\r\n            }\r\n\r\n            return utils.copy(data);\r\n        },\r\n\r\n        /**\r\n         * Sets data to the specified view.\r\n         *\r\n         * @param {String} index - Index of a view whose data will be replaced.\r\n         * @param {Object} data - New view data.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        setViewData: function (index, data) {\r\n            var path = this.getViewPath(index) + '.data';\r\n\r\n            this.set(path, utils.copy(data));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Starts editing of a specified view.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        editView: function (index) {\r\n            this.editing = index;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Ends editing of specified view\r\n         * and restores its' label.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        endEdit: function (index) {\r\n            var view;\r\n\r\n            if (!this.isEditing(index)) {\r\n                return this;\r\n            }\r\n\r\n            index   = index || this.editing;\r\n            view    = this.getView(index);\r\n\r\n            view.value = view.label;\r\n\r\n            this.editing = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if specified view is in editing state.\r\n         *\r\n         * @param {String} index - Index of a view to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isEditing: function (index) {\r\n            return this.editing === index;\r\n        },\r\n\r\n        /**\r\n         * Generates label unique among present views, based\r\n         * on the incoming label pattern.\r\n         *\r\n         * @param {String} [label=this.newViewLabel] - Label pattern.\r\n         * @param {String} [exclude]\r\n         * @returns {String}\r\n         */\r\n        uniqueLabel: function (label, exclude) {\r\n            var labels      = _.pluck(this.views, 'label'),\r\n                hasParenth  = _.last(label) === ')',\r\n                index       = 2,\r\n                result,\r\n                suffix;\r\n\r\n            labels = _.without(labels, exclude);\r\n            result = label = label || this.newViewLabel;\r\n\r\n            for (index = 2; _.contains(labels, result); index++) {\r\n                suffix = '(' + index + ')';\r\n\r\n                if (!hasParenth) {\r\n                    suffix = ' ' + suffix;\r\n                }\r\n\r\n                result = label + suffix;\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Applies state of a specified view, without\r\n         * making it active.\r\n         *\r\n         * @param {String} [state=this.activeIndex]\r\n         * @param {String} [property]\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        applyStateOf: function (state, property) {\r\n            var index    = state || this.activeIndex,\r\n                dataPath = removeStateNs(property),\r\n                viewData = this.getViewData(index, dataPath);\r\n\r\n            dataPath = dataPath ?\r\n                'current.' + dataPath :\r\n                'current';\r\n\r\n            this.set(dataPath, viewData);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Saves current state.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        saveState: function () {\r\n            if (!this.isActiveIndexChanged) {\r\n                this.store('current');\r\n            }\r\n            this.isActiveIndexChanged = false;\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies state of an active view.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        resetState: function () {\r\n            this.applyStateOf(this.activeIndex);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if current state is different\r\n         * from the state of an active view.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        checkState: function () {\r\n            var viewData = this.getViewData(this.activeIndex),\r\n                diff     = utils.compare(viewData, this.current);\r\n\r\n            this.hasChanges = !diff.equal;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the view instance,\r\n         * based on a provided index.\r\n         *\r\n         * @param {String} index - Index of a view.\r\n         * @returns {String}\r\n         */\r\n        getViewPath: function (index) {\r\n            return 'views.' + index;\r\n        },\r\n\r\n        /**\r\n         * Updates the array of views.\r\n         *\r\n         * @returns {Bookmarks} Chainable\r\n         */\r\n        updateArray: function () {\r\n            this.viewsArray = _.values(this.views);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Shows custom view field and creates unique label for it.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        showCustom: function () {\r\n            this.customLabel    = this.uniqueLabel();\r\n            this.customVisible  = true;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides custom view field.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        hideCustom: function () {\r\n            this.customVisible = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if custom view field is visible.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isCustomVisible: function () {\r\n            return this.customVisible;\r\n        },\r\n\r\n        /**\r\n         * Creates new view instance with a label specified\r\n         * in a custom view field.\r\n         *\r\n         * @returns {Bookmarks} Chainable.\r\n         */\r\n        applyCustom: function () {\r\n            var label = this.customLabel.trim();\r\n\r\n            this.hideCustom()\r\n                .addView({\r\n                    label: this.uniqueLabel(label)\r\n                }, true, true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Listener of the activeIndex property.\r\n         */\r\n        onActiveIndexChange: function () {\r\n            this.activeView = this.getActiveView();\r\n            this.updateActiveView();\r\n            this.store('activeIndex');\r\n            this.isActiveIndexChanged = true;\r\n        },\r\n\r\n        /**\r\n         * Listener of the activeIndex property.\r\n         */\r\n        onStateChange: function () {\r\n            this.checkState();\r\n            this.saveState();\r\n\r\n            if (!this.defaultDefined) {\r\n                resolver(this.initDefaultView, this);\r\n            }\r\n\r\n            if (!_.isUndefined(this.activeView)\r\n                && !_.isUndefined(this.activeView.data)\r\n                && !_.isUndefined(this.current)) {\r\n                if (JSON.stringify(this.activeView.data.filters) === JSON.stringify(this.current.filters)\r\n                    && JSON.stringify(this.activeView.data.positions) !== JSON.stringify(this.current.positions)) {\r\n                    this.updateActiveView();\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/controls/bookmarks/storage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mageUtils',\r\n    'Magento_Ui/js/lib/core/storage/local',\r\n    'uiClass'\r\n], function ($, utils, storage, Class) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Removes ns prefix for path.\r\n     *\r\n     * @param {String} ns\r\n     * @param {String} path\r\n     * @returns {String}\r\n     */\r\n    function removeNs(ns, path) {\r\n        return path.replace(ns + '.', '');\r\n    }\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            ajaxSettings: {\r\n                method: 'POST',\r\n                data: {\r\n                    namespace: '${ $.namespace }'\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Delegates call to the localStorage adapter.\r\n         */\r\n        get: function () {\r\n            return {};\r\n        },\r\n\r\n        /**\r\n         * Sends request to store specified data.\r\n         *\r\n         * @param {String} path - Path by which data should be stored.\r\n         * @param {*} value - Value to be sent.\r\n         */\r\n        set: function (path, value) {\r\n            var property = removeNs(this.namespace, path),\r\n                data = {},\r\n                config;\r\n\r\n            utils.nested(data, property, value);\r\n\r\n            config = utils.extend({\r\n                url: this.saveUrl,\r\n                data: {\r\n                    data: JSON.stringify(data)\r\n                }\r\n            }, this.ajaxSettings);\r\n\r\n            $.ajax(config);\r\n        },\r\n\r\n        /**\r\n         * Sends request to remove specified data.\r\n         *\r\n         * @param {String} path - Path to the property to be removed.\r\n         */\r\n        remove: function (path) {\r\n            var property = removeNs(this.namespace, path),\r\n                config;\r\n\r\n            config = utils.extend({\r\n                url: this.deleteUrl,\r\n                data: {\r\n                    data: property\r\n                }\r\n            }, this.ajaxSettings);\r\n\r\n            $.ajax(config);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/controls/button/split.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (data, element) {\r\n\r\n        $(element).on('click.splitDefault', '.action-default', function () {\r\n            $(this).siblings('.dropdown-menu').find('.item-default').trigger('click');\r\n        });\r\n    };\r\n});\r\n","Magento_Ui/js/grid/editing/bulk.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    './record'\r\n], function (_, utils, Record) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Removes empty properties from the provided object.\r\n     *\r\n     * @param {Object} data - Object to be processed.\r\n     * @returns {Object}\r\n     */\r\n    function removeEmpty(data) {\r\n        data = utils.flatten(data);\r\n        data = _.omit(data, utils.isEmpty);\r\n\r\n        return utils.unflatten(data);\r\n    }\r\n\r\n    return Record.extend({\r\n        defaults: {\r\n            template: 'ui/grid/editing/bulk',\r\n            active: false,\r\n            templates: {\r\n                fields: {\r\n                    select: {\r\n                        caption: ' '\r\n                    }\r\n                }\r\n            },\r\n            imports: {\r\n                active: '${ $.editorProvider }:isMultiEditing'\r\n            },\r\n            listens: {\r\n                data: 'updateState',\r\n                active: 'updateState'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Bulk} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    hasData: false\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extends original method to disable possible\r\n         * 'required-entry' validation rule.\r\n         *\r\n         * @returns {Object} Columns' field definition.\r\n         */\r\n        buildField: function () {\r\n            var field = this._super(),\r\n                rules = field.validation;\r\n\r\n            if (rules) {\r\n                delete rules['required-entry'];\r\n            }\r\n\r\n            return field;\r\n        },\r\n\r\n        /**\r\n         * Applies current data to all active records.\r\n         *\r\n         * @returns {Bulk} Chainable.\r\n         */\r\n        apply: function () {\r\n            if (this.isValid()) {\r\n                this.applyData()\r\n                    .clear();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets available data to all active records.\r\n         *\r\n         * @param {Object} [data] -  If not specified, then current fields data will be used.\r\n         * @returns {Bulk} Chainable.\r\n         */\r\n        applyData: function (data) {\r\n            data = data || this.getData();\r\n\r\n            this.editor('setData', data, true);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns data of all non-empty fields.\r\n         *\r\n         * @returns {Object} Fields data without empty values.\r\n         */\r\n        getData: function () {\r\n            return removeEmpty(this._super());\r\n        },\r\n\r\n        /**\r\n         * Updates own 'hasData' property and defines\r\n         * whether regular rows editing can be resumed.\r\n         *\r\n         * @returns {Bulk} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var fields  = _.keys(this.getData()),\r\n                hasData = !!fields.length;\r\n\r\n            this.hasData = hasData;\r\n\r\n            if (!this.active()) {\r\n                fields = [];\r\n            }\r\n\r\n            this.editor('disableFields', fields);\r\n            this.editor('canSave', !fields.length);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/editing/client.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiClass'\r\n], function ($, _, utils, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            validateBeforeSave: true,\r\n            requestConfig: {\r\n                dataType: 'json',\r\n                type: 'POST'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes client instance.\r\n         *\r\n         * @returns {Client} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'onSuccess', 'onError');\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Sends XMLHttpRequest with a provided configuration.\r\n         *\r\n         * @param {Object} config - Configuration of request.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        send: function (config) {\r\n            var deffer  = $.Deferred();\r\n\r\n            config = utils.extend({}, this.requestConfig, config);\r\n\r\n            $.ajax(config)\r\n                .done(_.partial(this.onSuccess, deffer))\r\n                .fail(_.partial(this.onError, deffer));\r\n\r\n            return deffer.promise();\r\n        },\r\n\r\n        /**\r\n         * Proxy save method which might invoke\r\n         * data validation prior to its' saving.\r\n         *\r\n         * @param {Object} data - Data to be processed.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        save: function (data) {\r\n            var save = this._save.bind(this, data);\r\n\r\n            return this.validateBeforeSave ?\r\n                this.validate(data).pipe(save) :\r\n                save();\r\n        },\r\n\r\n        /**\r\n         * Sends request to validate provided data.\r\n         *\r\n         * @param {Object} data - Data to be validated.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        validate: function (data) {\r\n            return this.send({\r\n                url: this.validateUrl,\r\n                data: data\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Sends request to save provided data.\r\n         *\r\n         * @private\r\n         * @param {Object} data - Data to be validated.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        _save: function (data) {\r\n            return this.send({\r\n                url: this.saveUrl,\r\n                data: data\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Creates error object with a provided message.\r\n         *\r\n         * @param {String} msg - Errors' message.\r\n         * @returns {Object}\r\n         */\r\n        createError: function (msg) {\r\n            return {\r\n                type: 'error',\r\n                message: msg\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Handles ajax error callback.\r\n         *\r\n         * @param {jQueryPromise} promise - Promise to be rejected.\r\n         * @param {jQueryXHR} xhr - See 'jquery' ajax error callback.\r\n         * @param {String} status - See 'jquery' ajax error callback.\r\n         * @param {(String|Object)} err - See 'jquery' ajax error callback.\r\n         */\r\n        onError: function (promise, xhr, status, err) {\r\n            var msg;\r\n\r\n            msg = xhr.status !== 200 ?\r\n                xhr.status + ' (' + xhr.statusText + ')' :\r\n                err;\r\n\r\n            promise.reject(this.createError(msg));\r\n        },\r\n\r\n        /**\r\n         * Handles ajax success callback.\r\n         *\r\n         * @param {jQueryPromise} promise - Promise to be resolved.\r\n         * @param {*} data - See 'jquery' ajax success callback.\r\n         */\r\n        onSuccess: function (promise, data) {\r\n            var errors;\r\n\r\n            if (data.error) {\r\n                errors = _.map(data.messages, this.createError, this);\r\n\r\n                promise.reject(errors);\r\n            } else {\r\n                promise.resolve(data);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/editing/editor-view.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'uiClass'\r\n], function (ko, $, _, registry, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            rootSelector: '${ $.columnsProvider }:.admin__data-grid-wrap',\r\n            tableSelector: '${ $.rootSelector } -> table',\r\n            rowSelector: '${ $.tableSelector } tbody tr.data-row',\r\n            headerButtonsTmpl:\r\n                '<!-- ko template: headerButtonsTmpl --><!-- /ko -->',\r\n            bulkTmpl:\r\n                '<!-- ko scope: bulk -->' +\r\n                    '<!-- ko template: getTemplate() --><!-- /ko -->' +\r\n                '<!-- /ko -->',\r\n            rowTmpl:\r\n                '<!-- ko with: _editor -->' +\r\n                    '<!-- ko if: typeof $row() !== \"undefined\" -->' +\r\n                        '<!-- ko if: isActive($row()._rowIndex, true) -->' +\r\n                            '<!-- ko if: typeof $row() !== \"undefined\" -->' +\r\n                                '<!-- ko with: getRecord($row()._rowIndex, true) -->' +\r\n                                    '<!-- ko template: rowTmpl --><!-- /ko -->' +\r\n                                '<!-- /ko -->' +\r\n                            '<!-- /ko -->' +\r\n                            '<!-- ko if: typeof $row() !== \"undefined\" -->' +\r\n                                '<!-- ko if: isSingleEditing && singleEditingButtons -->' +\r\n                                    '<!-- ko template: rowButtonsTmpl --><!-- /ko -->' +\r\n                                '<!-- /ko -->' +\r\n                            '<!-- /ko -->' +\r\n                        '<!-- /ko -->' +\r\n                    '<!-- /ko -->' +\r\n               '<!-- /ko -->'\r\n        },\r\n\r\n        /**\r\n         * Initializes view component.\r\n         *\r\n         * @returns {View} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(\r\n                this,\r\n                'initRoot',\r\n                'initTable',\r\n                'initRow',\r\n                'rowBindings',\r\n                'tableBindings'\r\n            );\r\n\r\n            this._super();\r\n\r\n            this.model = registry.get(this.model);\r\n\r\n            $.async(this.rootSelector, this.initRoot);\r\n            $.async(this.tableSelector, this.initTable);\r\n            $.async(this.rowSelector, this.initRow);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes columns root container.\r\n         *\r\n         * @param {HTMLElement} node\r\n         * @returns {View} Chainable.\r\n         */\r\n        initRoot: function (node) {\r\n            $(this.headerButtonsTmpl)\r\n                .insertBefore(node)\r\n                .applyBindings(this.model);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes table element.\r\n         *\r\n         * @param {HTMLTableElement} table\r\n         * @returns {View} Chainable.\r\n         */\r\n        initTable: function (table) {\r\n            $(table).bindings(this.tableBindings);\r\n\r\n            this.initBulk(table);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes bulk editor element\r\n         * for the provided table.\r\n         *\r\n         * @param {HTMLTableElement} table\r\n         * @returns {View} Chainable.\r\n         */\r\n        initBulk: function (table) {\r\n            var tableBody = $('tbody', table)[0];\r\n\r\n            $(this.bulkTmpl)\r\n                .prependTo(tableBody)\r\n                .applyBindings(this.model);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes table row.\r\n         *\r\n         * @param {HTMLTableRowElement} row\r\n         * @returns {View} Chainable.\r\n         */\r\n        initRow: function (row) {\r\n            var $editingRow;\r\n\r\n            $(row).extendCtx({\r\n                    _editor: this.model\r\n                }).bindings(this.rowBindings);\r\n\r\n            $editingRow = $(this.rowTmpl)\r\n                .insertBefore(row)\r\n                .applyBindings(row);\r\n\r\n            ko.utils.domNodeDisposal.addDisposeCallback(row, this.removeEditingRow.bind(this, $editingRow));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns row bindings.\r\n         *\r\n         * @param {Object} ctx - Current context of a row.\r\n         * @returns {Object}\r\n         */\r\n        rowBindings: function (ctx) {\r\n            var model = this.model;\r\n\r\n            return {\r\n                visible: ko.computed(function () {\r\n                    var record = ctx.$row(),\r\n                        index = record && record._rowIndex;\r\n\r\n                    return !model.isActive(index, true);\r\n                })\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Returns table bindings.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        tableBindings: function () {\r\n            var model = this.model;\r\n\r\n            return {\r\n                css: {\r\n                    '_in-edit': ko.computed(function () {\r\n                        return model.hasActive() && !model.permanentlyActive;\r\n                    })\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Removes specified array of nodes.\r\n         *\r\n         * @param {ArrayLike} row\r\n         */\r\n        removeEditingRow: function (row) {\r\n            _.toArray(row).forEach(ko.removeNode);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/editing/editor.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'mage/translate',\r\n    'uiCollection'\r\n], function (_, utils, layout, $t, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            rowButtonsTmpl: 'ui/grid/editing/row-buttons',\r\n            headerButtonsTmpl: 'ui/grid/editing/header-buttons',\r\n            successMsg: $t('You have successfully saved your edits.'),\r\n            errorsCount: 0,\r\n            bulkEnabled: true,\r\n            multiEditingButtons: true,\r\n            singleEditingButtons: true,\r\n            isMultiEditing: false,\r\n            isSingleEditing: false,\r\n            permanentlyActive: false,\r\n            rowsData: [],\r\n            fields: {},\r\n\r\n            templates: {\r\n                record: {\r\n                    parent: '${ $.$data.editor.name }',\r\n                    name: '${ $.$data.recordId }',\r\n                    component: 'Magento_Ui/js/grid/editing/record',\r\n                    columnsProvider: '${ $.$data.editor.columnsProvider }',\r\n                    editorProvider: '${ $.$data.editor.name }',\r\n                    preserveFields: {\r\n                        '${ $.$data.editor.indexField }': true\r\n                    }\r\n                }\r\n            },\r\n            bulkConfig: {\r\n                component: 'Magento_Ui/js/grid/editing/bulk',\r\n                name: '${ $.name }_bulk',\r\n                editorProvider: '${ $.name }',\r\n                columnsProvider: '${ $.columnsProvider }'\r\n            },\r\n            clientConfig: {\r\n                component: 'Magento_Ui/js/grid/editing/client',\r\n                name: '${ $.name }_client'\r\n            },\r\n            viewConfig: {\r\n                component: 'Magento_Ui/js/grid/editing/editor-view',\r\n                name: '${ $.name }_view',\r\n                model: '${ $.name }',\r\n                columnsProvider: '${ $.columnsProvider }'\r\n            },\r\n            imports: {\r\n                rowsData: '${ $.dataProvider }:data.items'\r\n            },\r\n            listens: {\r\n                '${ $.dataProvider }:reloaded': 'cancel',\r\n                '${ $.selectProvider }:selected': 'onSelectionsChange'\r\n            },\r\n            modules: {\r\n                source: '${ $.dataProvider }',\r\n                client: '${ $.clientConfig.name }',\r\n                columns: '${ $.columnsProvider }',\r\n                bulk: '${ $.bulkConfig.name }',\r\n                selections: '${ $.selectProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes editor component.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'updateState', 'countErrors', 'onDataSaved', 'onSaveError');\r\n\r\n            this._super()\r\n                .initBulk()\r\n                .initClient()\r\n                .initView();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'errorsCount',\r\n                    'isMultiEditing',\r\n                    'isSingleEditing',\r\n                    'isSingleColumnEditing',\r\n                    'changed'\r\n                ])\r\n                .observe({\r\n                    canSave: true,\r\n                    activeRecords: [],\r\n                    messages: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes bulk editing component.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initBulk: function () {\r\n            if (this.bulkEnabled) {\r\n                layout([this.bulkConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes editors' view component.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initView: function () {\r\n            layout([this.viewConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes client component.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initClient: function () {\r\n            layout([this.clientConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates instance of a new record.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initRecord: function (id, isIndex) {\r\n            var record = this.buildRecord(id, isIndex);\r\n\r\n            layout([record]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds listeners on a new record.\r\n         *\r\n         * @param {Record} record\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        initElement: function (record) {\r\n            record.on({\r\n                'active': this.updateState,\r\n                'errorsCount': this.countErrors\r\n            });\r\n\r\n            this.updateState();\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Creates configuration for a new record associated with a row data.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Object} Record configuration.\r\n         */\r\n        buildRecord: function (id, isIndex) {\r\n            var recordId = this.getId(id, isIndex),\r\n                recordTmpl = this.templates.record,\r\n                record;\r\n\r\n            if (this.getRecord(recordId)) {\r\n                return this;\r\n            }\r\n\r\n            record = utils.template(recordTmpl, {\r\n                editor: this,\r\n                recordId: id\r\n            });\r\n\r\n            record.recordId = id;\r\n            record.data     = this.getRowData(id);\r\n\r\n            return record;\r\n        },\r\n\r\n        /**\r\n         * Starts editing of a specified record. If records'\r\n         * instance doesn't exist, than it will be created.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        edit: function (id, isIndex) {\r\n            var recordId = this.getId(id, isIndex),\r\n                record   = this.getRecord(recordId);\r\n\r\n            record ?\r\n                record.active(true) :\r\n                this.initRecord(recordId);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Drops list of selections while activating only the specified record.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        startEdit: function (id, isIndex) {\r\n            var recordId = this.getId(id, isIndex);\r\n\r\n            this.selections()\r\n                .deselectAll()\r\n                .select(recordId);\r\n\r\n            return this.edit(recordId);\r\n        },\r\n\r\n        /**\r\n         * Hides records and resets theirs data.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        cancel: function () {\r\n            this.reset()\r\n                .hide()\r\n                .clearMessages()\r\n                .bulk('clear');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides records.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        hide: function () {\r\n            this.activeRecords.each('active', false);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resets active records.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        reset: function () {\r\n            this.elems.each(function (record) {\r\n                this.resetRecord(record.recordId);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validates and saves data of active records.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        save: function () {\r\n            var data;\r\n\r\n            if (!this.isValid()) {\r\n                return this;\r\n            }\r\n\r\n            data = {\r\n                items: this.getData()\r\n            };\r\n\r\n            this.clearMessages()\r\n                .columns('showLoader');\r\n\r\n            this.client()\r\n                .save(data)\r\n                .done(this.onDataSaved)\r\n                .fail(this.onSaveError);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validates all active records.\r\n         *\r\n         * @returns {Array} An array of records and theirs validation results.\r\n         */\r\n        validate: function () {\r\n            return this.activeRecords.map(function (record) {\r\n                return {\r\n                    target: record,\r\n                    valid: record.isValid()\r\n                };\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Checks if all active records are valid.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isValid: function () {\r\n            return _.every(this.validate(), 'valid');\r\n        },\r\n\r\n        /**\r\n         * Returns active records data, indexed by a theirs ids.\r\n         *\r\n         * @returns {Object} Collection of records data.\r\n         */\r\n        getData: function () {\r\n            var data = this.activeRecords.map(function (record) {\r\n                var elemKey,\r\n                    recordData = record.getData();\r\n\r\n                for (elemKey in recordData) {\r\n                    if (_.isUndefined(recordData[elemKey])) {\r\n                        recordData[elemKey] = null;\r\n                    }\r\n                }\r\n\r\n                return recordData;\r\n            });\r\n\r\n            return _.indexBy(data, this.indexField);\r\n        },\r\n\r\n        /**\r\n         * Sets provided data to all active records.\r\n         *\r\n         * @param {Object} data - See 'setData' method of a 'Record'.\r\n         * @param {Boolean} partial - See 'setData' method of a 'Record'.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        setData: function (data, partial) {\r\n            this.activeRecords.each('setData', data, partial);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resets specific records' data\r\n         * to the data present in associated row.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        resetRecord: function (id, isIndex) {\r\n            var record  = this.getRecord(id, isIndex),\r\n                data    = this.getRowData(id, isIndex);\r\n\r\n            if (record && data) {\r\n                record.setData(data);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns instance of a specified record.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Record}\r\n         */\r\n        getRecord: function (id, isIndex) {\r\n            return this.elems.findWhere({\r\n                recordId: this.getId(id, isIndex)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Creates record name based on a provided id.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {String}\r\n         */\r\n        formRecordName: function (id, isIndex) {\r\n            id = this.getId(id, isIndex);\r\n\r\n            return this.name + '.' + id;\r\n        },\r\n\r\n        /**\r\n         * Disables editing of specified fields.\r\n         *\r\n         * @param {Array} fields - An array of fields indexes to be disabled.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        disableFields: function (fields) {\r\n            var columns = this.columns().elems(),\r\n                data    = utils.copy(this.fields);\r\n\r\n            columns.forEach(function (column) {\r\n                var index = column.index,\r\n                    field = data[index] = data[index] || {};\r\n\r\n                field.disabled = _.contains(fields, index);\r\n            });\r\n\r\n            this.set('fields', data);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Converts index of a row into the record id.\r\n         *\r\n         * @param {(Number|String)} id - Records' identifier or its' index in the rows array.\r\n         * @param {Boolean} [isIndex=false] - Flag that indicates if first\r\n         *      parameter is an index or identifier.\r\n         * @returns {String} Records' id.\r\n         */\r\n        getId: function (id, isIndex) {\r\n            var rowsData = this.rowsData,\r\n                record;\r\n\r\n            if (isIndex === true) {\r\n                record  = rowsData[id];\r\n                id      = record ? record[this.indexField] : false;\r\n            }\r\n\r\n            return id;\r\n        },\r\n\r\n        /**\r\n         * Returns data of a specified row.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See 'getId' method.\r\n         * @returns {Object}\r\n         */\r\n        getRowData: function (id, isIndex) {\r\n            id = this.getId(id, isIndex);\r\n\r\n            return _.find(this.rowsData, function (row) {\r\n                return row[this.indexField] === id;\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Checks if specified record is active.\r\n         *\r\n         * @param {(Number|String)} id - See 'getId' method.\r\n         * @param {Boolean} [isIndex=false] - See'getId' method.\r\n         * @returns {Boolean}\r\n         */\r\n        isActive: function (id, isIndex) {\r\n            var record = this.getRecord(id, isIndex);\r\n\r\n            return _.contains(this.activeRecords(), record);\r\n        },\r\n\r\n        /**\r\n         * Checks if editor has active records.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasActive: function () {\r\n            return !!this.activeRecords().length || this.permanentlyActive;\r\n        },\r\n\r\n        /**\r\n         * Counts number of active records.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countActive: function () {\r\n            return this.activeRecords().length;\r\n        },\r\n\r\n        /**\r\n         * Counts number of invalid fields across all active records.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countErrors: function () {\r\n            var errorsCount = 0;\r\n\r\n            this.activeRecords.each(function (record) {\r\n                errorsCount += record.errorsCount;\r\n            });\r\n\r\n            this.errorsCount = errorsCount;\r\n\r\n            return errorsCount;\r\n        },\r\n\r\n        /**\r\n         * Translatable error message text.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        countErrorsMessage: function () {\r\n            return $t('There are {placeholder} messages requires your attention.')\r\n                .replace('{placeholder}', this.countErrors());\r\n        },\r\n\r\n        /**\r\n         * Checks if editor has any errors.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasErrors: function () {\r\n            return !!this.countErrors();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the records 'active' property.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var active      = this.elems.filter('active'),\r\n                activeCount = active.length,\r\n                columns     = this.columns().elems;\r\n\r\n            columns.each('disableAction', !!activeCount);\r\n\r\n            this.isMultiEditing = activeCount > 1;\r\n            this.isSingleEditing = activeCount === 1;\r\n\r\n            this.activeRecords(active);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns list of selections from a current page.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getSelections: function () {\r\n            return this.selections().getPageSelections();\r\n        },\r\n\r\n        /**\r\n         * Starts editing of selected records. If record\r\n         * is not in the selections list, then it will get hidden.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        editSelected: function () {\r\n            var selections = this.getSelections();\r\n\r\n            this.elems.each(function (record) {\r\n                if (!_.contains(selections, record.recordId)) {\r\n                    record.active(false);\r\n                }\r\n            });\r\n\r\n            selections.forEach(function (id) {\r\n                this.edit(id);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if there is any additional messages.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasMessages: function () {\r\n            return this.messages().length;\r\n        },\r\n\r\n        /**\r\n         * Adds new additional message or a set of messages.\r\n         *\r\n         * @param {(Object|Array)} message - Messages to be added.\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        addMessage: function (message) {\r\n            var messages = this.messages();\r\n\r\n            Array.isArray(message) ?\r\n                messages.push.apply(messages, message) :\r\n                messages.push(message);\r\n\r\n            this.messages(messages);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes all additional messages.\r\n         *\r\n         * @returns {Editor} Chainable.\r\n         */\r\n        clearMessages: function () {\r\n            this.messages.removeAll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Listener of the selections data changes.\r\n         */\r\n        onSelectionsChange: function () {\r\n            if (this.hasActive()) {\r\n                this.editSelected();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handles successful save request.\r\n         */\r\n        onDataSaved: function () {\r\n            var msg = {\r\n                type: 'success',\r\n                message: this.successMsg\r\n            };\r\n\r\n            this.addMessage(msg)\r\n                .source('reload', {\r\n                    refresh: true\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Handles failed save request.\r\n         *\r\n         * @param {(Array|Object)} errors - List of errors or a single error object.\r\n         */\r\n        onSaveError: function (errors) {\r\n            this.addMessage(errors)\r\n                .columns('hideLoader');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/editing/record.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'uiCollection'\r\n], function (_, utils, layout, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            active: true,\r\n            hasChanges: false,\r\n            fields: [],\r\n            errorsCount: 0,\r\n            fieldTmpl: 'ui/grid/editing/field',\r\n            rowTmpl: 'ui/grid/editing/row',\r\n            templates: {\r\n                fields: {\r\n                    base: {\r\n                        parent: '${ $.$data.record.name }',\r\n                        name: '${ $.$data.column.index }',\r\n                        provider: '${ $.$data.record.name }',\r\n                        dataScope: 'data.${ $.$data.column.index }',\r\n                        imports: {\r\n                            disabled: '${ $.$data.record.parentName }:fields.${ $.$data.column.index }.disabled'\r\n                        },\r\n                        isEditor: true\r\n                    },\r\n                    text: {\r\n                        component: 'Magento_Ui/js/form/element/abstract',\r\n                        template: 'ui/form/element/input'\r\n                    },\r\n                    date: {\r\n                        component: 'Magento_Ui/js/form/element/date',\r\n                        template: 'ui/form/element/date',\r\n                        dateFormat: 'MMM d, y h:mm:ss a'\r\n                    },\r\n                    select: {\r\n                        component: 'Magento_Ui/js/form/element/select',\r\n                        template: 'ui/form/element/select',\r\n                        options: '${ JSON.stringify($.$data.column.options) }'\r\n                    }\r\n                }\r\n            },\r\n            ignoreTmpls: {\r\n                data: true\r\n            },\r\n            listens: {\r\n                elems: 'updateFields',\r\n                data: 'updateState'\r\n            },\r\n            imports: {\r\n                onColumnsUpdate: '${ $.columnsProvider }:elems'\r\n            },\r\n            modules: {\r\n                columns: '${ $.columnsProvider }',\r\n                editor: '${ $.editorProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes record component.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(this, 'countErrors');\r\n            utils.limit(this, 'updateState', 10);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track('errorsCount hasChanges')\r\n                .observe('active fields');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds listeners on a field.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        initElement: function (field) {\r\n            field.on('error', this.countErrors);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Creates new instance of a field.\r\n         *\r\n         * @param {Column} column - Column instance which contains field definition.\r\n         * @returns {Record} Chainable.\r\n         */\r\n        initField: function (column) {\r\n            var field = this.buildField(column);\r\n\r\n            layout([field]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Builds fields' configuration described in a provided column.\r\n         *\r\n         * @param {Column} column - Column instance which contains field definition.\r\n         * @returns {Object} Complete fields' configuration.\r\n         */\r\n        buildField: function (column) {\r\n            var fields = this.templates.fields,\r\n                field  = column.editor;\r\n\r\n            if (_.isObject(field) && field.editorType) {\r\n                field = utils.extend({}, fields[field.editorType], field);\r\n            } else if (_.isString(field)) {\r\n                field = fields[field];\r\n            }\r\n\r\n            field = utils.extend({}, fields.base, field);\r\n\r\n            return utils.template(field, {\r\n                record: this,\r\n                column: column\r\n            }, true, true);\r\n        },\r\n\r\n        /**\r\n         * Creates fields for the specified columns.\r\n         *\r\n         * @param {Array} columns - An array of column instances.\r\n         * @returns {Record} Chainable.\r\n         */\r\n        createFields: function (columns) {\r\n            columns.forEach(function (column) {\r\n                if (column.editor && !this.hasChild(column.index)) {\r\n                    this.initField(column);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns instance of a column found by provided index.\r\n         *\r\n         * @param {String} index - Index of a column (e.g. 'title').\r\n         * @returns {Column}\r\n         */\r\n        getColumn: function (index) {\r\n            return this.columns().getChild(index);\r\n        },\r\n\r\n        /**\r\n         * Returns records' current data object.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getData: function () {\r\n            return this.filterData(this.data);\r\n        },\r\n\r\n        /**\r\n         * Returns saved records' data. Data will be processed\r\n         * with a 'filterData' and 'normalizeData' methods.\r\n         *\r\n         * @returns {Object} Saved records' data.\r\n         */\r\n        getSavedData: function () {\r\n            var editor      = this.editor(),\r\n                savedData   = editor.getRowData(this.index);\r\n\r\n            savedData = this.filterData(savedData);\r\n\r\n            return this.normalizeData(savedData);\r\n        },\r\n\r\n        /**\r\n         * Replaces current records' data with the provided one.\r\n         *\r\n         * @param {Object} data - New records data.\r\n         * @param {Boolean} [partial=false] - Flag that defines whether\r\n         *      to completely replace current data or to extend it.\r\n         * @returns {Record} Chainable.\r\n         */\r\n        setData: function (data, partial) {\r\n            var currentData = partial ? this.data : {};\r\n\r\n            data = this.normalizeData(data);\r\n            data = utils.extend({}, currentData, data);\r\n\r\n            this.set('data', data)\r\n                .updateState();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Filters provided object extracting from it values\r\n         * that can be matched with an existing fields.\r\n         *\r\n         * @param {Object} data - Object to be processed.\r\n         * @returns {Object}\r\n         */\r\n        filterData: function (data) {\r\n            var fields = _.pluck(this.elems(), 'index');\r\n\r\n            _.each(this.preserveFields, function (enabled, field) {\r\n                if (enabled && !_.contains(fields, field)) {\r\n                    fields.push(field);\r\n                }\r\n            });\r\n\r\n            return _.pick(data, fields);\r\n        },\r\n\r\n        /**\r\n         * Parses values of a provided object with\r\n         * a 'normalizeData' method of a corresponding field.\r\n         *\r\n         * @param {Object} data - Data to be processed.\r\n         * @returns {Object}\r\n         */\r\n        normalizeData: function (data) {\r\n            var index;\r\n\r\n            this.elems.each(function (elem) {\r\n                index = elem.index;\r\n\r\n                if (data.hasOwnProperty(index)) {\r\n                    data[index] = elem.normalizeData(data[index]);\r\n                }\r\n            });\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Clears values of all fields.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.elems.each('clear');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validates all of the available fields.\r\n         *\r\n         * @returns {Array} An array with validation results.\r\n         */\r\n        validate: function () {\r\n            return this.elems.map('validate');\r\n        },\r\n\r\n        /**\r\n         * Checks if all fields are valid.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isValid: function () {\r\n            return _.every(this.validate(), 'valid');\r\n        },\r\n\r\n        /**\r\n         * Counts total errors amount across all fields.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countErrors: function () {\r\n            var errorsCount = this.elems.filter('error').length;\r\n\r\n            this.errorsCount = errorsCount;\r\n\r\n            return errorsCount;\r\n        },\r\n\r\n        /**\r\n         * Returns difference between current data and its'\r\n         * initial state, retrieved from the records collection.\r\n         *\r\n         * @returns {Object} Object with changes descriptions.\r\n         */\r\n        checkChanges: function () {\r\n            var savedData   = this.getSavedData(),\r\n                data        = this.normalizeData(this.getData());\r\n\r\n            return utils.compare(savedData, data);\r\n        },\r\n\r\n        /**\r\n         * Updates 'fields' array filling it with available editors\r\n         * or with column instances if associated field is not present.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        updateFields: function () {\r\n            var fields;\r\n\r\n            fields = this.columns().elems.map(function (column) {\r\n                return this.getChild(column.index) || column;\r\n            }, this);\r\n\r\n            this.fields(fields);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates state of a 'hasChanges' property.\r\n         *\r\n         * @returns {Record} Chainable.\r\n         */\r\n        updateState: function () {\r\n            var diff = this.checkChanges(),\r\n                changed = {};\r\n\r\n            this.hasChanges = !diff.equal;\r\n            changed[this.index] = this.data;\r\n            this.editor().set('changed', [changed]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided column is an actions column.\r\n         *\r\n         * @param {Column} column - Column to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isActionsColumn: function (column) {\r\n            return column.dataType === 'actions';\r\n        },\r\n\r\n        /**\r\n         * Listener of columns provider child array changes.\r\n         *\r\n         * @param {Array} columns - Modified child elements array.\r\n         */\r\n        onColumnsUpdate: function (columns) {\r\n            this.createFields(columns)\r\n                .updateFields();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/filters/chips.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiCollection'\r\n], function (_, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/filters/chips',\r\n            componentType: 'filtersChips'\r\n        },\r\n\r\n        /**\r\n         * Defines if some of components' children has available previews.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasPreviews: function () {\r\n            return this.elems().some(function (elem) {\r\n                return !!elem.previews.length;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Calls clear method on all of its' children.\r\n         *\r\n         * @returns {Chips} Chainable.\r\n         */\r\n        clear: function () {\r\n            _.invoke(this.elems(), 'clear');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/filters/filters.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'uiCollection',\r\n    'mage/translate',\r\n    'jquery'\r\n], function (_, utils, layout, Collection, $t, $) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Extracts and formats preview of an element.\r\n     *\r\n     * @param {Object} elem - Element whose preview should be extracted.\r\n     * @returns {Object} Formatted data.\r\n     */\r\n    function extractPreview(elem) {\r\n        return {\r\n            label: elem.label,\r\n            preview: elem.getPreview(),\r\n            elem: elem\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Removes empty properties from the provided object.\r\n     *\r\n     * @param {Object} data - Object to be processed.\r\n     * @returns {Object}\r\n     */\r\n    function removeEmpty(data) {\r\n        var result = utils.mapRecursive(data, utils.removeEmptyValues.bind(utils));\r\n\r\n        return utils.mapRecursive(result, function (value) {\r\n            return _.isString(value) ? value.trim() : value;\r\n        });\r\n    }\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/grid/filters/filters',\r\n            stickyTmpl: 'ui/grid/sticky/filters',\r\n            _processed: [],\r\n            columnsProvider: 'ns = ${ $.ns }, componentType = columns',\r\n            bookmarksProvider: 'ns = ${ $.ns }, componentType = bookmark',\r\n            applied: {\r\n                placeholder: true\r\n            },\r\n            filters: {\r\n                placeholder: true\r\n            },\r\n            templates: {\r\n                filters: {\r\n                    base: {\r\n                        parent: '${ $.$data.filters.name }',\r\n                        name: '${ $.$data.column.index }',\r\n                        provider: '${ $.$data.filters.name }',\r\n                        dataScope: '${ $.$data.column.index }',\r\n                        label: '${ $.$data.column.label }',\r\n                        imports: {\r\n                            visible: '${ $.$data.column.name }:visible'\r\n                        }\r\n                    },\r\n                    text: {\r\n                        component: 'Magento_Ui/js/form/element/abstract',\r\n                        template: 'ui/grid/filters/field'\r\n                    },\r\n                    select: {\r\n                        component: 'Magento_Ui/js/form/element/select',\r\n                        template: 'ui/grid/filters/field',\r\n                        options: '${ JSON.stringify($.$data.column.options) }',\r\n                        caption: ' '\r\n                    },\r\n                    dateRange: {\r\n                        component: 'Magento_Ui/js/grid/filters/range',\r\n                        rangeType: 'date'\r\n                    },\r\n                    datetimeRange: {\r\n                        component: 'Magento_Ui/js/grid/filters/range',\r\n                        rangeType: 'datetime'\r\n                    },\r\n                    textRange: {\r\n                        component: 'Magento_Ui/js/grid/filters/range',\r\n                        rangeType: 'text'\r\n                    }\r\n                }\r\n            },\r\n            chipsConfig: {\r\n                name: '${ $.name }_chips',\r\n                provider: '${ $.chipsConfig.name }',\r\n                component: 'Magento_Ui/js/grid/filters/chips'\r\n            },\r\n            listens: {\r\n                active: 'updatePreviews',\r\n                applied: 'cancel updateActive'\r\n            },\r\n            statefull: {\r\n                applied: true\r\n            },\r\n            exports: {\r\n                applied: '${ $.provider }:params.filters'\r\n            },\r\n            imports: {\r\n                onColumnsUpdate: '${ $.columnsProvider }:elems',\r\n                onBackendError: '${ $.provider }:lastError',\r\n                bookmarksActiveIndex: '${ $.bookmarksProvider }:activeIndex'\r\n            },\r\n            modules: {\r\n                columns: '${ $.columnsProvider }',\r\n                chips: '${ $.chipsConfig.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes filters component.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        initialize: function (config) {\r\n            if (typeof config.options !== 'undefined' && config.options.dateFormat) {\r\n                this.constructor.defaults.templates.filters.dateRange.dateFormat = config.options.dateFormat;\r\n            }\r\n            _.bindAll(this, 'updateActive');\r\n\r\n            this._super()\r\n                .initChips()\r\n                .cancel();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    active: [],\r\n                    previews: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes chips component.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        initChips: function () {\r\n            layout([this.chipsConfig]);\r\n\r\n            this.chips('insertChild', this.name);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called when another element was added to filters collection.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        initElement: function (elem) {\r\n            this._super();\r\n\r\n            elem.on('elems', this.updateActive);\r\n\r\n            this.updateActive();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clears filters data.\r\n         *\r\n         * @param {Object} [filter] - If provided, then only specified\r\n         *      filter will be cleared. Otherwise, clears all data.\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        clear: function (filter) {\r\n            filter ?\r\n                filter.clear() :\r\n                _.invoke(this.active, 'clear');\r\n\r\n            this.apply();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets filters data to the applied state.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        apply: function () {\r\n            if (typeof $('body').notification === 'function') {\r\n                $('body').notification('clear');\r\n            }\r\n            this.set('applied', removeEmpty(this.filters));\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resets filters to the last applied state.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        cancel: function () {\r\n            this.set('filters', utils.copy(this.applied));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets provided data to filter components (without applying it).\r\n         *\r\n         * @param {Object} data - Filters data.\r\n         * @param {Boolean} [partial=false] - Flag that defines whether\r\n         *      to completely replace current filters data or to extend it.\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        setData: function (data, partial) {\r\n            var filters = partial ? this.filters : {};\r\n\r\n            data = utils.extend({}, filters, data);\r\n\r\n            this.set('filters', data);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates instance of a filter associated with the provided column.\r\n         *\r\n         * @param {Column} column - Column component for which to create a filter.\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        addFilter: function (column) {\r\n            var index       = column.index,\r\n                processed   = this._processed,\r\n                filter;\r\n\r\n            if (!column.filter || _.contains(processed, index)) {\r\n                return this;\r\n            }\r\n\r\n            filter = this.buildFilter(column);\r\n\r\n            processed.push(index);\r\n\r\n            layout([filter]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates filter component configuration associated with the provided column.\r\n         *\r\n         * @param {Column} column - Column component with a basic filter declaration.\r\n         * @returns {Object} Filters' configuration.\r\n         */\r\n        buildFilter: function (column) {\r\n            var filters = this.templates.filters,\r\n                filter  = column.filter,\r\n                type    = filters[filter.filterType];\r\n\r\n            if (_.isObject(filter) && type) {\r\n                filter = utils.extend({}, type, filter);\r\n            } else if (_.isString(filter)) {\r\n                filter = filters[filter];\r\n            }\r\n\r\n            filter = utils.extend({}, filters.base, filter);\r\n            //Accepting labels as is.\r\n            filter.__disableTmpl = {\r\n                label: 1,\r\n                options: 1\r\n            };\r\n\r\n            filter = utils.template(filter, {\r\n                filters: this,\r\n                column: column\r\n            }, true, true);\r\n\r\n            filter.__disableTmpl = {\r\n                label: true\r\n            };\r\n\r\n            return filter;\r\n        },\r\n\r\n        /**\r\n         * Returns an array of range filters.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getRanges: function () {\r\n            return this.elems.filter(function (filter) {\r\n                return filter.isRange;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Returns an array of non-range filters.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getPlain: function () {\r\n            return this.elems.filter(function (filter) {\r\n                return !filter.isRange;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Tells wether specified filter should be visible.\r\n         *\r\n         * @param {Object} filter\r\n         * @returns {Boolean}\r\n         */\r\n        isFilterVisible: function (filter) {\r\n            return filter.visible() || this.isFilterActive(filter);\r\n        },\r\n\r\n        /**\r\n         * Checks if specified filter is active.\r\n         *\r\n         * @param {Object} filter\r\n         * @returns {Boolean}\r\n         */\r\n        isFilterActive: function (filter) {\r\n            return _.contains(this.active, filter);\r\n        },\r\n\r\n        /**\r\n         * Checks if collection has visible filters.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasVisible: function () {\r\n            return this.elems.some(this.isFilterVisible, this);\r\n        },\r\n\r\n        /**\r\n         * Finds filters with a not empty data\r\n         * and sets them to the 'active' filters array.\r\n         *\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        updateActive: function () {\r\n            var applied = _.keys(this.applied);\r\n\r\n            this.active = this.elems.filter(function (elem) {\r\n                return _.contains(applied, elem.index);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns number of applied filters.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        countActive: function () {\r\n            return this.active.length;\r\n        },\r\n\r\n        /**\r\n         * Extract previews of a specified filters.\r\n         *\r\n         * @param {Array} filters - Filters to be processed.\r\n         * @returns {Filters} Chainable.\r\n         */\r\n        updatePreviews: function (filters) {\r\n            var previews = filters.map(extractPreview);\r\n\r\n            this.previews = _.compact(previews);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Listener of the columns provider children array changes.\r\n         *\r\n         * @param {Array} columns - Current columns list.\r\n         */\r\n        onColumnsUpdate: function (columns) {\r\n            columns.forEach(this.addFilter, this);\r\n        },\r\n\r\n        /**\r\n         * Provider ajax error listener.\r\n         *\r\n         * @param {bool} isError - Selected index of the filter.\r\n         */\r\n        onBackendError: function (isError) {\r\n            var defaultMessage = 'Something went wrong with processing the default view and we have restored the ' +\r\n                    'filter to its original state.',\r\n                customMessage  = 'Something went wrong with processing current custom view and filters have been ' +\r\n                    'reset to its original state. Please edit filters then click apply.';\r\n\r\n            if (isError) {\r\n                this.clear();\r\n\r\n                $('body').notification('clear')\r\n                    .notification('add', {\r\n                        error: true,\r\n                        message: $.mage.__(this.bookmarksActiveIndex !== 'default' ? customMessage : defaultMessage),\r\n\r\n                        /**\r\n                         * @param {String} message\r\n                         */\r\n                        insertMethod: function (message) {\r\n                            var $wrapper = $('<div></div>').html(message);\r\n\r\n                            $('.page-main-actions').after($wrapper);\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/filters/range.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiLayout',\r\n    'mageUtils',\r\n    'Magento_Ui/js/form/components/group',\r\n    'mage/translate'\r\n], function (_, layout, utils, Group, $t) {\r\n    'use strict';\r\n\r\n    return Group.extend({\r\n        defaults: {\r\n            template: 'ui/grid/filters/elements/group',\r\n            isRange: true,\r\n            templates: {\r\n                base: {\r\n                    parent: '${ $.$data.group.name }',\r\n                    provider: '${ $.$data.group.provider }',\r\n                    template: 'ui/grid/filters/field'\r\n                },\r\n                date: {\r\n                    component: 'Magento_Ui/js/form/element/date',\r\n                    dateFormat: 'MM/dd/YYYY',\r\n                    shiftedValue: 'filter'\r\n                },\r\n                datetime: {\r\n                    component: 'Magento_Ui/js/form/element/date',\r\n                    dateFormat: 'MM/dd/YYYY',\r\n                    shiftedValue: 'filter',\r\n                    options: {\r\n                        showsTime: true\r\n                    }\r\n                },\r\n                text: {\r\n                    component: 'Magento_Ui/js/form/element/abstract'\r\n                },\r\n                ranges: {\r\n                    from: {\r\n                        label: $t('from'),\r\n                        dataScope: 'from'\r\n                    },\r\n                    to: {\r\n                        label: $t('to'),\r\n                        dataScope: 'to'\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes range component.\r\n         *\r\n         * @returns {Range} Chainable.\r\n         */\r\n        initialize: function (config) {\r\n            if (config.dateFormat) {\r\n                this.constructor.defaults.templates.date.pickerDefaultDateFormat = config.dateFormat;\r\n            }\r\n            this._super()\r\n                .initChildren();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates instances of child components.\r\n         *\r\n         * @returns {Range} Chainable.\r\n         */\r\n        initChildren: function () {\r\n            var children = this.buildChildren();\r\n\r\n            layout(children);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates configuration for the child components.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        buildChildren: function () {\r\n            var templates   = this.templates,\r\n                typeTmpl    = templates[this.rangeType],\r\n                tmpl        = utils.extend({}, templates.base, typeTmpl),\r\n                children    = {};\r\n\r\n            _.each(templates.ranges, function (range, key) {\r\n                children[key] = utils.extend({}, tmpl, range);\r\n            });\r\n\r\n            return utils.template(children, {\r\n                group: this\r\n            }, true, true);\r\n        },\r\n\r\n        /**\r\n         * Clears childrens data.\r\n         *\r\n         * @returns {Range} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.elems.each('clear');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if some children has data.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasData: function () {\r\n            return this.elems.some('hasData');\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/filters/elements/ui-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/ui-select',\r\n    'jquery',\r\n    'underscore'\r\n], function (Select, $, _) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            bookmarkProvider: 'ns = ${ $.ns }, index = bookmarks',\r\n            filterChipsProvider: 'componentType = filters, ns = ${ $.ns }',\r\n            validationUrl: false,\r\n            loadedOption: [],\r\n            validationLoading: true,\r\n            imports: {\r\n                applied: '${ $.filterChipsProvider }:applied',\r\n                activeIndex: '${ $.bookmarkProvider }:activeIndex'\r\n            },\r\n            modules: {\r\n                filterChips: '${ $.filterChipsProvider }'\r\n            },\r\n            listens: {\r\n                activeIndex: 'validateInitialValue',\r\n                applied: 'validateInitialValue'\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * Initializes UiSelect component.\r\n         *\r\n         * @returns {UiSelect} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.validateInitialValue();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validate initial value actually exists\r\n         */\r\n        validateInitialValue: function () {\r\n            if (_.isEmpty(this.value())) {\r\n                this.validationLoading(false);\r\n\r\n                return;\r\n            }\r\n\r\n            $.ajax({\r\n                url: this.validationUrl,\r\n                type: 'GET',\r\n                dataType: 'json',\r\n                context: this,\r\n                data: {\r\n                    ids: this.value()\r\n                },\r\n\r\n                /** @param {Object} response */\r\n                success: function (response) {\r\n                    if (!_.isEmpty(response)) {\r\n                        this.options([]);\r\n                        this.success({\r\n                            options: response\r\n                        });\r\n                    }\r\n                    this.filterChips().updateActive();\r\n                },\r\n\r\n                /** set empty array if error occurs */\r\n                error: function () {\r\n                    this.options([]);\r\n                },\r\n\r\n                /** stop loader */\r\n                complete: function () {\r\n                    this.validationLoading(false);\r\n                    this.setCaption();\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/paging/paging.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'uiElement'\r\n], function (ko, _, utils, layout, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/grid/paging/paging',\r\n            totalTmpl: 'ui/grid/paging-total',\r\n            totalRecords: 0,\r\n            showTotalRecords: true,\r\n            pages: 1,\r\n            current: 1,\r\n            selectProvider: 'ns = ${ $.ns }, index = ids',\r\n\r\n            sizesConfig: {\r\n                component: 'Magento_Ui/js/grid/paging/sizes',\r\n                name: '${ $.name }_sizes',\r\n                storageConfig: {\r\n                    provider: '${ $.storageConfig.provider }',\r\n                    namespace: '${ $.storageConfig.namespace }'\r\n                }\r\n            },\r\n\r\n            imports: {\r\n                totalSelected: '${ $.selectProvider }:totalSelected',\r\n                totalRecords: '${ $.provider }:data.totalRecords',\r\n                showTotalRecords: '${ $.provider }:data.showTotalRecords',\r\n                filters: '${ $.provider }:params.filters',\r\n                keywordUpdated: '${ $.provider }:params.keywordUpdated'\r\n            },\r\n\r\n            exports: {\r\n                pageSize: '${ $.provider }:params.paging.pageSize',\r\n                current: '${ $.provider }:params.paging.current'\r\n            },\r\n\r\n            links: {\r\n                options: '${ $.sizesConfig.name }:options',\r\n                pageSize: '${ $.sizesConfig.name }:value'\r\n            },\r\n\r\n            statefull: {\r\n                pageSize: true,\r\n                current: true\r\n            },\r\n\r\n            listens: {\r\n                'pages': 'onPagesChange',\r\n                'pageSize': 'onPageSizeChange',\r\n                'totalRecords': 'updateCounter',\r\n                'showTotalRecords': 'updateShowTotalRecords',\r\n                '${ $.provider }:params.filters': 'goFirst',\r\n                '${ $.provider }:params.search': 'onSearchUpdate'\r\n            },\r\n\r\n            modules: {\r\n                sizes: '${ $.sizesConfig.name }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes paging component.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initSizes()\r\n                .updateCounter();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'totalSelected',\r\n                    'totalRecords',\r\n                    'showTotalRecords',\r\n                    'pageSize',\r\n                    'pages',\r\n                    'current'\r\n                ]);\r\n\r\n            this._current = ko.pureComputed({\r\n                read: ko.getObservable(this, 'current'),\r\n\r\n                /**\r\n                 * Validates page change according to user's input.\r\n                 * Sets current observable to result of validation.\r\n                 * Calls reload method then.\r\n                 */\r\n                write: function (value) {\r\n                    this.setPage(value)\r\n                        ._current.notifySubscribers(this.current);\r\n                },\r\n\r\n                owner: this\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes sizes component.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initSizes: function () {\r\n            layout([this.sizesConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Gets first item index on current page.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getFirstItemIndex: function () {\r\n            return this.pageSize * (this.current - 1) + 1;\r\n        },\r\n\r\n        /**\r\n         * Gets last item index on current page.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getLastItemIndex: function () {\r\n            var lastItem = this.getFirstItemIndex() + this.pageSize - 1;\r\n\r\n            return this.totalRecords < lastItem ? this.totalRecords : lastItem;\r\n        },\r\n\r\n        /**\r\n         * Sets cursor to the provied value.\r\n         *\r\n         * @param {(Number|String)} value - New value of the cursor.\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        setPage: function (value) {\r\n            this.current = this.normalize(value);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Increments current page value.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        next: function () {\r\n            this.setPage(this.current + 1);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Decrements current page value.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        prev: function () {\r\n            this.setPage(this.current - 1);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Goes to the first page.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        goFirst: function () {\r\n            if (!_.isUndefined(this.filters)) {\r\n                this.current = 1;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Goes to the last page.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        goLast: function () {\r\n            this.current = this.pages;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if current page is the first one.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isFirst: function () {\r\n            return this.current === 1;\r\n        },\r\n\r\n        /**\r\n         * Checks if current page is the last one.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isLast: function () {\r\n            return this.current === this.pages;\r\n        },\r\n\r\n        /**\r\n         * Updates number of pages.\r\n         */\r\n        updateCounter: function () {\r\n            this.pages = Math.ceil(this.totalRecords / this.pageSize) || 1;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates show total records flag.\r\n         */\r\n        updateShowTotalRecords: function () {\r\n            if (this.showTotalRecords === undefined) {\r\n                this.showTotalRecords = true;\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calculates new page cursor based on the\r\n         * previous and current page size values.\r\n         */\r\n        updateCursor: function () {\r\n            var cursor = this.current - 1,\r\n                size = this.pageSize,\r\n                oldSize = _.isUndefined(this.previousSize) ? this.pageSize : this.previousSize,\r\n                delta = cursor * (oldSize - size) / size;\r\n\r\n            delta = size > oldSize ?\r\n                Math.ceil(delta) :\r\n                Math.floor(delta);\r\n\r\n            cursor += delta + 1;\r\n\r\n            this.previousSize = size;\r\n\r\n            this.setPage(cursor);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Converts provided value to a number and puts\r\n         * it in range between 1 and total amount of pages.\r\n         *\r\n         * @param {(Number|String)} value - Value to be normalized.\r\n         * @returns {Number}\r\n         */\r\n        normalize: function (value) {\r\n            value = +value;\r\n\r\n            if (isNaN(value)) {\r\n                return 1;\r\n            }\r\n\r\n            return utils.inRange(Math.round(value), 1, this.pages);\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the page size.\r\n         */\r\n        onPageSizeChange: function () {\r\n            this.updateCounter()\r\n                .updateCursor();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the pages amount.\r\n         */\r\n        onPagesChange: function () {\r\n            this.updateCursor();\r\n        },\r\n\r\n        /**\r\n         * Resent the pagination to Page 1 on search keyword update\r\n         */\r\n        onSearchUpdate: function () {\r\n            if (!_.isUndefined(this.keywordUpdated) && this.keywordUpdated) {\r\n                this.goFirst();\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/paging/sizes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiElement'\r\n], function (ko, _, utils, Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/grid/paging/sizes',\r\n            minSize: 1,\r\n            maxSize: 999,\r\n            statefull: {\r\n                options: true,\r\n                value: true\r\n            },\r\n            listens: {\r\n                value: 'onValueChange',\r\n                options: 'onSizesChange'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes sizes component.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .updateArray();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'value',\r\n                    'editing',\r\n                    'customVisible',\r\n                    'customValue'\r\n                ])\r\n                .track({\r\n                    optionsArray: []\r\n                });\r\n\r\n            this._value = ko.pureComputed({\r\n                read: ko.getObservable(this, 'value'),\r\n\r\n                /**\r\n                 * Validates input field prior to updating 'value' property.\r\n                 */\r\n                write: function (value) {\r\n                    value = this.normalize(value);\r\n\r\n                    this.value = value;\r\n                    this._value.notifySubscribers(value);\r\n                },\r\n\r\n                owner: this\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Starts editing of the specified size.\r\n         *\r\n         * @param {Number} value - Value of the size.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        edit: function (value) {\r\n            this.editing = value;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Discards changes made to the currently editable size.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        discardEditing: function () {\r\n            var value = this.editing;\r\n\r\n            if (value) {\r\n                this.updateSize(value, value);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Invokes 'discardEditing' and 'discardCustom' actions.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        discardAll: function () {\r\n            this.discardEditing()\r\n                .discardCustom();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns value of the first size.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getFirst: function () {\r\n            return this.optionsArray[0].value;\r\n        },\r\n\r\n        /**\r\n         * Returns size which matches specified value.\r\n         *\r\n         * @param {Number} value - Value of the item.\r\n         * @returns {Object|Undefined}\r\n         */\r\n        getSize: function (value) {\r\n            return this.options[value];\r\n        },\r\n\r\n        /**\r\n         * Sets current size to the specified value.\r\n         *\r\n         * @param {Number} value - Value of the size.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        setSize: function (value) {\r\n            this.value = value;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds a new value to sizes list.\r\n         *\r\n         * @param {Number} value - Value to be added.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        addSize: function (value) {\r\n            var size;\r\n\r\n            if (!this.hasSize(value)) {\r\n                size = this.createSize(value);\r\n\r\n                this.set('options.' + value, size);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes provided value from the sizes list.\r\n         *\r\n         * @param {Number} value - Value to be removed.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        removeSize: function (value) {\r\n            if (!this.hasSize(value)) {\r\n                return this;\r\n            }\r\n\r\n            this.remove('options.' + value);\r\n\r\n            if (this.isSelected(value)) {\r\n                this.setSize(this.getFirst());\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates existing value to the provided one. If new value\r\n         * is not specified, then sizes' '_value' property will be taken.\r\n         *\r\n         * @param {Number} value - Existing value that should be updated.\r\n         * @param {(Number|String)} [newValue=size._value] - New size value.\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        updateSize: function (value, newValue) {\r\n            var size = this.getSize(value);\r\n\r\n            if (!size) {\r\n                return this;\r\n            }\r\n\r\n            newValue = newValue || size._value;\r\n\r\n            if (isNaN(+newValue)) {\r\n                this.discardEditing();\r\n\r\n                return this;\r\n            }\r\n\r\n            newValue = this.normalize(newValue);\r\n\r\n            this.remove('options.' + value)\r\n                .addSize(newValue);\r\n\r\n            if (this.isSelected(value)) {\r\n                this.setSize(newValue);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates new editable size instance with the provided value.\r\n         *\r\n         * @param {Number} value - Value of the size.\r\n         * @returns {Object}\r\n         */\r\n        createSize: function (value) {\r\n            return {\r\n                value: value,\r\n                label: value,\r\n                _value: value,\r\n                editable: true\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value exists in the sizes list.\r\n         *\r\n         * @param {Number} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        hasSize: function (value) {\r\n            return !!this.getSize(value);\r\n        },\r\n\r\n        /**\r\n         * Hides and clears custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        discardCustom: function () {\r\n            this.hideCustom()\r\n                .clearCustom();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Shows custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        showCustom: function () {\r\n            this.customVisible = true;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        hideCustom: function () {\r\n            this.customVisible = false;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Empties value of the custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        clearCustom: function () {\r\n            this.customValue = '';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds a new size specified in the custom field.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        applyCustom: function () {\r\n            var value = this.customValue;\r\n\r\n            value = this.normalize(value);\r\n\r\n            this.addSize(value)\r\n                .setSize(value)\r\n                .discardCustom();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if custom field is visible.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isCustomVisible: function () {\r\n            return this.customVisible;\r\n        },\r\n\r\n        /**\r\n         * Converts provided value to a number and puts\r\n         * it in range between 'minSize' and 'maxSize' properties.\r\n         *\r\n         * @param {(Number|String)} value - Value to be normalized.\r\n         * @returns {Number}\r\n         */\r\n        normalize: function (value) {\r\n            value = +value;\r\n\r\n            if (isNaN(value)) {\r\n                return this.getFirst();\r\n            }\r\n\r\n            return utils.inRange(Math.round(value), this.minSize, this.maxSize);\r\n        },\r\n\r\n        /**\r\n         * Updates the array of options.\r\n         *\r\n         * @returns {Sizes} Chainable.\r\n         */\r\n        updateArray: function () {\r\n            var array = _.values(this.options);\r\n\r\n            this.optionsArray = _.sortBy(array, 'value');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value is in editing state.\r\n         *\r\n         * @param {Number} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isEditing: function (value) {\r\n            return this.editing === value;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value is selected.\r\n         *\r\n         * @param {Number} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isSelected: function (value) {\r\n            return this.value === value;\r\n        },\r\n\r\n        /**\r\n         * Listener of the 'value' property changes.\r\n         */\r\n        onValueChange: function () {\r\n            this.discardAll()\r\n                .trigger('close');\r\n        },\r\n\r\n        /**\r\n         * Listener of the 'options' object changes.\r\n         */\r\n        onSizesChange: function () {\r\n            this.editing = false;\r\n\r\n            this.updateArray();\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/search/search.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiLayout',\r\n    'mage/translate',\r\n    'mageUtils',\r\n    'uiElement',\r\n    'jquery'\r\n], function (_, layout, $t, utils, Element, $) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/grid/search/search',\r\n            placeholder: $t('Search by keyword'),\r\n            label: $t('Keyword'),\r\n            value: '',\r\n            keywordUpdated: false,\r\n            previews: [],\r\n            chipsProvider: 'componentType = filtersChips, ns = ${ $.ns }',\r\n            statefull: {\r\n                value: true\r\n            },\r\n            tracks: {\r\n                value: true,\r\n                previews: true,\r\n                inputValue: true,\r\n                focused: true,\r\n                keywordUpdated: true\r\n            },\r\n            imports: {\r\n                inputValue: 'value',\r\n                updatePreview: 'value',\r\n                focused: false\r\n            },\r\n            exports: {\r\n                value: '${ $.provider }:params.search',\r\n                keywordUpdated: '${ $.provider }:params.keywordUpdated'\r\n            },\r\n            modules: {\r\n                chips: '${ $.chipsProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes search component.\r\n         *\r\n         * @returns {Search} Chainable.\r\n         */\r\n        initialize: function () {\r\n            var urlParams = window.location.href.slice(window.location.href.search('[\\&\\?](search=)')).split('&'),\r\n                searchTerm = [];\r\n\r\n            this._super()\r\n                .initChips();\r\n\r\n            if (urlParams[0]) {\r\n                searchTerm = urlParams[0].split('=');\r\n\r\n                if (searchTerm[1]) {\r\n                    this.apply(decodeURIComponent(searchTerm[1]));\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes chips component.\r\n         *\r\n         * @returns {Search} Chainbale.\r\n         */\r\n        initChips: function () {\r\n            this.chips('insertChild', this, 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clears search.\r\n         *\r\n         * @returns {Search} Chainable.\r\n         */\r\n        clear: function () {\r\n            this.value = '';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Click To ScrollTop.\r\n         */\r\n        scrollTo: function ($data) {\r\n            $('html, body').animate({\r\n                scrollTop: 0\r\n            }, 'slow', function () {\r\n                $data.focused = false;\r\n                $data.focused = true;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Resets input value to the last applied state.\r\n         *\r\n         * @returns {Search} Chainable.\r\n         */\r\n        cancel: function () {\r\n            this.inputValue = this.value;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies search query.\r\n         *\r\n         * @param {String} [value=inputValue] - If not specified, then\r\n         *      value of the input field will be used.\r\n         * @returns {Search} Chainable.\r\n         */\r\n        apply: function (value) {\r\n            value = value || this.inputValue;\r\n\r\n            this.keywordUpdated = this.value !== value;\r\n            this.value = this.inputValue = value.trim();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates preview data.\r\n         *\r\n         * @returns {Search} Chainable.\r\n         */\r\n        updatePreview: function () {\r\n            var preview = [];\r\n\r\n            if (this.value) {\r\n                preview.push({\r\n                    elem: this,\r\n                    label: this.label,\r\n                    preview: this.value\r\n                });\r\n            }\r\n\r\n            this.previews = preview;\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/grid/sticky/sticky.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'underscore',\r\n    'uiComponent',\r\n    'Magento_Ui/js/lib/view/utils/raf'\r\n], function ($, _, Component, raf) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            listingSelector: '${ $.listingProvider }::not([data-role = \"sticky-el-root\"])',\r\n            toolbarSelector: '${ $.toolbarProvider }::not([data-role = \"sticky-el-root\"])',\r\n            bulkRowSelector: '[data-role = \"data-grid-bulk-row\"]',\r\n            bulkRowHeaderSelector: '.data-grid-info-panel:visible',\r\n            tableSelector: 'table',\r\n            columnSelector: 'thead tr th',\r\n            rowSelector: 'tbody tr',\r\n            toolbarCollapsiblesSelector: '[data-role=\"toolbar-menu-item\"]',\r\n            toolbarCollapsiblesActiveClass: '_active',\r\n            template: 'ui/grid/sticky/sticky',\r\n            stickyContainerSelector: '.sticky-header',\r\n            stickyElementSelector: '[data-role = \"sticky-el-root\"]',\r\n            leftDataGridCapSelector: '.data-grid-cap-left',\r\n            rightDataGridCapSelector: '.data-grid-cap-right',\r\n            visible: false,\r\n            enableToolbar: true,\r\n            enableHeader: true,\r\n            modules: {\r\n                toolbar: '${ $.toolbarProvider }',\r\n                listing: '${ $.listingProvider }'\r\n            },\r\n            otherStickyElsSize: 77,\r\n            containerNode: null,\r\n            listingNode: null,\r\n            toolbarNode: null,\r\n            stickyListingNode: null,\r\n            stickyToolbarNode: null,\r\n            storedOriginalToolbarElements: [],\r\n            cache: {},\r\n            flags: {},\r\n            dirtyFlag: 'dirty'\r\n        },\r\n\r\n        /**\r\n         * Initializes Sticky component.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            _.bindAll(this,\r\n                'adjustStickyElems',\r\n                'initListingNode',\r\n                'initToolbarNode',\r\n                'initContainerNode',\r\n                'initColumns',\r\n                'initStickyListingNode',\r\n                'initStickyToolbarNode',\r\n                'initLeftDataGridCap',\r\n                'initRightDataGridCap'\r\n            );\r\n\r\n            $.async(this.listingSelector,\r\n                this.initListingNode);\r\n            $.async(this.toolbarSelector,\r\n                this.initToolbarNode);\r\n\r\n            $.async(this.stickyContainerSelector,\r\n                this,\r\n                this.initContainerNode);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init observables\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track('visible');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init original listing node\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initListingNode: function (node) {\r\n            if ($(node).is(this.stickyElementSelector)) {\r\n                return;\r\n            }\r\n            this.listingNode = $(node);\r\n            $.async(this.columnSelector, node, this.initColumns);\r\n        },\r\n\r\n        /**\r\n         * Init original toolbar node\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initToolbarNode: function (node) {\r\n            if ($(node).is(this.stickyElementSelector)) {\r\n                return;\r\n            }\r\n            this.toolbarNode = $(node);\r\n        },\r\n\r\n        /**\r\n         * Init sticky listing node\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initStickyListingNode: function (node) {\r\n            this.stickyListingNode = $(node);\r\n            this.checkPos();\r\n            this.initListeners();\r\n        },\r\n\r\n        /**\r\n         * Init sticky toolbar node\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initStickyToolbarNode: function (node) {\r\n            this.stickyToolbarNode = $(node);\r\n        },\r\n\r\n        /**\r\n         * Init sticky header container node\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initContainerNode: function (node) {\r\n            this.containerNode = $(node);\r\n\r\n            $.async(this.leftDataGridCapSelector,\r\n                node,\r\n                this.initLeftDataGridCap);\r\n            $.async(this.rightDataGridCapSelector,\r\n                node,\r\n                this.initRightDataGridCap);\r\n\r\n            $.async(this.stickyElementSelector,\r\n                this.listing(),\r\n                this.initStickyListingNode);\r\n            $.async(this.stickyElementSelector,\r\n                this.toolbar(),\r\n                this.initStickyToolbarNode);\r\n        },\r\n\r\n        /**\r\n         * Init columns (each time when amount of columns is changed)\r\n         *\r\n         */\r\n        initColumns: function () {\r\n            this.columns = this.listingNode.find(this.columnSelector);\r\n        },\r\n\r\n        /**\r\n         * Init left DataGridCap\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initLeftDataGridCap: function (node) {\r\n            this.leftDataGridCap = $(node);\r\n        },\r\n\r\n        /**\r\n         * Init right DataGridCap\r\n         *\r\n         * @param {HTMLElement} node\r\n         */\r\n        initRightDataGridCap: function (node) {\r\n            this.rightDataGridCap = $(node);\r\n        },\r\n\r\n        /**\r\n         * Init listeners\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initListeners: function () {\r\n            this.adjustStickyElems();\r\n            this.initOnResize()\r\n                .initOnScroll()\r\n                .initOnListingScroll();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Start to listen to window scroll event\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initOnScroll: function () {\r\n            this.lastHorizontalScrollPos = $(window).scrollLeft();\r\n            document.addEventListener('scroll', function () {\r\n                this.flags.scrolled = true;\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Start to listen to original listing scroll event\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initOnListingScroll: function () {\r\n            $(this.listingNode).on('scroll', function (e) {\r\n                this.flags.listingScrolled = true;\r\n                this.flags.listingScrolledValue = $(e.target).scrollLeft();\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Start to listen to window resize event\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initOnResize: function () {\r\n            $(window).on('resize', function () {\r\n                this.flags.resized = true;\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adjust sticky header elements according to flags of the events that have happened in the endless RAF loop\r\n         */\r\n        adjustStickyElems: function () {\r\n            if (this.flags.resized ||\r\n                this.flags.scrolled) {\r\n                this.checkPos();\r\n            }\r\n\r\n            if (this.visible) {\r\n                this.checkTableElemsWidth();\r\n\r\n                if (this.flags.originalWidthChanged) {\r\n                    this.adjustContainerElemsWidth();\r\n                }\r\n\r\n                if (this.flags.resized) {\r\n                    this.onResize();\r\n                }\r\n\r\n                if (this.flags.scrolled) {\r\n                    this.onWindowScroll();\r\n                }\r\n\r\n                if (this.flags.listingScrolled) {\r\n                    this.onListingScroll(this.flags.listingScrolledValue);\r\n                }\r\n            }\r\n            _.each(this.flags, function (val, key) {\r\n                if (val === this.dirtyFlag) {\r\n                    this.flags[key] = false;\r\n                } else if (val) {\r\n                    this.flags[key] = this.dirtyFlag;\r\n                }\r\n            }, this);\r\n\r\n            raf(this.adjustStickyElems);\r\n        },\r\n\r\n        /**\r\n         * Handles window scroll\r\n         */\r\n        onWindowScroll: function () {\r\n            var scrolled = $(window).scrollLeft(),\r\n                horizontal = this.lastHorizontalScrollPos !== scrolled;\r\n\r\n            if (horizontal) {\r\n                this.adjustOffset()\r\n                    .adjustDataGridCapPositions();\r\n                this.lastHorizontalScrollPos = scrolled;\r\n            } else {\r\n                this.checkPos();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handles original listing scroll\r\n         *\r\n         * @param {Number} scrolled\r\n         */\r\n        onListingScroll: function (scrolled) {\r\n            this.adjustOffset(scrolled);\r\n        },\r\n\r\n        /**\r\n         * Handles window resize\r\n         */\r\n        onResize: function () {\r\n            this.checkPos();\r\n            this.adjustContainerElemsWidth()\r\n                .adjustDataGridCapPositions();\r\n        },\r\n\r\n        /**\r\n         * Check if original table or columns change it dimensions and sets appropriate flag\r\n         */\r\n        checkTableElemsWidth: function () {\r\n            var newWidth = this.getTableWidth();\r\n\r\n            if (this.cache.tableWidth !== newWidth) {\r\n                this.cache.tableWidth = newWidth;\r\n                this.flags.originalWidthChanged = true;\r\n            } else if (this.cache.colChecksum !== this.getColsChecksum()) {\r\n                this.cache.colChecksum = this.getColsChecksum();\r\n                this.flags.originalWidthChanged = true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the checksum of original columns width\r\n         *\r\n         * @returns {Number}.\r\n         */\r\n        getColsChecksum: function () {\r\n            return _.reduce(this.columns,\r\n            function (pv, cv) {\r\n                return ($(pv).width() || pv) + '' + $(cv).width();\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get the width of the sticky table wrapper\r\n         *\r\n         * @returns {Number}.\r\n         */\r\n        getListingWidth: function () {\r\n            return this.listingNode.width();\r\n        },\r\n\r\n        /**\r\n         * Get the width of the original table\r\n         *\r\n         * @returns {Number}.\r\n         */\r\n        getTableWidth: function () {\r\n            return this.listingNode.find(this.tableSelector).width();\r\n        },\r\n\r\n        /**\r\n         * Get the top elem: header or toolbar\r\n         *\r\n         * @returns {HTMLElement}.\r\n         */\r\n        getTopElement: function () {\r\n            return this.toolbarNode || this.listingNode;\r\n        },\r\n\r\n        /**\r\n         * Get the height of the other sticky elem (Page header)\r\n         *\r\n         * @returns {Number}.\r\n         */\r\n        getOtherStickyElementsSize: function () {\r\n            return this.otherStickyElsSize;\r\n        },\r\n\r\n        /**\r\n         * Get original bulk row height, if is visible\r\n         *\r\n         * @returns {Number}.\r\n         */\r\n        getBulkRowHeight: function () {\r\n            return this.listingNode.find(this.bulkRowSelector).filter(':visible').height();\r\n        },\r\n\r\n        /**\r\n         * Get top Y coord of the sticky header\r\n         *\r\n         * @returns {Number}.\r\n         */\r\n        getListingTopYCoord: function () {\r\n            var bulkRowHeight = this.getBulkRowHeight();\r\n\r\n            return this.listingNode.find('tbody').offset().top -\r\n                this.containerNode.height() -\r\n                $(window).scrollTop() +\r\n                bulkRowHeight;\r\n        },\r\n\r\n        /**\r\n         * Check if sticky header must be visible\r\n         *\r\n         * @returns {Boolean}.\r\n         */\r\n        getMustBeSticky: function () {\r\n            var stickyTopCondition = this.getListingTopYCoord() - this.getOtherStickyElementsSize(),\r\n                stickyBottomCondition = this.listingNode.offset().top +\r\n                    this.listingNode.height() -\r\n                    $(window).scrollTop() +\r\n                    this.getBulkRowHeight() -\r\n                    this.getOtherStickyElementsSize();\r\n\r\n            return stickyTopCondition < 0 && stickyBottomCondition > 0;\r\n        },\r\n\r\n        /**\r\n         * Resize sticky header and cols\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        adjustContainerElemsWidth: function () {\r\n            this.resizeContainer()\r\n                .resizeCols()\r\n                .resizeBulk();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resize sticky header\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        resizeContainer: function () {\r\n            var listingWidth = this.getListingWidth();\r\n\r\n            this.stickyListingNode.innerWidth(listingWidth);\r\n            this.stickyListingNode.find(this.tableSelector).innerWidth(this.getTableWidth());\r\n\r\n            if (this.stickyToolbarNode) {\r\n                this.stickyToolbarNode.innerWidth(listingWidth);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resize sticky cols\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        resizeCols: function () {\r\n            var cols = this.listingNode.find(this.columnSelector);\r\n\r\n            this.stickyListingNode.find(this.columnSelector).each(function (ind) {\r\n                var originalColWidth =  $(cols[ind]).width();\r\n\r\n                $(this).width(originalColWidth);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resize bulk row header\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        resizeBulk: function () {\r\n            var bulk = this.containerNode.find(this.bulkRowHeaderSelector)[0];\r\n\r\n            if (bulk) {\r\n                $(bulk).innerWidth(this.getListingWidth());\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Reset viewport to the top of listing\r\n         */\r\n        resetToTop: function () {\r\n            var posOfTopEl = this.getTopElement().offset().top - this.getOtherStickyElementsSize() || 0;\r\n\r\n            $(window).scrollTop(posOfTopEl);\r\n        },\r\n\r\n        /**\r\n         * Adjust sticky header offset\r\n         *\r\n         * @param {Number} val\r\n         * @returns {Object} Chainable.\r\n         */\r\n        adjustOffset: function (val) {\r\n            val = val || this.listingNode.scrollLeft();\r\n            this.stickyListingNode.offset({\r\n                left: this.listingNode.offset().left - val\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adjust both DataGridCap position\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        adjustDataGridCapPositions: function () {\r\n            this.adjustLeftDataGridCapPos()\r\n                .adjustRightDataGridCapPos();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adjust left DataGridCap position\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        adjustLeftDataGridCapPos: function () {\r\n            this.leftDataGridCap.offset({\r\n                left: this.listingNode.offset().left - this.leftDataGridCap.width()\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adjust right DataGridCap position\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        adjustRightDataGridCapPos: function () {\r\n            this.rightDataGridCap.offset({\r\n                left: this.listingNode.offset().left + this.listingNode.width()\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides the oiginal toolbar opened dropdowns/collapsibles etc\r\n         */\r\n        collapseOriginalElements: function () {\r\n            this.toolbarNode\r\n                .find(this.toolbarCollapsiblesSelector)\r\n                .css('visibility', 'hidden');\r\n            $(this.listingNode.find(this.bulkRowSelector)[0]).css('visibility', 'hidden');\r\n        },\r\n\r\n        /**\r\n         * Restores the oiginal toolbar opened dropdowns/collapsibles etc\r\n         */\r\n        restoreOriginalElements: function () {\r\n            this.toolbarNode\r\n                .find(this.toolbarCollapsiblesSelector)\r\n                .css('visibility', 'visible');\r\n            $(this.listingNode.find(this.bulkRowSelector)[0]).css('visibility', 'visible');\r\n        },\r\n\r\n        /**\r\n         * Toggle the visibility of sticky header\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        toggleContainerVisibility: function () {\r\n            this.visible = !this.visible;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks position of the listing to know if need to show/hide sticky header\r\n         *\r\n         * @returns {Boolean} whether the visibility of the sticky header was toggled.\r\n         */\r\n        checkPos: function () {\r\n            var isSticky = this.visible,\r\n                mustBeSticky = this.getMustBeSticky(),\r\n                needChange = isSticky !== mustBeSticky;\r\n\r\n            if (needChange) {\r\n                if (mustBeSticky) {\r\n                    this.collapseOriginalElements();\r\n                    this.toggleContainerVisibility();\r\n                    this.adjustContainerElemsWidth()\r\n                        .adjustOffset()\r\n                        .adjustDataGridCapPositions();\r\n\r\n                } else {\r\n                    this.toggleContainerVisibility();\r\n                    this.restoreOriginalElements();\r\n                }\r\n            }\r\n\r\n            return needChange;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/collapsible.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'uiComponent'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            opened: false,\r\n            collapsible: true\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Collapsible} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('opened');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles value of the 'opened' property.\r\n         *\r\n         * @returns {Collapsible} Chainable.\r\n         */\r\n        toggleOpened: function () {\r\n            this.opened() ?\r\n                this.close() :\r\n                this.open();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets 'opened' flag to false.\r\n         *\r\n         * @returns {Collapsible} Chainable.\r\n         */\r\n        close: function () {\r\n            if (this.collapsible) {\r\n                this.opened(false);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets 'opened' flag to true.\r\n         *\r\n         * @returns {Collapsible} Chainable.\r\n         */\r\n        open: function () {\r\n            if (this.collapsible) {\r\n                this.opened(true);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/key-codes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n        13: 'enterKey',\r\n        27: 'escapeKey',\r\n        40: 'pageDownKey',\r\n        38: 'pageUpKey',\r\n        32: 'spaceKey',\r\n        9:  'tabKey',\r\n        37: 'pageLeftKey',\r\n        39: 'pageRightKey',\r\n        17: 'ctrlKey',\r\n        18: 'altKey',\r\n        16: 'shiftKey',\r\n        191: 'forwardSlashKey',\r\n        66: 'bKey',\r\n        73: 'iKey',\r\n        85: 'uKey'\r\n    };\r\n});\r\n","Magento_Ui/js/lib/spinner.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var selector = '[data-role=\"spinner\"]',\r\n        spinner = $(selector);\r\n\r\n    return {\r\n        /**\r\n         * Show spinner.\r\n         */\r\n        show: function () {\r\n            spinner.show();\r\n        },\r\n\r\n        /**\r\n         * Hide spinner.\r\n         */\r\n        hide: function () {\r\n            spinner.hide();\r\n        },\r\n\r\n        /**\r\n         * Get spinner by selector.\r\n         *\r\n         * @param {String} id\r\n         * @return {jQuery}\r\n         */\r\n        get: function (id) {\r\n            return $(selector + '[data-component=\"' + id + '\"]');\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/step-wizard.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiRegistry',\r\n    'uiComponent',\r\n    'jquery',\r\n    'underscore',\r\n    'ko',\r\n    'mage/backend/notification',\r\n    'mage/translate'\r\n], function (uiRegistry, Component, $, _, ko) {\r\n    'use strict';\r\n\r\n    var Wizard;\r\n\r\n    ko.utils.domNodeDisposal.cleanExternalData = _.wrap(\r\n        ko.utils.domNodeDisposal.cleanExternalData,\r\n        function (func, node) {\r\n            if (!$(node).closest('[data-type=skipKO]').length) {\r\n                func(node);\r\n            }\r\n        }\r\n    );\r\n\r\n    /**\r\n     * Wizard constructor.\r\n     *\r\n     * @param {Array} steps\r\n     * @param {String} modalClass\r\n     * @constructor\r\n     */\r\n    Wizard = function (steps, modalClass) {\r\n        this.steps = steps;\r\n        this.index = 0;\r\n        this.data = {};\r\n        this.nextLabelText = $.mage.__('Next');\r\n        this.prevLabelText = $.mage.__('Back');\r\n        this.elementSelector = '[data-role=steps-wizard-main]';\r\n        this.element = modalClass ? $('.' + modalClass + this.elementSelector) : $(this.elementSelector);\r\n        this.nextLabel = '[data-role=\"step-wizard-next\"]';\r\n        this.prevLabel = '[data-role=\"step-wizard-prev\"]';\r\n        this.element.notification();\r\n\r\n        /**\r\n         * Move to newIndex.\r\n         *\r\n         * @param {Number} newIndex\r\n         * @return {String}\r\n         */\r\n        this.move = function (newIndex) {\r\n            if (!this.preventSwitch(newIndex)) {\r\n                if (newIndex > this.index) {\r\n                    this._next(newIndex);\r\n                } else if (newIndex < this.index) {\r\n                    this._prev(newIndex);\r\n                }\r\n            }\r\n            this.updateLabels(this.getStep());\r\n            this.showNotificationMessage();\r\n\r\n            return this.getStep().name;\r\n        };\r\n\r\n        /**\r\n         * Move wizard to next step.\r\n         *\r\n         * @return {String}\r\n         */\r\n        this.next = function () {\r\n            this.move(this.index + 1);\r\n\r\n            return this.getStep().name;\r\n        };\r\n\r\n        /**\r\n         * Move wizard to previous step.\r\n         *\r\n         * @return {String}\r\n         */\r\n        this.prev = function () {\r\n            this.move(this.index - 1);\r\n\r\n            return this.getStep().name;\r\n        };\r\n\r\n        /**\r\n         * @return {*}\r\n         */\r\n        this.preventSwitch = function (newIndex) {\r\n            return newIndex < 0 || (newIndex - this.index) > 1;//eslint-disable-line no-extra-parens\r\n        };\r\n\r\n        /**\r\n         * @param {Number} newIndex\r\n         * @return {Boolean}\r\n         * @private\r\n         */\r\n        this._next = function (newIndex) {\r\n            newIndex = _.isNumber(newIndex) ? newIndex : this.index + 1;\r\n\r\n            try {\r\n                this.getStep().force(this);\r\n\r\n                if (newIndex >= steps.length) {\r\n                    return false;\r\n                }\r\n            } catch (e) {\r\n                this.setNotificationMessage(e.message, true);\r\n\r\n                return false;\r\n            }\r\n            this.cleanErrorNotificationMessage();\r\n            this.index = newIndex;\r\n            this.cleanNotificationMessage();\r\n            this.render();\r\n        };\r\n\r\n        /**\r\n         * @param {Number} newIndex\r\n         * @private\r\n         */\r\n        this._prev = function (newIndex) {\r\n            newIndex = _.isNumber(newIndex) ? newIndex : this.index - 1;\r\n            this.getStep().back(this);\r\n            this.index = newIndex;\r\n        };\r\n\r\n        /**\r\n         * @param {Number} stepIndex\r\n         * @return {Object}\r\n         */\r\n        this.getStep = function (stepIndex) {\r\n            return this.steps[stepIndex || this.index] || {};\r\n        };\r\n\r\n        /**\r\n         * @param {String} message\r\n         * @param {String} error\r\n         */\r\n        this.notifyMessage = function (message, error) {\r\n            $(this.element).notification('clear').notification('add', {\r\n                error: error,\r\n                message: message\r\n            });\r\n        };\r\n\r\n        /**\r\n         * @param {Object} step\r\n         */\r\n        this.updateLabels = function (step) {\r\n            this.element.find(this.nextLabel).find('button').text(step.nextLabelText || this.nextLabelText);\r\n            this.element.find(this.prevLabel).find('button').text(step.prevLabelText || this.prevLabelText);\r\n        };\r\n\r\n        /**\r\n         * Show notification message.\r\n         */\r\n        this.showNotificationMessage = function () {\r\n            if (!_.isEmpty(this.getStep())) {\r\n                this.hideNotificationMessage();\r\n\r\n                if (this.getStep().notificationMessage.text !== null) {\r\n                    this.notifyMessage(\r\n                        this.getStep().notificationMessage.text,\r\n                        this.getStep().notificationMessage.error\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Remove notification message.\r\n         */\r\n        this.cleanNotificationMessage = function () {\r\n            this.getStep().notificationMessage.text = null;\r\n            this.hideNotificationMessage();\r\n        };\r\n\r\n        /**\r\n         * Remove error message.\r\n         */\r\n        this.cleanErrorNotificationMessage = function () {\r\n            if (this.getStep().notificationMessage.error === true) {\r\n                this.cleanNotificationMessage();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {String} text\r\n         * @param {String} error\r\n         */\r\n        this.setNotificationMessage = function (text, error) {\r\n            error = error !== undefined;\r\n\r\n            if (!_.isEmpty(this.getStep())) {\r\n                this.getStep().notificationMessage.text = text;\r\n                this.getStep().notificationMessage.error = error;\r\n                this.showNotificationMessage();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Hide notification message.\r\n         */\r\n        this.hideNotificationMessage = function () {\r\n            $(this.element).notification('clear');\r\n        };\r\n\r\n        /**\r\n         * Render step.\r\n         */\r\n        this.render = function () {\r\n            this.hideNotificationMessage();\r\n            this.getStep().render(this);\r\n        };\r\n\r\n        /**\r\n         * Initialize step.\r\n         */\r\n        this.init = function () {\r\n            this.updateLabels(this.getStep());\r\n            this.render();\r\n        };\r\n        this.init();\r\n    };\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            modalClass: '',\r\n            initData: [],\r\n            stepsNames: [],\r\n            selectedStep: '',\r\n            steps: [],\r\n            disabled: true\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            this.selectedStep.subscribe(this.wrapDisabledBackButton.bind(this));\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initElement: function (step) {\r\n            step.initData = this.initData;\r\n            step.mode = _.all(this.initData, _.isEmpty) ? 'create' : 'edit';\r\n            this.steps[this.getStepIndexByName(step.name)] = step;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super().observe([\r\n                'selectedStep',\r\n                'disabled'\r\n            ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        destroy: function () {\r\n            _.each(this.steps, function (step) {\r\n                step.destroy();\r\n            });\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Toggle disable property.\r\n         *\r\n         * @param {String} stepName\r\n         */\r\n        wrapDisabledBackButton: function (stepName) {\r\n            if (_.first(this.stepsNames) === stepName) {\r\n                this.disabled(true);\r\n            } else {\r\n                this.disabled(false);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get step by index name.\r\n         *\r\n         * @param {String} stepName\r\n         */\r\n        getStepIndexByName: function (stepName) {\r\n            return _.indexOf(this.stepsNames, stepName);\r\n        },\r\n        //controls, todo to another object\r\n        /**\r\n         * Select next step.\r\n         */\r\n        next: function () {\r\n            this.selectedStep(this.wizard.next());\r\n        },\r\n\r\n        /**\r\n         * Select previous step.\r\n         */\r\n        back: function () {\r\n            this.selectedStep(this.wizard.prev());\r\n        },\r\n\r\n        /**\r\n         * Open wizard.\r\n         */\r\n        open: function () {\r\n            this.selectedStep(this.stepsNames.first());\r\n            this.wizard = new Wizard(this.steps, this.modalClass);\r\n        },\r\n\r\n        /**\r\n         * Close wizard.\r\n         */\r\n        close: function () {\r\n            var modal =  uiRegistry.get(this.initData.configurableModal);\r\n\r\n            if (!_.isUndefined(modal)) {\r\n                modal.closeModal();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} data\r\n         * @param {Object} event\r\n         */\r\n        showSpecificStep: function (data, event) {\r\n            var index = _.indexOf(this.stepsNames, event.target.hash.substr(1)),\r\n                stepName = this.wizard.move(index);\r\n\r\n            this.selectedStep(stepName);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/core/class.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'mage/utils/wrapper'\r\n], function (_, utils, wrapper) {\r\n    'use strict';\r\n\r\n    var Class;\r\n\r\n    /**\r\n     * Returns property of an object if\r\n     * it's his own property.\r\n     *\r\n     * @param {Object} obj - Object whose property should be retrieved.\r\n     * @param {String} prop - Name of the property.\r\n     * @returns {*} Value of the property or false.\r\n     */\r\n    function getOwn(obj, prop) {\r\n        return _.isObject(obj) && obj.hasOwnProperty(prop) && obj[prop];\r\n    }\r\n\r\n    /**\r\n     * Creates constructor function which allows\r\n     * initialization without usage of a 'new' operator.\r\n     *\r\n     * @param {Object} protoProps - Prototypal properties of a new constructor.\r\n     * @param {Function} constructor\r\n     * @returns {Function} Created constructor.\r\n     */\r\n    function createConstructor(protoProps, constructor) {\r\n        var UiClass = constructor;\r\n\r\n        if (!UiClass) {\r\n\r\n            /**\r\n             * Default constructor function.\r\n             */\r\n            UiClass = function () {\r\n                var obj = this;\r\n\r\n                if (!_.isObject(obj) || Object.getPrototypeOf(obj) !== UiClass.prototype) {\r\n                    obj = Object.create(UiClass.prototype);\r\n                }\r\n\r\n                obj.initialize.apply(obj, arguments);\r\n\r\n                return obj;\r\n            };\r\n        }\r\n\r\n        UiClass.prototype = protoProps;\r\n        UiClass.prototype.constructor = UiClass;\r\n\r\n        return UiClass;\r\n    }\r\n\r\n    Class = createConstructor({\r\n\r\n        /**\r\n         * Entry point to the initialization of constructor's instance.\r\n         *\r\n         * @param {Object} [options={}]\r\n         * @returns {Class} Chainable.\r\n         */\r\n        initialize: function (options) {\r\n            this.initConfig(options);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Recursively extends data specified in constructors' 'defaults'\r\n         * property with provided options object. Evaluates resulting\r\n         * object using string templates (see: mage/utils/template.js).\r\n         *\r\n         * @param {Object} [options={}]\r\n         * @returns {Class} Chainable.\r\n         */\r\n        initConfig: function (options) {\r\n            var defaults    = this.constructor.defaults,\r\n                config      = utils.extend({}, defaults, options || {}),\r\n                ignored     = config.ignoreTmpls || {},\r\n                cached      = utils.omit(config, ignored);\r\n\r\n            config = utils.template(config, this, false, true);\r\n\r\n            _.each(cached, function (value, key) {\r\n                utils.nested(config, key, value);\r\n            });\r\n\r\n            return _.extend(this, config);\r\n        }\r\n    });\r\n\r\n    _.extend(Class, {\r\n        defaults: {\r\n            ignoreTmpls: {\r\n                templates: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates new constructor based on a current prototype properties,\r\n         * extending them with properties specified in 'exender' object.\r\n         *\r\n         * @param {Object} [extender={}]\r\n         * @returns {Function} New constructor.\r\n         */\r\n        extend: function (extender) {\r\n            var parent      = this,\r\n                parentProto = parent.prototype,\r\n                childProto  = Object.create(parentProto),\r\n                child       = createConstructor(childProto, getOwn(extender, 'constructor')),\r\n                defaults;\r\n\r\n            extender = extender || {};\r\n            defaults = extender.defaults;\r\n\r\n            delete extender.defaults;\r\n\r\n            _.each(extender, function (method, name) {\r\n                childProto[name] = wrapper.wrapSuper(parentProto[name], method);\r\n            });\r\n\r\n            child.defaults = utils.extend({}, parent.defaults || {});\r\n\r\n            if (defaults) {\r\n                utils.extend(child.defaults, defaults);\r\n                extender.defaults = defaults;\r\n            }\r\n\r\n            return _.extend(child, {\r\n                __super__:  parentProto,\r\n                extend:     parent.extend\r\n            });\r\n        }\r\n    });\r\n\r\n    return Class;\r\n});\r\n","Magento_Ui/js/lib/core/collection.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'uiElement'\r\n], function (_, utils, registry, Element) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Removes non plain object items from the specified array.\r\n     *\r\n     * @param {Array} container - Array whose value should be filtered.\r\n     * @returns {Array}\r\n     */\r\n    function compact(container) {\r\n        return _.values(container).filter(utils.isObject);\r\n    }\r\n\r\n    /**\r\n     * Defines index of an item in a specified container.\r\n     *\r\n     * @param {*} item - Item whose index should be defined.\r\n     * @param {Array} container - Container upon which to perform search.\r\n     * @returns {Number}\r\n     */\r\n    function _findIndex(item, container) {\r\n        var index = _.findKey(container, function (value) {\r\n            return value === item;\r\n        });\r\n\r\n        if (typeof index === 'undefined') {\r\n            index = _.findKey(container, function (value) {\r\n                return value && value.name === item;\r\n            });\r\n        }\r\n\r\n        return typeof index === 'undefined' ? -1 : index;\r\n    }\r\n\r\n    /**\r\n     * Inserts specified item into container at a specified position.\r\n     *\r\n     * @param {*} item - Item to be inserted into container.\r\n     * @param {Array} container - Container of items.\r\n     * @param {*} [position=-1] - Position at which item should be inserted.\r\n     *      Position can represent:\r\n     *          - specific index in container\r\n     *          - item which might already be present in container\r\n     *          - structure with one of these properties: after, before\r\n     * @returns {Boolean|*}\r\n     *      - true if element has changed its' position\r\n     *      - false if nothing has changed\r\n     *      - inserted value if it wasn't present in container\r\n     */\r\n    function _insertAt(item, container, position) {\r\n        var currentIndex = _findIndex(item, container),\r\n            newIndex,\r\n            target;\r\n\r\n        if (typeof position === 'undefined') {\r\n            position = -1;\r\n        } else if (typeof position === 'string') {\r\n            position = isNaN(+position) ? position : +position;\r\n        }\r\n\r\n        newIndex = position;\r\n\r\n        if (~currentIndex) {\r\n            target = container.splice(currentIndex, 1)[0];\r\n\r\n            if (typeof item === 'string') {\r\n                item = target;\r\n            }\r\n        }\r\n\r\n        if (typeof position !== 'number') {\r\n            target = position.after || position.before || position;\r\n\r\n            newIndex = _findIndex(target, container);\r\n\r\n            if (~newIndex && (position.after || newIndex >= currentIndex)) {\r\n                newIndex++;\r\n            }\r\n        }\r\n\r\n        if (newIndex < 0) {\r\n            newIndex += container.length + 1;\r\n        }\r\n\r\n        container[newIndex] ?\r\n            container.splice(newIndex, 0, item) :\r\n            container[newIndex] = item;\r\n\r\n        return !~currentIndex ? item : currentIndex !== newIndex;\r\n    }\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'ui/collection',\r\n            _elems: [],\r\n            ignoreTmpls: {\r\n                childDefaults: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Model} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe({\r\n                    elems: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called when another element was added to current component.\r\n         *\r\n         * @param {Object} elem - Instance of an element that was added.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        initElement: function (elem) {\r\n            elem.initContainer(this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns instance of a child found by provided index.\r\n         *\r\n         * @param {String} index - Index of a child.\r\n         * @returns {Object}\r\n         */\r\n        getChild: function (index) {\r\n            return _.findWhere(this.elems(), {\r\n                index: index\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Requests specified components to insert\r\n         * them into 'elems' array starting from provided position.\r\n         *\r\n         * @param {(String|Array)} elems - Name of the component to insert.\r\n         * @param {Number} [position=-1] - Position at which to insert elements.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        insertChild: function (elems, position) {\r\n            var container   = this._elems,\r\n                insert      = this._insert.bind(this),\r\n                update;\r\n\r\n            if (!Array.isArray(elems)) {\r\n                elems = [elems];\r\n            }\r\n\r\n            elems.map(function (item) {\r\n                return item.elem ?\r\n                    _insertAt(item.elem, container, item.position) :\r\n                    _insertAt(item, container, position);\r\n            }).forEach(function (item) {\r\n                if (item === true) {\r\n                    update = true;\r\n                } else if (_.isString(item)) {\r\n                    registry.get(item, insert);\r\n                } else if (utils.isObject(item)) {\r\n                    insert(item);\r\n                }\r\n            });\r\n\r\n            if (update) {\r\n                this._updateCollection();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified child from collection.\r\n         *\r\n         * @param {(Object|String)} elem - Child or index of a child to be removed.\r\n         * @param {Boolean} skipUpdate - skip collection update when element to be destroyed.\r\n         *\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        removeChild: function (elem, skipUpdate) {\r\n            if (_.isString(elem)) {\r\n                elem = this.getChild(elem);\r\n            }\r\n\r\n            if (elem) {\r\n                utils.remove(this._elems, elem);\r\n\r\n                if (!skipUpdate) {\r\n                    this._updateCollection();\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroys collection children with its' elements.\r\n         */\r\n        destroyChildren: function () {\r\n            this.elems.each(function (elem) {\r\n                elem.destroy(true);\r\n            });\r\n\r\n            this._updateCollection();\r\n        },\r\n\r\n        /**\r\n         * Clear data. Call method \"clear\"\r\n         * in child components\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        clear: function () {\r\n            var elems = this.elems();\r\n\r\n            _.each(elems, function (elem) {\r\n                if (_.isFunction(elem.clear)) {\r\n                    elem.clear();\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if specified child exists in collection.\r\n         *\r\n         * @param {String} index - Index of a child.\r\n         * @returns {Boolean}\r\n         */\r\n        hasChild: function (index) {\r\n            return !!this.getChild(index);\r\n        },\r\n\r\n        /**\r\n         * Creates 'async' wrapper for the specified child\r\n         * using uiRegistry 'async' method and caches it\r\n         * in a '_requested' components  object.\r\n         *\r\n         * @param {String} index - Index of a child.\r\n         * @returns {Function} Async module wrapper.\r\n         */\r\n        requestChild: function (index) {\r\n            var name = this.formChildName(index);\r\n\r\n            return this.requestModule(name);\r\n        },\r\n\r\n        /**\r\n         * Creates complete child name based on a provided index.\r\n         *\r\n         * @param {String} index - Index of a child.\r\n         * @returns {String}\r\n         */\r\n        formChildName: function (index) {\r\n            return this.name + '.' + index;\r\n        },\r\n\r\n        /**\r\n         * Retrieves requested region.\r\n         * Creates region if it was not created yet\r\n         *\r\n         * @returns {ObservableArray}\r\n         */\r\n        getRegion: function (name) {\r\n            var regions = this.regions = this.regions || {};\r\n\r\n            if (!regions[name]) {\r\n                regions[name] = [];\r\n\r\n                this.observe.call(regions, name);\r\n            }\r\n\r\n            return regions[name];\r\n        },\r\n\r\n        /**\r\n         * Checks if the specified region has any elements\r\n         * associated with it.\r\n         *\r\n         * @param {String} name\r\n         * @returns {Boolean}\r\n         */\r\n        regionHasElements: function (name) {\r\n            var region = this.getRegion(name);\r\n\r\n            return region().length > 0;\r\n        },\r\n\r\n        /**\r\n         * Replaces specified regions' data with a provided one.\r\n         * Creates region if it was not created yet.\r\n         *\r\n         * @param {Array} items - New regions' data.\r\n         * @param {String} name - Name of the region.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        updateRegion: function (items, name) {\r\n            this.getRegion(name)(items);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroys collection along with its' elements.\r\n         */\r\n        destroy: function () {\r\n            this._super();\r\n\r\n            this.elems.each('destroy');\r\n        },\r\n\r\n        /**\r\n         * Inserts provided component into 'elems' array at a specified position.\r\n         * @private\r\n         *\r\n         * @param {Object} elem - Element to insert.\r\n         */\r\n        _insert: function (elem) {\r\n            var index = _.findKey(this._elems, function (value) {\r\n                return value === elem.name;\r\n            });\r\n\r\n            if (typeof index !== 'undefined') {\r\n                this._elems[index] = elem;\r\n            }\r\n\r\n            this._updateCollection()\r\n                .initElement(elem);\r\n        },\r\n\r\n        /**\r\n         * Synchronizes multiple elements arrays with a core '_elems' container.\r\n         * Performs elemets grouping by theirs 'displayArea' property.\r\n         * @private\r\n         *\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        _updateCollection: function () {\r\n            var _elems = compact(this._elems),\r\n                grouped;\r\n\r\n            grouped = _elems.filter(function (elem) {\r\n                return elem.displayArea && _.isString(elem.displayArea);\r\n            });\r\n            grouped = _.groupBy(grouped, 'displayArea');\r\n\r\n            _.each(grouped, this.updateRegion, this);\r\n\r\n            _.each(this.regions, function (items) {\r\n                var hasObsoleteComponents = items().length && !_.intersection(_elems, items()).length;\r\n\r\n                if (hasObsoleteComponents) {\r\n                    items.removeAll();\r\n                }\r\n            });\r\n\r\n            this.elems(_elems);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Tries to call specified method of a current component,\r\n         * otherwise delegates attempt to its' children.\r\n         *\r\n         * @param {String} target - Name of the method.\r\n         * @param {...*} parameters - Arguments that will be passed to method.\r\n         * @returns {*} Result of the method calls.\r\n         */\r\n        delegate: function (target) {\r\n            var args = _.toArray(arguments);\r\n\r\n            target = this[target];\r\n\r\n            if (_.isFunction(target)) {\r\n                return target.apply(this, args.slice(1));\r\n            }\r\n\r\n            return this._delegate(args);\r\n        },\r\n\r\n        /**\r\n         * Calls 'delegate' method of all of it's children components.\r\n         * @private\r\n         *\r\n         * @param {Array} args - An array of arguments to pass to the next delegation call.\r\n         * @returns {Array} An array of delegation results.\r\n         */\r\n        _delegate: function (args) {\r\n            var result;\r\n\r\n            result = this.elems.map(function (elem) {\r\n                var target;\r\n\r\n                if (!_.isFunction(elem.delegate)) {\r\n                    target = elem[args[0]];\r\n\r\n                    if (_.isFunction(target)) {\r\n                        return target.apply(elem, args.slice(1));\r\n                    }\r\n                } else {\r\n                    return elem.delegate.apply(elem, args);\r\n                }\r\n            });\r\n\r\n            return _.flatten(result);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/core/events.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore'\r\n], function (ko, _) {\r\n    'use strict';\r\n\r\n    var eventsMap = new WeakMap();\r\n\r\n    /**\r\n     * Returns events map or a specific event\r\n     * data associated with a provided object.\r\n     *\r\n     * @param {Object} obj - Key in the events weakmap.\r\n     * @param {String} [name] - Name of the event.\r\n     * @returns {Map|Array|Boolean}\r\n     */\r\n    function getEvents(obj, name) {\r\n        var events = eventsMap.get(obj);\r\n\r\n        if (!events) {\r\n            return false;\r\n        }\r\n\r\n        return name ? events.get(name) : events;\r\n    }\r\n\r\n    /**\r\n     * Adds new event handler.\r\n     *\r\n     * @param {Object} obj - Key in the events weakmap.\r\n     * @param {String} ns - Callback namespace.\r\n     * @param {Function} callback - Event callback.\r\n     * @param {String} name - Name of the event.\r\n     */\r\n    function addHandler(obj, ns, callback, name) {\r\n        var events      = getEvents(obj),\r\n            observable,\r\n            data;\r\n\r\n        observable = !ko.isObservable(obj[name]) ?\r\n            ko.getObservable(obj, name) :\r\n            obj[name];\r\n\r\n        if (observable) {\r\n            observable.subscribe(callback);\r\n\r\n            return;\r\n        }\r\n\r\n        if (!events) {\r\n            events = new Map();\r\n\r\n            eventsMap.set(obj, events);\r\n        }\r\n\r\n        data = {\r\n            callback: callback,\r\n            ns: ns\r\n        };\r\n\r\n        events.has(name) ?\r\n            events.get(name).push(data) :\r\n            events.set(name, [data]);\r\n    }\r\n\r\n    /**\r\n     * Invokes provided callbacks with a specified arguments.\r\n     *\r\n     * @param {Array} handlers\r\n     * @param {Array} args\r\n     * @returns {Boolean}\r\n     */\r\n    function trigger(handlers, args) {\r\n        var bubble = true,\r\n            callback;\r\n\r\n        handlers.forEach(function (handler) {\r\n            callback = handler.callback;\r\n\r\n            if (callback.apply(null, args) === false) {\r\n                bubble = false;\r\n            }\r\n        });\r\n\r\n        return bubble;\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Calls callback when name event is triggered.\r\n         * @param  {String}   events\r\n         * @param  {Function} callback\r\n         * @param  {Function} ns\r\n         * @return {Object} reference to this\r\n         */\r\n        on: function (events, callback, ns) {\r\n            var iterator;\r\n\r\n            if (arguments.length < 2) {\r\n                ns = callback;\r\n            }\r\n\r\n            iterator = addHandler.bind(null, this, ns);\r\n\r\n            _.isObject(events) ?\r\n                _.each(events, iterator) :\r\n                iterator(callback, events);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removed callback from listening to target event\r\n         * @param  {String} ns\r\n         * @return {Object} reference to this\r\n         */\r\n        off: function (ns) {\r\n            var storage = getEvents(this);\r\n\r\n            if (!storage) {\r\n                return this;\r\n            }\r\n\r\n            storage.forEach(function (handlers, name) {\r\n                handlers = handlers.filter(function (handler) {\r\n                    return !ns ? false : handler.ns !== ns;\r\n                });\r\n\r\n                handlers.length ?\r\n                    storage.set(name, handlers) :\r\n                    storage.delete(name);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggers event and executes all attached callbacks.\r\n         *\r\n         * @param {String} name - Name of the event to be triggered.\r\n         * @returns {Boolean}\r\n         */\r\n        trigger: function (name) {\r\n            var handlers,\r\n                args;\r\n\r\n            handlers = getEvents(this, name),\r\n            args = _.toArray(arguments).slice(1);\r\n\r\n            if (!handlers || !name) {\r\n                return true;\r\n            }\r\n\r\n            return trigger(handlers, args);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/core/element/element.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'uiEvents',\r\n    'uiClass',\r\n    './links',\r\n    '../storage/local'\r\n], function (ko, _, utils, registry, Events, Class, links) {\r\n    'use strict';\r\n\r\n    var Element;\r\n\r\n    /**\r\n     * Creates observable property using knockouts'\r\n     * 'observableArray' or 'observable' methods,\r\n     * depending on a type of 'value' parameter.\r\n     *\r\n     * @param {Object} obj - Object to whom property belongs.\r\n     * @param {String} key - Key of the property.\r\n     * @param {*} value - Initial value.\r\n     */\r\n    function observable(obj, key, value) {\r\n        var method = Array.isArray(value) ? 'observableArray' : 'observable';\r\n\r\n        if (_.isFunction(obj[key]) && !ko.isObservable(obj[key])) {\r\n            return;\r\n        }\r\n\r\n        if (ko.isObservable(value)) {\r\n            value = value();\r\n        }\r\n\r\n        ko.isObservable(obj[key]) ?\r\n            obj[key](value) :\r\n            obj[key] = ko[method](value);\r\n    }\r\n\r\n    /**\r\n     * Creates observable property using 'track' method.\r\n     *\r\n     * @param {Object} obj - Object to whom property belongs.\r\n     * @param {String} key - Key of the property.\r\n     * @param {*} value - Initial value.\r\n     */\r\n    function accessor(obj, key, value) {\r\n        if (_.isFunction(obj[key]) || ko.isObservable(obj[key])) {\r\n            return;\r\n        }\r\n\r\n        obj[key] = value;\r\n\r\n        if (!ko.es5.isTracked(obj, key)) {\r\n            ko.track(obj, [key]);\r\n        }\r\n    }\r\n\r\n    Element = _.extend({\r\n        defaults: {\r\n            _requested: {},\r\n            containers: [],\r\n            exports: {},\r\n            imports: {},\r\n            links: {},\r\n            listens: {},\r\n            name: '',\r\n            ns: '${ $.name.split(\".\")[0] }',\r\n            provider: '',\r\n            registerNodes: true,\r\n            source: null,\r\n            statefull: {},\r\n            template: '',\r\n            tracks: {},\r\n            storageConfig: {\r\n                provider: 'localStorage',\r\n                namespace: '${ $.name }',\r\n                path: '${ $.storageConfig.provider }:${ $.storageConfig.namespace }'\r\n            },\r\n            maps: {\r\n                imports: {},\r\n                exports: {}\r\n            },\r\n            modules: {\r\n                storage: '${ $.storageConfig.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes model instance.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initObservable()\r\n                .initModules()\r\n                .initStatefull()\r\n                .initLinks()\r\n                .initUnique();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            _.each(this.tracks, function (enabled, key) {\r\n                if (enabled) {\r\n                    this.track(key);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Parses 'modules' object and creates\r\n         * async wrappers for specified components.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initModules: function () {\r\n            _.each(this.modules, function (name, property) {\r\n                if (name) {\r\n                    this[property] = this.requestModule(name);\r\n                }\r\n            }, this);\r\n\r\n            if (!_.isFunction(this.source)) {\r\n                this.source = registry.get(this.provider);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Called when current element was injected to another component.\r\n         *\r\n         * @param {Object} parent - Instance of a 'parent' component.\r\n         * @returns {Collection} Chainable.\r\n         */\r\n        initContainer: function (parent) {\r\n            this.containers.push(parent);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes statefull properties\r\n         * based on the keys of 'statefull' object.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initStatefull: function () {\r\n            _.each(this.statefull, function (path, key) {\r\n                if (path) {\r\n                    this.setStatefull(key, path);\r\n                }\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes links between properties.\r\n         *\r\n         * @returns {Element} Chainbale.\r\n         */\r\n        initLinks: function () {\r\n            return this.setListeners(this.listens)\r\n                       .setLinks(this.links, 'imports')\r\n                       .setLinks(this.links, 'exports')\r\n                       .setLinks(this.exports, 'exports')\r\n                       .setLinks(this.imports, 'imports');\r\n        },\r\n\r\n        /**\r\n         * Initializes listeners of the unique property.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initUnique: function () {\r\n            var update = this.onUniqueUpdate.bind(this),\r\n                uniqueNs = this.uniqueNs;\r\n\r\n            this.hasUnique = this.uniqueProp && uniqueNs;\r\n\r\n            if (this.hasUnique) {\r\n                this.source.on(uniqueNs, update, this.name);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Makes specified property to be stored automatically.\r\n         *\r\n         * @param {String} key - Name of the property\r\n         *      that will be stored.\r\n         * @param {String} [path=key] - Path to the property in storage.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        setStatefull: function (key, path) {\r\n            var link = {};\r\n\r\n            path        = !_.isString(path) || !path ? key : path;\r\n            link[key]   = this.storageConfig.path + '.' + path;\r\n\r\n            this.setLinks(link, 'imports')\r\n                .setLinks(link, 'exports');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates property specified in uniqueNs\r\n         * if elements' unique property is set to 'true'.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        setUnique: function () {\r\n            var property = this.uniqueProp;\r\n\r\n            if (this[property]()) {\r\n                this.source.set(this.uniqueNs, this.name);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates 'async' wrapper for the specified component\r\n         * using uiRegistry 'async' method and caches it\r\n         * in a '_requested' components  object.\r\n         *\r\n         * @param {String} name - Name of requested component.\r\n         * @returns {Function} Async module wrapper.\r\n         */\r\n        requestModule: function (name) {\r\n            var requested = this._requested;\r\n\r\n            if (!requested[name]) {\r\n                requested[name] = registry.async(name);\r\n            }\r\n\r\n            return requested[name];\r\n        },\r\n\r\n        /**\r\n         * Returns path to elements' template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getTemplate: function () {\r\n            return this.template;\r\n        },\r\n\r\n        /**\r\n         * Checks if template was specified for an element.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasTemplate: function () {\r\n            return !!this.template;\r\n        },\r\n\r\n        /**\r\n         * Returns value of the nested property.\r\n         *\r\n         * @param {String} path - Path to the property.\r\n         * @returns {*} Value of the property.\r\n         */\r\n        get: function (path) {\r\n            return utils.nested(this, path);\r\n        },\r\n\r\n        /**\r\n         * Sets provided value as a value of the specified nested property.\r\n         * Triggers changes notifications, if value has mutated.\r\n         *\r\n         * @param {String} path - Path to property.\r\n         * @param {*} value - New value of the property.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        set: function (path, value) {\r\n            var data = this.get(path),\r\n                diffs;\r\n\r\n            diffs = !_.isFunction(data) && !this.isTracked(path) ?\r\n                utils.compare(data, value, path) :\r\n                false;\r\n\r\n            utils.nested(this, path, value);\r\n\r\n            if (diffs) {\r\n                this._notifyChanges(diffs);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes nested property from the object.\r\n         *\r\n         * @param {String} path - Path to the property.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        remove: function (path) {\r\n            var data = utils.nested(this, path),\r\n                diffs;\r\n\r\n            if (_.isUndefined(data) || _.isFunction(data)) {\r\n                return this;\r\n            }\r\n\r\n            diffs = utils.compare(data, undefined, path);\r\n\r\n            utils.nestedRemove(this, path);\r\n\r\n            this._notifyChanges(diffs);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Creates observable properties for the current object.\r\n         *\r\n         * If 'useTrack' flag is set to 'true' then each property will be\r\n         * created with a ES5 get/set accessor descriptors, instead of\r\n         * making them an observable functions.\r\n         * See 'knockout-es5' library for more information.\r\n         *\r\n         * @param {Boolean} [useAccessors=false] - Whether to create an\r\n         *      observable function or to use property accesessors.\r\n         * @param {(Object|String|Array)} properties - List of observable properties.\r\n         * @returns {Element} Chainable.\r\n         *\r\n         * @example Sample declaration and equivalent knockout methods.\r\n         *      this.key = 'value';\r\n         *      this.array = ['value'];\r\n         *\r\n         *      this.observe(['key', 'array']);\r\n         *      =>\r\n         *          this.key = ko.observable('value');\r\n         *          this.array = ko.observableArray(['value']);\r\n         *\r\n         * @example Another syntaxes of the previous example.\r\n         *      this.observe({\r\n         *          key: 'value',\r\n         *          array: ['value']\r\n         *      });\r\n         */\r\n        observe: function (useAccessors, properties) {\r\n            var model = this,\r\n                trackMethod;\r\n\r\n            if (typeof useAccessors !== 'boolean') {\r\n                properties   = useAccessors;\r\n                useAccessors = false;\r\n            }\r\n\r\n            trackMethod = useAccessors ? accessor : observable;\r\n\r\n            if (_.isString(properties)) {\r\n                properties = properties.split(' ');\r\n            }\r\n\r\n            if (Array.isArray(properties)) {\r\n                properties.forEach(function (key) {\r\n                    trackMethod(model, key, model[key]);\r\n                });\r\n            } else if (typeof properties === 'object') {\r\n                _.each(properties, function (value, key) {\r\n                    trackMethod(model, key, value);\r\n                });\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Delegates call to 'observe' method but\r\n         * with a predefined 'useAccessors' flag.\r\n         *\r\n         * @param {(String|Array|Object)} properties - List of observable properties.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        track: function (properties) {\r\n            this.observe(true, properties);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if specified property is tracked.\r\n         *\r\n         * @param {String} property - Property to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isTracked: function (property) {\r\n            return ko.es5.isTracked(this, property);\r\n        },\r\n\r\n        /**\r\n         * Invokes subscribers for the provided changes.\r\n         *\r\n         * @param {Object} diffs - Object with changes descriptions.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        _notifyChanges: function (diffs) {\r\n            diffs.changes.forEach(function (change) {\r\n                this.trigger(change.path, change.value, change);\r\n            }, this);\r\n\r\n            _.each(diffs.containers, function (changes, name) {\r\n                var value = utils.nested(this, name);\r\n\r\n                this.trigger(name, value, changes);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extracts all stored data and sets it to element.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        restore: function () {\r\n            var ns = this.storageConfig.namespace,\r\n                storage = this.storage();\r\n\r\n            if (storage) {\r\n                utils.extend(this, storage.get(ns));\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Stores value of the specified property in components' storage module.\r\n         *\r\n         * @param {String} property\r\n         * @param {*} [data=this[property]]\r\n         * @returns {Element} Chainable.\r\n         */\r\n        store: function (property, data) {\r\n            var ns = this.storageConfig.namespace,\r\n                path = utils.fullPath(ns, property);\r\n\r\n            if (arguments.length < 2) {\r\n                data = this.get(property);\r\n            }\r\n\r\n            this.storage('set', path, data);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Extracts specified property from storage.\r\n         *\r\n         * @param {String} [property] - Name of the property\r\n         *      to be extracted. If not specified then all of the\r\n         *      stored will be returned.\r\n         * @returns {*}\r\n         */\r\n        getStored: function (property) {\r\n            var ns = this.storageConfig.namespace,\r\n                path = utils.fullPath(ns, property),\r\n                storage = this.storage(),\r\n                data;\r\n\r\n            if (storage) {\r\n                data = storage.get(path);\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Removes stored property.\r\n         *\r\n         * @param {String} property - Property to be removed from storage.\r\n         * @returns {Element} Chainable.\r\n         */\r\n        removeStored: function (property) {\r\n            var ns = this.storageConfig.namespace,\r\n                path = utils.fullPath(ns, property);\r\n\r\n            this.storage('remove', path);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Destroys current instance along with all of its' children.\r\n         * @param {Boolean} skipUpdate - skip collection update when element to be destroyed.\r\n         */\r\n        destroy: function (skipUpdate) {\r\n            this._dropHandlers()\r\n                ._clearRefs(skipUpdate);\r\n        },\r\n\r\n        /**\r\n         * Removes events listeners.\r\n         * @private\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        _dropHandlers: function () {\r\n            this.off();\r\n\r\n            if (_.isFunction(this.source)) {\r\n                this.source().off(this.name);\r\n            } else if (this.source) {\r\n                this.source.off(this.name);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes all references to current instance and\r\n         * calls 'destroy' method on all of its' children.\r\n         * @private\r\n         * @param {Boolean} skipUpdate - skip collection update when element to be destroyed.\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        _clearRefs: function (skipUpdate) {\r\n            registry.remove(this.name);\r\n\r\n            this.containers.forEach(function (parent) {\r\n                parent.removeChild(this, skipUpdate);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Overrides 'EventsBus.trigger' method to implement events bubbling.\r\n         *\r\n         * @param {...*} arguments - Any number of arguments that should be passed to the events' handler.\r\n         * @returns {Boolean} False if event bubbling was canceled.\r\n         */\r\n        bubble: function () {\r\n            var args = _.toArray(arguments),\r\n                bubble = this.trigger.apply(this, args),\r\n                result;\r\n\r\n            if (!bubble) {\r\n                return false;\r\n            }\r\n\r\n            this.containers.forEach(function (parent) {\r\n                result = parent.bubble.apply(parent, args);\r\n\r\n                if (result === false) {\r\n                    bubble = false;\r\n                }\r\n            });\r\n\r\n            return !!bubble;\r\n        },\r\n\r\n        /**\r\n         * Callback which fires when property under uniqueNs has changed.\r\n         */\r\n        onUniqueUpdate: function (name) {\r\n            var active = name === this.name,\r\n                property = this.uniqueProp;\r\n\r\n            this[property](active);\r\n        },\r\n\r\n        /**\r\n         * Clean data form data source.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        cleanData: function () {\r\n            if (this.source && this.source.componentType === 'dataSource') {\r\n                if (this.elems) {\r\n                    _.each(this.elems(), function (val) {\r\n                        val.cleanData();\r\n                    });\r\n                } else {\r\n                    this.source.remove(this.dataScope);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Fallback data.\r\n         */\r\n        cacheData: function () {\r\n            this.cachedComponent = utils.copy(this);\r\n        },\r\n\r\n        /**\r\n         * Update configuration in component.\r\n         *\r\n         * @param {*} oldValue\r\n         * @param {*} newValue\r\n         * @param {String} path - path to value.\r\n         * @returns {Element}\r\n         */\r\n        updateConfig: function (oldValue, newValue, path) {\r\n            var names = path.split('.'),\r\n                index = _.lastIndexOf(names, 'config') + 1;\r\n\r\n            names = names.splice(index, names.length - index).join('.');\r\n            this.set(names, newValue);\r\n\r\n            return this;\r\n        }\r\n    }, Events, links);\r\n\r\n    return Class.extend(Element);\r\n});\r\n","Magento_Ui/js/lib/core/element/links.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry'\r\n], function (ko, _, utils, registry) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Parse provided data.\r\n     *\r\n     * @param {String} placeholder\r\n     * @param {String} data\r\n     * @param {String} direction\r\n     * @returns {Boolean|Object}\r\n     */\r\n    function parseData(placeholder, data, direction) {\r\n        if (typeof data !== 'string') {\r\n            return false;\r\n        }\r\n\r\n        data = data.split(':');\r\n\r\n        if (!data[0]) {\r\n            return false;\r\n        }\r\n\r\n        if (!data[1]) {\r\n            data[1] = data[0];\r\n            data[0] = placeholder;\r\n        }\r\n\r\n        return {\r\n            target: data[0],\r\n            property: data[1],\r\n            direction: direction\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Check if value not empty.\r\n     *\r\n     * @param {*} value\r\n     * @returns {Boolean}\r\n     */\r\n    function notEmpty(value) {\r\n        return typeof value !== 'undefined' && value != null;\r\n    }\r\n\r\n    /**\r\n     * Update value for linked component.\r\n     *\r\n     * @param {Object} data\r\n     * @param {Object} owner\r\n     * @param {Object} target\r\n     * @param {*} value\r\n     */\r\n    function updateValue(data, owner, target, value) {\r\n        var component = target.component,\r\n            property = target.property,\r\n            linked = data.linked;\r\n\r\n        if (data.mute) {\r\n            return;\r\n        }\r\n\r\n        if (linked) {\r\n            linked.mute = true;\r\n        }\r\n\r\n        if (owner.component !== target.component) {\r\n            value = data.inversionValue ? !utils.copy(value) : utils.copy(value);\r\n        }\r\n\r\n        component.set(property, value, owner);\r\n\r\n        if (property === 'disabled' && value) {\r\n            component.set('validate', value, owner);\r\n        }\r\n\r\n        if (linked) {\r\n            linked.mute = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get value form owner component property.\r\n     *\r\n     * @param {Object} owner\r\n     * @returns {*}\r\n     */\r\n    function getValue(owner) {\r\n        var component = owner.component,\r\n            property = owner.property;\r\n\r\n        return component.get(property);\r\n    }\r\n\r\n    /**\r\n     * Format provided params to object.\r\n     *\r\n     * @param {String} ownerComponent\r\n     * @param {String} targetComponent\r\n     * @param {String} ownerProp\r\n     * @param {String} targetProp\r\n     * @param {String} direction\r\n     * @returns {Object}\r\n     */\r\n    function form(ownerComponent, targetComponent, ownerProp, targetProp, direction) {\r\n        var result,\r\n            tmp;\r\n\r\n        result = {\r\n            owner: {\r\n                component: ownerComponent,\r\n                property: ownerProp\r\n            },\r\n            target: {\r\n                component: targetComponent,\r\n                property: targetProp\r\n            }\r\n        };\r\n\r\n        if (direction === 'exports') {\r\n            tmp = result.owner;\r\n            result.owner = result.target;\r\n            result.target = tmp;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Set data to linked property.\r\n     *\r\n     * @param {Object} map\r\n     * @param {Object} data\r\n     */\r\n    function setLinked(map, data) {\r\n        var match;\r\n\r\n        if (!map) {\r\n            return;\r\n        }\r\n\r\n        match = _.findWhere(map, {\r\n            linked: false,\r\n            target: data.target,\r\n            property: data.property\r\n        });\r\n\r\n        if (match) {\r\n            match.linked = data;\r\n            data.linked = match;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set data by direction.\r\n     *\r\n     * @param {Object} maps\r\n     * @param {String} property\r\n     * @param {Object} data\r\n     */\r\n    function setData(maps, property, data) {\r\n        var direction   = data.direction,\r\n            map         = maps[direction];\r\n\r\n        data.linked = false;\r\n\r\n        (map[property] = map[property] || []).push(data);\r\n\r\n        direction = direction === 'imports' ? 'exports' : 'imports';\r\n\r\n        setLinked(maps[direction][property], data);\r\n    }\r\n\r\n    /**\r\n     * Set links for components.\r\n     *\r\n     * @param {String} target\r\n     * @param {String} owner\r\n     * @param {Object} data\r\n     * @param {String} property\r\n     * @param {Boolean} immediate\r\n     */\r\n    function setLink(target, owner, data, property, immediate) {\r\n        var direction = data.direction,\r\n            formated = form(target, owner, data.property, property, direction),\r\n            callback,\r\n            value;\r\n\r\n        owner = formated.owner;\r\n        target = formated.target;\r\n\r\n        callback = updateValue.bind(null, data, owner, target);\r\n\r\n        owner.component.on(owner.property, callback, target.component.name);\r\n\r\n        if (immediate) {\r\n            value = getValue(owner);\r\n\r\n            if (notEmpty(value)) {\r\n                updateValue(data, owner, target, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transfer data between components.\r\n     *\r\n     * @param {Object} owner\r\n     * @param {Object} data\r\n     */\r\n    function transfer(owner, data) {\r\n        var args = _.toArray(arguments);\r\n\r\n        if (data.target.substr(0, 1) === '!') {\r\n            data.target = data.target.substr(1);\r\n            data.inversionValue = true;\r\n        }\r\n\r\n        if (owner.name === data.target) {\r\n            args.unshift(owner);\r\n\r\n            setLink.apply(null, args);\r\n        } else {\r\n            registry.get(data.target, function (target) {\r\n                args.unshift(target);\r\n\r\n                setLink.apply(null, args);\r\n            });\r\n        }\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Assign listeners.\r\n         *\r\n         * @param {Object} listeners\r\n         * @returns {Object} Chainable\r\n         */\r\n        setListeners: function (listeners) {\r\n            var owner = this,\r\n                data;\r\n\r\n            _.each(listeners, function (callbacks, sources) {\r\n                sources = sources.split(' ');\r\n                callbacks = callbacks.split(' ');\r\n\r\n                sources.forEach(function (target) {\r\n                    callbacks.forEach(function (callback) {//eslint-disable-line max-nested-callbacks\r\n                        data = parseData(owner.name, target, 'imports');\r\n\r\n                        if (data) {\r\n                            setData(owner.maps, callback, data);\r\n                            transfer(owner, data, callback);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set links in provided direction.\r\n         *\r\n         * @param {Object} links\r\n         * @param {String} direction\r\n         * @returns {Object} Chainable\r\n         */\r\n        setLinks: function (links, direction) {\r\n            var owner = this,\r\n                property,\r\n                data;\r\n\r\n            for (property in links) {\r\n                if (links.hasOwnProperty(property)) {\r\n                    data = parseData(owner.name, links[property], direction);\r\n\r\n                    if (data) {//eslint-disable-line max-depth\r\n                        setData(owner.maps, property, data);\r\n                        transfer(owner, data, property, true);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/core/storage/local.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'uiEvents'\r\n], function (_, registry, utils, EventsBus) {\r\n    'use strict';\r\n\r\n    var root = 'appData',\r\n        localStorage,\r\n        hasSupport,\r\n        storage;\r\n\r\n    /**\r\n     * Flag which indicates whether localStorage is supported.\r\n     */\r\n    hasSupport = (function () {\r\n        var key = '_storageSupported';\r\n\r\n        try {\r\n            localStorage = window.localStorage;\r\n            localStorage.setItem(key, 'true');\r\n\r\n            if (localStorage.getItem(key) === 'true') {\r\n                localStorage.removeItem(key);\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    })();\r\n\r\n    if (!hasSupport) {\r\n        localStorage = {\r\n            _data: {},\r\n\r\n            /**\r\n             * Sets value of the specified item.\r\n             *\r\n             * @param {String} key - Key of the property.\r\n             * @param {*} value - Properties' value.\r\n             */\r\n            setItem: function (key, value) {\r\n                this._data[key] = value + '';\r\n            },\r\n\r\n            /**\r\n             * Retrieves specified item.\r\n             *\r\n             * @param {String} key - Key of the property to be retrieved.\r\n             */\r\n            getItem: function (key) {\r\n                return this._data[key];\r\n            },\r\n\r\n            /**\r\n             * Removes specified item.\r\n             *\r\n             * @param {String} key - Key of the property to be removed.\r\n             */\r\n            removeItem: function (key) {\r\n                delete this._data[key];\r\n            },\r\n\r\n            /**\r\n             * Removes all items.\r\n             */\r\n            clear: function () {\r\n                this._data = {};\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Extracts and parses data stored in localStorage by the\r\n     * key specified in 'root' variable.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    function getRoot() {\r\n        var data = localStorage.getItem(root),\r\n            result = {};\r\n\r\n        if (!_.isNull(data) && typeof data != 'undefined') {\r\n            result = JSON.parse(data);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Writes provided data to the localStorage.\r\n     *\r\n     * @param {*} data - Data to be stored.\r\n     */\r\n    function setRoot(data) {\r\n        localStorage.setItem(root, JSON.stringify(data));\r\n    }\r\n\r\n    /**\r\n     * Provides methods to work with a localStorage\r\n     * as a single nested structure.\r\n     */\r\n    storage = _.extend({\r\n\r\n        /**\r\n         * Retrieves value of the specified property.\r\n         *\r\n         * @param {String} path - Path to the property.\r\n         *\r\n         * @example Retrieving data.\r\n         *      localStorage =>\r\n         *          'appData' => '\r\n         *              \"one\": {\"two\": \"three\"}\r\n         *          '\r\n         *      storage.get('one.two')\r\n         *      => \"three\"\r\n         *\r\n         *      storage.get('one')\r\n         *      => {\"two\": \"three\"}\r\n         */\r\n        get: function (path) {\r\n            var data = getRoot();\r\n\r\n            return utils.nested(data, path);\r\n        },\r\n\r\n        /**\r\n         * Sets specified data to the localStorage.\r\n         *\r\n         * @param {String} path - Path of the property.\r\n         * @param {*} value - Value of the property.\r\n         *\r\n         * @example Setting data.\r\n         *      storage.set('one.two', 'four');\r\n         *      => localStorage =>\r\n         *          'appData' => '\r\n         *              \"one\": {\"two\": \"four\"}\r\n         *          '\r\n         */\r\n        set: function (path, value) {\r\n            var data = getRoot();\r\n\r\n            utils.nested(data, path, value);\r\n\r\n            setRoot(data);\r\n        },\r\n\r\n        /**\r\n         * Removes specified data from the localStorage.\r\n         *\r\n         * @param {String} path - Path to the property that should be removed.\r\n         *\r\n         * @example Removing data.\r\n         *      storage.remove('one.two', 'four');\r\n         *      => localStorage =>\r\n         *          'appData' => '\r\n         *              \"one\": {}\r\n         *          '\r\n         */\r\n        remove: function (path) {\r\n            var data = getRoot();\r\n\r\n            utils.nestedRemove(data, path);\r\n\r\n            setRoot(data);\r\n        }\r\n    }, EventsBus);\r\n\r\n    registry.set('localStorage', storage);\r\n\r\n    return storage;\r\n});\r\n","Magento_Ui/js/lib/knockout/bootstrap.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/** Loads all available knockout bindings, sets custom template engine, initializes knockout on page */\r\n\r\ndefine([\r\n    'ko',\r\n    './template/engine',\r\n    'knockoutjs/knockout-es5',\r\n    './bindings/bootstrap',\r\n    './extender/observable_array',\r\n    './extender/bound-nodes',\r\n    'domReady!'\r\n], function (ko, templateEngine) {\r\n    'use strict';\r\n\r\n    ko.uid = 0;\r\n\r\n    ko.setTemplateEngine(templateEngine);\r\n    ko.applyBindings();\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/after-render.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    '../template/renderer'\r\n], function (ko, renderer) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.afterRender = {\r\n\r\n        /**\r\n         * Binding init callback.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel) {\r\n            var callback = valueAccessor();\r\n\r\n            if (typeof callback === 'function') {\r\n                callback.call(viewModel, element, viewModel);\r\n            }\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('afterRender');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/autoselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    '../template/renderer'\r\n], function (ko, $, renderer) {\r\n    'use strict';\r\n\r\n    /**\r\n     * 'Focus' event handler.\r\n     *\r\n     * @param {EventObject} e\r\n     */\r\n    function onFocus(e) {\r\n        e.target.select();\r\n    }\r\n\r\n    ko.bindingHandlers.autoselect = {\r\n\r\n        /**\r\n         * Adds event handler which automatically\r\n         * selects inputs' element text when field gets focused.\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var enabled = ko.unwrap(valueAccessor());\r\n\r\n            if (enabled !== false) {\r\n                $(element).on('focus', onFocus);\r\n            }\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('autoselect');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/bind-html.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mage/apply/main',\r\n    '../template/renderer'\r\n], function (ko, _, mage, renderer) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Set html to node element.\r\n     *\r\n     * @param {HTMLElement} el - Element to apply bindings to.\r\n     * @param {Function} html - Observable html content.\r\n     */\r\n    function setHtml(el, html) {\r\n        ko.utils.emptyDomNode(el);\r\n        html = ko.utils.unwrapObservable(html);\r\n\r\n        if (!_.isNull(html) && !_.isUndefined(html)) {\r\n            if (!_.isString(html)) {\r\n                html = html.toString();\r\n            }\r\n\r\n            el.innerHTML = html;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply bindings and call magento attributes parser.\r\n     *\r\n     * @param {HTMLElement} el - Element to apply bindings to.\r\n     * @param {ko.bindingContext} ctx - Instance of ko.bindingContext, passed to binding initially.\r\n     */\r\n    function applyComponents(el, ctx) {\r\n        ko.utils.arrayForEach(el.childNodes, ko.cleanNode);\r\n        ko.applyBindingsToDescendants(ctx, el);\r\n        mage.apply();\r\n    }\r\n\r\n    ko.bindingHandlers.bindHtml = {\r\n        /**\r\n         * Scope binding's init method.\r\n         *\r\n         * @returns {Object} - Knockout declaration for it to let binding control descendants.\r\n         */\r\n        init: function () {\r\n            return {\r\n                controlsDescendantBindings: true\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Reads params passed to binding.\r\n         * Set html to node element, apply bindings and call magento attributes parser.\r\n         *\r\n         * @param {HTMLElement} el - Element to apply bindings to.\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding.\r\n         * @param {Object} allBindings - Object, which represents all bindings applied to element.\r\n         * @param {Object} viewModel - Object, which represents view model binded to el.\r\n         * @param {ko.bindingContext} bindingContext - Instance of ko.bindingContext, passed to binding initially.\r\n         */\r\n        update: function (el, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            setHtml(el, valueAccessor());\r\n            applyComponents(el, bindingContext);\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('bindHtml');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/bootstrap.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function (require) {\r\n    'use strict';\r\n\r\n    var renderer = require('../template/renderer');\r\n\r\n    renderer.addAttribute('repeat', renderer.handlers.wrapAttribute);\r\n\r\n    renderer.addAttribute('outerfasteach', {\r\n        binding: 'fastForEach',\r\n        handler: renderer.handlers.wrapAttribute\r\n    });\r\n\r\n    renderer\r\n        .addNode('repeat')\r\n        .addNode('fastForEach');\r\n\r\n    return {\r\n        resizable:      require('./resizable'),\r\n        i18n:           require('./i18n'),\r\n        scope:          require('./scope'),\r\n        range:          require('./range'),\r\n        mageInit:       require('./mage-init'),\r\n        keyboard:       require('./keyboard'),\r\n        optgroup:       require('./optgroup'),\r\n        afterRender:     require('./after-render'),\r\n        autoselect:     require('./autoselect'),\r\n        datepicker:     require('./datepicker'),\r\n        outerClick:     require('./outer_click'),\r\n        fadeVisible:    require('./fadeVisible'),\r\n        collapsible:    require('./collapsible'),\r\n        staticChecked:  require('./staticChecked'),\r\n        simpleChecked:  require('./simple-checked'),\r\n        bindHtml:       require('./bind-html'),\r\n        tooltip:        require('./tooltip'),\r\n        repeat:         require('knockoutjs/knockout-repeat'),\r\n        fastForEach:    require('knockoutjs/knockout-fast-foreach'),\r\n        colorPicker:    require('./color-picker')\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/collapsible.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    '../template/renderer'\r\n], function (ko, $, _, renderer) {\r\n    'use strict';\r\n\r\n    var collapsible,\r\n        defaults;\r\n\r\n    defaults = {\r\n        closeOnOuter: true,\r\n        onTarget: false,\r\n        openClass: '_active',\r\n        as: '$collapsible'\r\n    };\r\n\r\n    collapsible = {\r\n\r\n        /**\r\n         * Sets 'opened' property to true.\r\n         */\r\n        open: function () {\r\n            this.opened(true);\r\n        },\r\n\r\n        /**\r\n         * Sets 'opened' property to false.\r\n         */\r\n        close: function () {\r\n            this.opened(false);\r\n        },\r\n\r\n        /**\r\n         * Toggles value of the 'opened' property.\r\n         */\r\n        toggle: function () {\r\n            this.opened(!this.opened());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Document click handler which in case if event target is not\r\n     * a descendant of provided container element, closes collapsible model.\r\n     *\r\n     * @param {HTMLElement} container\r\n     * @param {Object} model\r\n     * @param {EventObject} e\r\n     */\r\n    function onOuterClick(container, model, e) {\r\n        var target = e.target;\r\n\r\n        if (target !== container && !container.contains(target)) {\r\n            model.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates 'css' binding which toggles\r\n     * class specified in 'name' parameter.\r\n     *\r\n     * @param {Object} model\r\n     * @param {String} name\r\n     * @returns {Object}\r\n     */\r\n    function getClassBinding(model, name) {\r\n        var binding = {};\r\n\r\n        binding[name] = model.opened;\r\n\r\n        return {\r\n            css: binding\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prepares configuration for the binding based\r\n     * on a default properties and provided options.\r\n     *\r\n     * @param {Object} [options={}]\r\n     * @returns {Object} Complete instance configuration.\r\n     */\r\n    function buildConfig(options) {\r\n        if (typeof options !== 'object') {\r\n            options = {};\r\n        }\r\n\r\n        return _.extend({}, defaults, options);\r\n    }\r\n\r\n    ko.bindingHandlers.collapsible = {\r\n\r\n        /**\r\n         * Initializes 'collapsible' binding.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var $collapsible = Object.create(collapsible),\r\n                config = buildConfig(valueAccessor()),\r\n                outerClick,\r\n                bindings;\r\n\r\n            _.bindAll($collapsible, 'open', 'close', 'toggle');\r\n\r\n            $collapsible.opened = ko.observable(!!config.opened);\r\n\r\n            bindingCtx[config.as] = $collapsible;\r\n\r\n            if (config.closeOnOuter) {\r\n                outerClick = onOuterClick.bind(null, element, $collapsible);\r\n\r\n                $(document).on('click', outerClick);\r\n\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    $(document).off('click', outerClick);\r\n                });\r\n            }\r\n\r\n            if (config.openClass) {\r\n                bindings = getClassBinding($collapsible, config.openClass);\r\n\r\n                ko.applyBindingsToNode(element, bindings, bindingCtx);\r\n            }\r\n\r\n            if (config.onTarget) {\r\n                $(element).on('click', $collapsible.toggle);\r\n            }\r\n\r\n            if (viewModel && _.isFunction(viewModel.on)) {\r\n                viewModel.on({\r\n                    close:          $collapsible.close,\r\n                    open:           $collapsible.open,\r\n                    toggleOpened:   $collapsible.toggle\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.closeCollapsible = {\r\n\r\n        /**\r\n         * Creates listener for the click event on provided DOM element,\r\n         * which closes associated with it collapsible model.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var name = valueAccessor() || defaults.as,\r\n                $collapsible = bindingCtx[name];\r\n\r\n            if ($collapsible) {\r\n                $(element).on('click', $collapsible.close);\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.openCollapsible = {\r\n\r\n        /**\r\n         * Creates listener for the click event on provided DOM element,\r\n         * which opens associated with it collapsible model.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var name = valueAccessor() || defaults.as,\r\n                $collapsible = bindingCtx[name];\r\n\r\n            if ($collapsible) {\r\n                $(element).on('click', $collapsible.open);\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.toggleCollapsible = {\r\n\r\n        /**\r\n         * Creates listener for the click event on provided DOM element,\r\n         * which toggles associated with it collapsible model.\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var name = valueAccessor() || defaults.as,\r\n                $collapsible = bindingCtx[name];\r\n\r\n            if ($collapsible) {\r\n                $(element).on('click', $collapsible.toggle);\r\n            }\r\n        }\r\n    };\r\n\r\n    renderer\r\n        .addAttribute('collapsible')\r\n        .addAttribute('openCollapsible')\r\n        .addAttribute('closeCollapsible')\r\n        .addAttribute('toggleCollapsible');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/color-picker.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    '../template/renderer',\r\n    'spectrum',\r\n    'tinycolor'\r\n], function (ko, $, renderer, spectrum, tinycolor) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Change color picker status to be enabled or disabled\r\n     *\r\n     * @param {HTMLElement} element - Element to apply colorpicker enable/disable status to.\r\n     * @param {Object} viewModel - Object, which represents view model binded to el.\r\n     */\r\n    function changeColorPickerStateBasedOnViewModel(element, viewModel) {\r\n        $(element).spectrum(viewModel.disabled() ? 'disable' : 'enable');\r\n    }\r\n\r\n    ko.bindingHandlers.colorPicker = {\r\n        /**\r\n         * Binding init callback.\r\n         *\r\n         * @param {*} element\r\n         * @param {Function} valueAccessor\r\n         * @param {Function} allBindings\r\n         * @param {Object} viewModel\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel) {\r\n            var config = valueAccessor(),\r\n\r\n                /** change value */\r\n                changeValue = function (value) {\r\n                    if (value == null) {\r\n                        value = '';\r\n                    }\r\n                    config.value(value.toString());\r\n                };\r\n\r\n            config.change = changeValue;\r\n\r\n            config.hide = changeValue;\r\n\r\n            /** show value */\r\n            config.show = function () {\r\n                if (!viewModel.focused()) {\r\n                    viewModel.focused(true);\r\n                }\r\n\r\n                return true;\r\n            };\r\n\r\n            $(element).spectrum(config);\r\n\r\n            changeColorPickerStateBasedOnViewModel(element, viewModel);\r\n        },\r\n\r\n        /**\r\n         * Reads params passed to binding, parses component declarations.\r\n         * Fetches for those found and attaches them to the new context.\r\n         *\r\n         * @param {HTMLElement} element - Element to apply bindings to.\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding.\r\n         * @param {Object} allBindings - Object, which represents all bindings applied to element.\r\n         * @param {Object} viewModel - Object, which represents view model binded to element.\r\n         */\r\n        update: function (element, valueAccessor, allBindings, viewModel) {\r\n            var config = valueAccessor();\r\n\r\n            /** Initialise value as empty if it is undefined when color picker input is reset **/\r\n            if (config.value() === undefined) {\r\n                config.value('');\r\n            }\r\n\r\n            if (tinycolor(config.value()).isValid() || config.value() === '') {\r\n                $(element).spectrum('set', config.value());\r\n\r\n                if (config.value() !== '') {\r\n                    config.value($(element).spectrum('get').toString());\r\n                }\r\n            }\r\n\r\n            changeColorPickerStateBasedOnViewModel(element, viewModel);\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('colorPicker');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/datepicker.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/** Creates datepicker binding and registers in to ko.bindingHandlers object */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'jquery',\r\n    'mage/translate'\r\n], function (ko, _, $, $t) {\r\n    'use strict';\r\n\r\n    var defaults = {\r\n        dateFormat: 'mm\\/dd\\/yyyy',\r\n        showsTime: false,\r\n        timeFormat: null,\r\n        buttonImage: null,\r\n        buttonImageOnly: null,\r\n        buttonText: $t('Select Date')\r\n    };\r\n\r\n    ko.bindingHandlers.datepicker = {\r\n        /**\r\n         * Initializes calendar widget on element and stores it's value to observable property.\r\n         * Datepicker binding takes either observable property or object\r\n         *  { storage: {ko.observable}, options: {Object} }.\r\n         * For more info about options take a look at \"mage/calendar\" and jquery.ui.datepicker widget.\r\n         * @param {HTMLElement} el - Element, that binding is applied to\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding\r\n         * @param {object} allBindings\r\n         * @param {object} viewModel\r\n         * @param {object} bindingContext\r\n         */\r\n        init: function (el, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var config = valueAccessor(),\r\n                observable,\r\n                options = {};\r\n\r\n            _.extend(options, defaults);\r\n\r\n            if (typeof config === 'object') {\r\n                observable = config.storage;\r\n                _.extend(options, config.options);\r\n            } else {\r\n                observable = config;\r\n            }\r\n\r\n            require(['mage/calendar'], function () {\r\n                $(el).calendar(options);\r\n\r\n                ko.utils.registerEventHandler(el, 'change', function () {\r\n                    observable(this.value);\r\n                });\r\n            });\r\n\r\n            if (bindingContext.$data) {\r\n                bindingContext.$data.value.subscribe(function (newVal) {\r\n                    if (!newVal) {\r\n                        $(el).val('');\r\n                    }\r\n                }, this);\r\n            }\r\n\r\n\r\n        },\r\n\r\n        /**\r\n         * Update calendar widget on element and stores it's value to observable property.\r\n         * Datepicker binding takes either observable property or object\r\n         *  { storage: {ko.observable}, options: {Object} }.\r\n         * @param {HTMLElement} element - Element, that binding is applied to\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding\r\n         */\r\n        update: function (element, valueAccessor) {\r\n            var config = valueAccessor(),\r\n                $element = $(element),\r\n                observable,\r\n                options = {},\r\n                newVal;\r\n\r\n            _.extend(options, defaults);\r\n\r\n            if (typeof config === 'object') {\r\n                observable = config.storage;\r\n                _.extend(options, config.options);\r\n            } else {\r\n                observable = config;\r\n            }\r\n\r\n            require(['moment', 'mage/utils/misc', 'mage/calendar'], function (moment, utils) {\r\n                if (_.isEmpty(observable())) {\r\n                    newVal = null;\r\n                } else {\r\n                    newVal = moment(\r\n                        observable(),\r\n                        utils.convertToMomentFormat(\r\n                            options.dateFormat + (options.showsTime ? ' ' + options.timeFormat : '')\r\n                        )\r\n                    ).toDate();\r\n                }\r\n\r\n                if (!options.timeOnly) {\r\n                    $element.datepicker('setDate', newVal);\r\n                    $element.trigger('blur');\r\n                }\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/fadeVisible.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko'\r\n], function ($, ko) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.fadeVisible = {\r\n        /**\r\n         * Initially set the element to be instantly visible/hidden depending on the value.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var value = valueAccessor();\r\n\r\n            // Use \"unwrapObservable\" so we can handle values that may or may not be observable\r\n            $(element).toggle(ko.unwrap(value));\r\n        },\r\n\r\n        /**\r\n         * Whenever the value subsequently changes, slowly fade the element in or out.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        update: function (element, valueAccessor) {\r\n            var value = valueAccessor();\r\n\r\n            ko.unwrap(value) ? $(element).fadeIn() : $(element).fadeOut();\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/i18n.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'module',\r\n    '../template/renderer',\r\n    'mage/translate'\r\n], function ($, ko, module, renderer) {\r\n    'use strict';\r\n\r\n    var locations = {\r\n            'legend': 'Caption for the fieldset element',\r\n            'label': 'Label for an input element.',\r\n            'button': 'Push button',\r\n            'a': 'Link label',\r\n            'b': 'Bold text',\r\n            'strong': 'Strong emphasized text',\r\n            'i': 'Italic text',\r\n            'em': 'Emphasized text',\r\n            'u': 'Underlined text',\r\n            'sup': 'Superscript text',\r\n            'sub': 'Subscript text',\r\n            'span': 'Span element',\r\n            'small': 'Smaller text',\r\n            'big': 'Bigger text',\r\n            'address': 'Contact information',\r\n            'blockquote': 'Long quotation',\r\n            'q': 'Short quotation',\r\n            'cite': 'Citation',\r\n            'caption': 'Table caption',\r\n            'abbr': 'Abbreviated phrase',\r\n            'acronym': 'An acronym',\r\n            'var': 'Variable part of a text',\r\n            'dfn': 'Term',\r\n            'strike': 'Strikethrough text',\r\n            'del': 'Deleted text',\r\n            'ins': 'Inserted text',\r\n            'h1': 'Heading level 1',\r\n            'h2': 'Heading level 2',\r\n            'h3': 'Heading level 3',\r\n            'h4': 'Heading level 4',\r\n            'h5': 'Heading level 5',\r\n            'h6': 'Heading level 6',\r\n            'center': 'Centered text',\r\n            'select': 'List options',\r\n            'img': 'Image',\r\n            'input': 'Form element'\r\n        },\r\n\r\n        /**\r\n         * Generates [data-translate] attribute's value\r\n         * @param {Object} translationData\r\n         * @param {String} location\r\n         */\r\n        composeTranslateAttr = function (translationData, location) {\r\n            var obj = [{\r\n                'shown': translationData.shown,\r\n                'translated': translationData.translated,\r\n                'original': translationData.original,\r\n                'location': locations[location] || 'Text'\r\n            }];\r\n\r\n            return JSON.stringify(obj);\r\n        },\r\n\r\n        /**\r\n         * Sets text for the element\r\n         * @param {Object} el\r\n         * @param {String} text\r\n         */\r\n        setText = function (el, text) {\r\n            $(el).text(text);\r\n        },\r\n\r\n        /**\r\n         * Sets [data-translate] attribute for the element\r\n         * @param {Object} el - The element which is binded\r\n         * @param {String} original - The original value of the element\r\n         */\r\n        setTranslateProp = function (el, original) {\r\n            var location = $(el).prop('tagName').toLowerCase(),\r\n                translated = $.mage.__(original),\r\n                translationData = {\r\n                    shown: translated,\r\n                    translated: translated,\r\n                    original: original\r\n                },\r\n                translateAttr = composeTranslateAttr(translationData, location);\r\n\r\n            $(el).attr('data-translate', translateAttr);\r\n\r\n            setText(el, translationData.shown);\r\n        },\r\n\r\n        /**\r\n         * Checks if node represents ko virtual node (nodeType === 8, nodeName === '#comment').\r\n         *\r\n         * @param {HTMLElement} node\r\n         * @returns {Boolean}\r\n         */\r\n        isVirtualElement = function (node) {\r\n            return node.nodeType === 8;\r\n        },\r\n\r\n        /**\r\n        * Checks if it's real DOM element\r\n        * in case of virtual element, returns span wrapper\r\n        * @param {Object} el\r\n        * @param {bool} isUpdate\r\n        * @return {Object} el\r\n        */\r\n        getRealElement = function (el, isUpdate) {\r\n            if (isVirtualElement(el)) {\r\n                if (isUpdate) {\r\n                    return $(el).next('span');\r\n                }\r\n\r\n                return $('<span></span>').insertAfter(el);\r\n            }\r\n\r\n            return el;\r\n        },\r\n\r\n        /**\r\n         * execute i18n binding\r\n         * @param {Object} element\r\n         * @param {Function} valueAccessor\r\n         * @param {bool} isUpdate\r\n         */\r\n        execute = function (element, valueAccessor, isUpdate) {\r\n            var original = ko.unwrap(valueAccessor() || ''),\r\n                el = getRealElement(element, isUpdate),\r\n                inlineTranslation = (module.config() || {}).inlineTranslation;\r\n\r\n            if (inlineTranslation) {\r\n                setTranslateProp(el, original);\r\n            } else {\r\n                setText(el, $.mage.__(original));\r\n            }\r\n        };\r\n\r\n    /**\r\n     * i18n binding\r\n     * @property {Function}  init\r\n     * @property {Function}  update\r\n     */\r\n    ko.bindingHandlers.i18n = {\r\n\r\n        /**\r\n         * init i18n binding\r\n         * @param {Object} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            execute(element, valueAccessor);\r\n        },\r\n\r\n        /**\r\n         * update i18n binding\r\n         * @param {Object} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        update: function (element, valueAccessor) {\r\n            execute(element, valueAccessor, true);\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings.i18n = true;\r\n\r\n    renderer\r\n        .addNode('translate', {\r\n            binding: 'i18n'\r\n        })\r\n        .addAttribute('translate', {\r\n            binding: 'i18n'\r\n        });\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/keyboard.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    '../template/renderer'\r\n], function (ko, renderer) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.keyboard = {\r\n\r\n        /**\r\n         * Attaches keypress handlers to element\r\n         * @param {HTMLElement} el - Element, that binding is applied to\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding\r\n         * @param  {Object} allBindings - all bindings object\r\n         * @param  {Object} viewModel - reference to viewmodel\r\n         */\r\n        init: function (el, valueAccessor, allBindings, viewModel) {\r\n            var map = valueAccessor();\r\n\r\n            ko.utils.registerEventHandler(el, 'keyup', function (e) {\r\n                var callback = map[e.keyCode];\r\n\r\n                if (callback) {\r\n                    return callback.call(viewModel, e);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('keyboard');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/mage-init.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mage/apply/main'\r\n], function (ko, _, mage) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.mageInit = {\r\n        /**\r\n         * Initializes components assigned to HTML elements.\r\n         *\r\n         * @param {HTMLElement} el\r\n         * @param {Function} valueAccessor\r\n         */\r\n        init: function (el, valueAccessor) {\r\n            var data = valueAccessor();\r\n\r\n            _.each(data, function (config, component) {\r\n                mage.applyFor(el, config, component);\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/optgroup.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'mageUtils'\r\n    ], function (ko, utils) {\r\n    'use strict';\r\n\r\n    var captionPlaceholder = {},\r\n        optgroupTmpl = '<optgroup label=\"${ $.label }\"></optgroup>',\r\n        nbspRe = /&nbsp;/g,\r\n        optionsText,\r\n        optionsValue,\r\n        optionTitle;\r\n\r\n    ko.bindingHandlers.optgroup = {\r\n        /**\r\n         * @param {*} element\r\n         */\r\n        init: function (element) {\r\n            if (ko.utils.tagNameLower(element) !== 'select') {\r\n                throw new Error('options binding applies only to SELECT elements');\r\n            }\r\n\r\n            // Remove all existing <option>s.\r\n            while (element.length > 0) {\r\n                element.remove(0);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} element\r\n         * @param {*} valueAccessor\r\n         * @param {*} allBindings\r\n         */\r\n        update: function (element, valueAccessor, allBindings) {\r\n            var selectWasPreviouslyEmpty = element.length === 0,\r\n                previousScrollTop = !selectWasPreviouslyEmpty && element.multiple ? element.scrollTop : null,\r\n                includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\r\n                arrayToDomNodeChildrenOptions = {},\r\n                captionValue,\r\n                unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\r\n                filteredArray,\r\n                previousSelectedValues,\r\n                itemUpdate = false,\r\n                callback = setSelectionCallback,//eslint-disable-line no-use-before-define\r\n                nestedOptionsLevel = -1;\r\n\r\n            optionsText = ko.utils.unwrapObservable(allBindings.get('optionsText')) || 'text';\r\n            optionsValue = ko.utils.unwrapObservable(allBindings.get('optionsValue')) || 'value';\r\n            optionTitle = optionsText + 'title';\r\n\r\n            if (element.multiple) {\r\n                previousSelectedValues = ko.utils.arrayMap(\r\n                    selectedOptions(),//eslint-disable-line no-use-before-define\r\n                    ko.selectExtensions.readValue\r\n                );\r\n            } else {\r\n                previousSelectedValues = element.selectedIndex >= 0 ?\r\n                    [ko.selectExtensions.readValue(element.options[element.selectedIndex])] :\r\n                    [];\r\n            }\r\n\r\n            if (unwrappedArray) {\r\n                if (typeof unwrappedArray.length === 'undefined') { // Coerce single value into array\r\n                    unwrappedArray = [unwrappedArray];\r\n                }\r\n\r\n                // Filter out any entries marked as destroyed\r\n                filteredArray = ko.utils.arrayFilter(unwrappedArray, function (item) {\r\n                    if (item && !item.label) {\r\n                        return false;\r\n                    }\r\n\r\n                    return includeDestroyed ||\r\n                        item === undefined ||\r\n                        item === null ||\r\n                        !ko.utils.unwrapObservable(item._destroy);\r\n                });\r\n                filteredArray.map(recursivePathBuilder, null);//eslint-disable-line no-use-before-define\r\n            }\r\n\r\n            /**\r\n             * @param {*} option\r\n             */\r\n            arrayToDomNodeChildrenOptions.beforeRemove = function (option) {\r\n                element.removeChild(option);\r\n            };\r\n\r\n            if (allBindings.has('optionsAfterRender')) {\r\n\r\n                /**\r\n                 * @param {*} arrayEntry\r\n                 * @param {*} newOptions\r\n                 */\r\n                callback = function (arrayEntry, newOptions) {\r\n                    setSelectionCallback(arrayEntry, newOptions);//eslint-disable-line no-use-before-define\r\n                    ko.dependencyDetection.ignore(\r\n                        allBindings.get('optionsAfterRender'),\r\n                        null,\r\n                        [newOptions[0],\r\n                        arrayEntry !== captionPlaceholder ? arrayEntry : undefined]\r\n                    );\r\n                };\r\n            }\r\n\r\n            filteredArray = formatOptions(filteredArray);//eslint-disable-line no-use-before-define\r\n            ko.utils.setDomNodeChildrenFromArrayMapping(\r\n                element,\r\n                filteredArray,\r\n                optionNodeFromArray,//eslint-disable-line no-use-before-define\r\n                arrayToDomNodeChildrenOptions,\r\n                callback\r\n            );\r\n\r\n            ko.dependencyDetection.ignore(function () {\r\n                var selectionChanged;\r\n\r\n                if (allBindings.get('valueAllowUnset') && allBindings.has('value')) {\r\n                    // The model value is authoritative, so make sure its value is the one selected\r\n                    ko.selectExtensions.writeValue(\r\n                        element,\r\n                        ko.utils.unwrapObservable(allBindings.get('value')),\r\n                        true /* allowUnset */\r\n                    );\r\n                } else {\r\n                    // Determine if the selection has changed as a result of updating the options list\r\n                    if (element.multiple) {\r\n                        // For a multiple-select box, compare the new selection count to the previous one\r\n                        // But if nothing was selected before, the selection can't have changed\r\n                        selectionChanged = previousSelectedValues.length &&\r\n                            selectedOptions().length < //eslint-disable-line no-use-before-define\r\n                            previousSelectedValues.length;\r\n                    } else {\r\n                        // For a single-select box, compare the current value to the previous value\r\n                        // But if nothing was selected before or nothing is selected now,\r\n                        // just look for a change in selection\r\n                        selectionChanged = previousSelectedValues.length && element.selectedIndex >= 0 ?\r\n                            ko.selectExtensions.readValue(element.options[element.selectedIndex]) !==\r\n                            previousSelectedValues[0] : previousSelectedValues.length || element.selectedIndex >= 0;\r\n                    }\r\n\r\n                    // Ensure consistency between model value and selected option.\r\n                    // If the dropdown was changed so that selection is no longer the same,\r\n                    // notify the value or selectedOptions binding.\r\n                    if (selectionChanged) {\r\n                        ko.utils.triggerEvent(element, 'change');\r\n                    }\r\n                }\r\n            });\r\n\r\n            /*eslint-enable max-len, no-use-before-define*/\r\n\r\n            if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20) {\r\n                element.scrollTop = previousScrollTop;\r\n            }\r\n\r\n            /**\r\n             * @returns {*}\r\n             */\r\n            function selectedOptions() {\r\n                return ko.utils.arrayFilter(element.options, function (node) {\r\n                    return node.selected;\r\n                });\r\n            }\r\n\r\n            /**\r\n             * @param {*} object\r\n             * @param {*} predicate\r\n             * @param {*} defaultValue\r\n             * @returns {*}\r\n             */\r\n            function applyToObject(object, predicate, defaultValue) {\r\n                var predicateType = typeof predicate;\r\n\r\n                if (predicateType === 'function') {   // run it against the data value\r\n                    return predicate(object);\r\n                } else if (predicateType === 'string') { // treat it as a property name on the data value\r\n                    return object[predicate];\r\n                }\r\n\r\n                return defaultValue;\r\n            }\r\n\r\n            /**\r\n             * @param {*} obj\r\n             */\r\n            function recursivePathBuilder(obj) {\r\n\r\n                obj[optionTitle] = (this && this[optionTitle] ? this[optionTitle] + '/' : '') + obj[optionsText].trim();\r\n\r\n                if (Array.isArray(obj[optionsValue])) {\r\n                    obj[optionsValue].map(recursivePathBuilder, obj);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * @param {Array} arrayEntry\r\n             * @param {*} oldOptions\r\n             * @returns {*[]}\r\n             */\r\n            function optionNodeFromArray(arrayEntry, oldOptions) {\r\n                var option;\r\n\r\n                if (oldOptions.length) {\r\n                    previousSelectedValues = oldOptions[0].selected ?\r\n                        [ko.selectExtensions.readValue(oldOptions[0])] : [];\r\n                    itemUpdate = true;\r\n                }\r\n\r\n                if (arrayEntry === captionPlaceholder) { // empty value, label === caption\r\n                    option = element.ownerDocument.createElement('option');\r\n                    ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\r\n                    ko.selectExtensions.writeValue(option, undefined);\r\n                } else if (typeof arrayEntry[optionsValue] === 'undefined') { // empty value === optgroup\r\n                    if (arrayEntry.__disableTmpl) {\r\n                        option = '<optgroup label=\"' + arrayEntry[optionsText] + '\"></optgroup>';\r\n                    } else {\r\n                        option = utils.template(optgroupTmpl, {\r\n                            label: arrayEntry[optionsText],\r\n                            title: arrayEntry[optionsText + 'title']\r\n                        });\r\n                    }\r\n                    option = ko.utils.parseHtmlFragment(option)[0];\r\n\r\n                } else {\r\n                    option = element.ownerDocument.createElement('option');\r\n                    option.setAttribute('data-title', arrayEntry[optionsText + 'title']);\r\n                    ko.selectExtensions.writeValue(option, arrayEntry[optionsValue]);\r\n                    ko.utils.setTextContent(option, arrayEntry[optionsText]);\r\n                }\r\n\r\n                return [option];\r\n            }\r\n\r\n            /**\r\n             * @param {*} newOptions\r\n             */\r\n            function setSelectionCallback(newOptions) {\r\n                var isSelected;\r\n\r\n                // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\r\n                // That's why we first added them without selection. Now it's time to set the selection.\r\n                if (previousSelectedValues.length && newOptions.value) {\r\n                    isSelected = ko.utils.arrayIndexOf(\r\n                        previousSelectedValues,\r\n                        ko.selectExtensions.readValue(newOptions.value)\r\n                    ) >= 0;\r\n\r\n                    ko.utils.setOptionNodeSelectionState(newOptions.value, isSelected);\r\n\r\n                    // If this option was changed from being selected during a single-item update, notify the change\r\n                    if (itemUpdate && !isSelected) {\r\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, 'change']);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * @param {*} string\r\n             * @param {Number} times\r\n             * @returns {Array}\r\n             */\r\n            function strPad(string, times) {\r\n                return new Array(times + 1).join(string);\r\n            }\r\n\r\n            /**\r\n             * @param {*} options\r\n             * @returns {Array}\r\n             */\r\n            function formatOptions(options) {\r\n                var res = [];\r\n\r\n                nestedOptionsLevel++;\r\n\r\n                if (!nestedOptionsLevel) { // zero level\r\n                    // If caption is included, add it to the array\r\n                    if (allBindings.has('optionsCaption')) {\r\n                        captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\r\n                        // If caption value is null or undefined, don't show a caption\r\n                        if (//eslint-disable-line max-depth\r\n                            captionValue !== null &&\r\n                            captionValue !== undefined &&\r\n                            captionValue !== false\r\n                        ) {\r\n                            res.push(captionPlaceholder);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                ko.utils.arrayForEach(options, function (option) {\r\n                    var value = applyToObject(option, optionsValue, option),\r\n                        label = applyToObject(option, optionsText, value) || '',\r\n                        disabled = applyToObject(option, 'disabled', false) || false,\r\n                        obj = {},\r\n                        space = '\\u2007\\u2007\\u2007';\r\n\r\n                    obj[optionTitle] = applyToObject(option, optionsText + 'title', value);\r\n\r\n                    if (disabled) {\r\n                        obj.disabled = disabled;\r\n                    }\r\n\r\n                    if (option.hasOwnProperty('__disableTmpl')) {\r\n                        obj.__disableTmpl = option.__disableTmpl;\r\n                    }\r\n\r\n                    label = label.replace(nbspRe, '').trim();\r\n\r\n                    if (Array.isArray(value)) {\r\n                        obj[optionsText] = strPad('&nbsp;', nestedOptionsLevel * 4) + label;\r\n                        res.push(obj);\r\n                        res = res.concat(formatOptions(value));\r\n                    } else {\r\n                        obj[optionsText] = strPad(space, nestedOptionsLevel * 2) + label;\r\n                        obj[optionsValue] = value;\r\n                        res.push(obj);\r\n                    }\r\n                });\r\n                nestedOptionsLevel--;\r\n\r\n                return res;\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/outer_click.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/** Creates outerClick binding and registers in to ko.bindingHandlers object */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    '../template/renderer'\r\n], function (ko, $, _, renderer) {\r\n    'use strict';\r\n\r\n    var defaults = {\r\n        onlyIfVisible: true\r\n    };\r\n\r\n    /**\r\n     * Checks if element sis visible.\r\n     *\r\n     * @param {Element} el\r\n     * @returns {Boolean}\r\n     */\r\n    function isVisible(el) {\r\n        var style = window.getComputedStyle(el),\r\n            visibility = {\r\n                display: 'none',\r\n                visibility: 'hidden',\r\n                opacity: '0'\r\n            },\r\n            visible = true;\r\n\r\n        _.each(visibility, function (val, key) {\r\n            if (style[key] === val) {\r\n                visible = false;\r\n            }\r\n        });\r\n\r\n        return visible;\r\n    }\r\n\r\n    /**\r\n     * Document click handler which in case if event target is not\r\n     * a descendant of provided container element,\r\n     * invokes specified in configuration callback.\r\n     *\r\n     * @param {HTMLElement} container\r\n     * @param {Object} config\r\n     * @param {EventObject} e\r\n     */\r\n    function onOuterClick(container, config, e) {\r\n        var target = e.target,\r\n            callback = config.callback;\r\n\r\n        if (container === target || container.contains(target)) {\r\n            return;\r\n        }\r\n\r\n        if (config.onlyIfVisible) {\r\n            if (!_.isNull(container.offsetParent) && isVisible(container)) {\r\n                callback();\r\n            }\r\n        } else {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares configuration for the binding based\r\n     * on a default properties and provided options.\r\n     *\r\n     * @param {(Object|Function)} [options={}]\r\n     * @returns {Object}\r\n     */\r\n    function buildConfig(options) {\r\n        var config = {};\r\n\r\n        if (_.isFunction(options)) {\r\n            options = {\r\n                callback: options\r\n            };\r\n        } else if (!_.isObject(options)) {\r\n            options = {};\r\n        }\r\n\r\n        return _.extend(config, defaults, options);\r\n    }\r\n\r\n    ko.bindingHandlers.outerClick = {\r\n\r\n        /**\r\n         * Initializes outer click binding.\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var config = buildConfig(valueAccessor()),\r\n                outerClick = onOuterClick.bind(null, element, config),\r\n                isTouchDevice = typeof document.ontouchstart !== 'undefined';\r\n\r\n            if (isTouchDevice) {\r\n                $(document).on('touchstart', outerClick);\r\n\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    $(document).off('touchstart', outerClick);\r\n                });\r\n            } else {\r\n                $(document).on('click', outerClick);\r\n\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                    $(document).off('click', outerClick);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('outerClick');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/range.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    '../template/renderer'\r\n], function (ko, $, _, renderer) {\r\n    'use strict';\r\n\r\n    var isTouchDevice = !_.isUndefined(document.ontouchstart),\r\n        sliderFn = 'slider',\r\n        sliderModule = 'jquery-ui-modules/slider';\r\n\r\n    if (isTouchDevice) {\r\n        sliderFn = 'touchSlider';\r\n        sliderModule = 'mage/touch-slider';\r\n    }\r\n\r\n    ko.bindingHandlers.range = {\r\n\r\n        /**\r\n         * Initializes binding and a slider update.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var config  = valueAccessor(),\r\n                value   = config.value;\r\n\r\n            _.extend(config, {\r\n                value: value(),\r\n\r\n                /**\r\n                 * Callback which is being called when sliders' value changes.\r\n                 *\r\n                 * @param {Event} event\r\n                 * @param {Object} ui\r\n                 */\r\n                slide: function (event, ui) {\r\n                    value(ui.value);\r\n                }\r\n            });\r\n\r\n            require([sliderModule], function () {\r\n                $(element)[sliderFn](config);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates sliders' plugin configuration.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} valueAccessor\r\n         */\r\n        update: function (element, valueAccessor) {\r\n            var config = valueAccessor();\r\n\r\n            config.value = ko.unwrap(config.value);\r\n\r\n            require([sliderModule], function () {\r\n                $(element)[sliderFn]('option', config);\r\n            });\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('range');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/resizable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'uiRegistry',\r\n    'underscore',\r\n    '../template/renderer'\r\n], function (ko, $, async, registry, _, renderer) {\r\n    'use strict';\r\n\r\n    var sizeOptions = [\r\n            'minHeight',\r\n            'maxHeight',\r\n            'minWidth',\r\n            'maxWidth'\r\n        ],\r\n\r\n        handles = {\r\n            height: '.ui-resizable-s, .ui-resizable-n',\r\n            width: '.ui-resizable-w, .ui-resizable-e'\r\n        };\r\n\r\n    /**\r\n     * Recalcs visibility of handles, width and height of resizable based on content\r\n     * @param {HTMLElement} element\r\n     */\r\n    function adjustSize(element) {\r\n        var maxHeight,\r\n            maxWidth;\r\n\r\n        element = $(element);\r\n        maxHeight = element.resizable('option').maxHeight;\r\n        maxWidth = element.resizable('option').maxWidth;\r\n\r\n        if (maxHeight && element.height() > maxHeight) {\r\n            element.height(maxHeight + 1);\r\n            $(handles.height).hide();\r\n        } else {\r\n            $(handles.height).show();\r\n        }\r\n\r\n        if (maxWidth && element.width() > maxWidth) {\r\n            element.width(maxWidth + 1);\r\n            $(handles.width).hide();\r\n        } else {\r\n            $(handles.width).show();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recalcs allowed min, max width and height based on configured selectors\r\n     * @param {Object} sizeConstraints\r\n     * @param {String} componentName\r\n     * @param {HTMLElement} element\r\n     * @param {Boolean} hasWidthUpdate\r\n     */\r\n    function recalcAllowedSize(sizeConstraints, componentName, element, hasWidthUpdate) {\r\n        var size;\r\n\r\n        element = $(element);\r\n\r\n        if (!element.data('resizable')) {\r\n            return;\r\n        }\r\n\r\n        if (!hasWidthUpdate) {\r\n            element.css('width', 'auto');\r\n        }\r\n\r\n        _.each(sizeConstraints, function (selector, key) {\r\n            async.async({\r\n                component: componentName,\r\n                selector: selector\r\n            }, function (elem) {\r\n                size = key.indexOf('Height') !== -1 ? $(elem).outerHeight(true) : $(elem).outerWidth(true);\r\n\r\n                if (element.data('resizable')) {\r\n                    element.resizable('option', key, size + 1);\r\n                }\r\n            });\r\n        }, this);\r\n\r\n        adjustSize(element);\r\n    }\r\n\r\n    /**\r\n     * Preprocess config to separate options,\r\n     * which must be processed further before applying\r\n     *\r\n     * @param {Object} config\r\n     * @param {Object} viewModel\r\n     * @param {*} element\r\n     * @return {Object} config\r\n     */\r\n    function processConfig(config, viewModel, element) {\r\n        var sizeConstraint,\r\n            sizeConstraints = {},\r\n            recalc,\r\n            hasWidthUpdate;\r\n\r\n        if (_.isEmpty(config)) {\r\n            return {};\r\n        }\r\n        _.each(sizeOptions, function (key) {\r\n            sizeConstraint = config[key];\r\n\r\n            if (sizeConstraint && !_.isNumber(sizeConstraint)) {\r\n                sizeConstraints[key] = sizeConstraint;\r\n                delete config[key];\r\n            }\r\n        });\r\n        hasWidthUpdate =  _.some(sizeConstraints, function (value, key) {\r\n            return key.indexOf('Width') !== -1;\r\n        });\r\n\r\n        recalc = recalcAllowedSize.bind(null, sizeConstraints, viewModel.name, element, hasWidthUpdate);\r\n        config.start = recalc;\r\n        $(window).on('resize.resizable', recalc);\r\n        registry.get(viewModel.provider).on('reloaded', recalc);\r\n\r\n        return config;\r\n    }\r\n\r\n    ko.bindingHandlers.resizable = {\r\n\r\n        /**\r\n         * Binding init callback.\r\n         *\r\n         * @param {*} element\r\n         * @param {Function} valueAccessor\r\n         * @param {Function} allBindings\r\n         * @param {Object} viewModel\r\n         */\r\n        init: function (element, valueAccessor, allBindings, viewModel) {\r\n            var config = processConfig(valueAccessor(), viewModel, element);\r\n\r\n            require(['jquery-ui-modules/resizable'], function () {\r\n                if ($.fn.resizable) {\r\n                    $(element).resizable(config);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('resizable');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/scope.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/** Creates scope binding and registers in to ko.bindingHandlers object */\r\ndefine([\r\n    'ko',\r\n    'uiRegistry',\r\n    'mage/translate',\r\n    '../template/renderer',\r\n    'jquery',\r\n    '../../logger/console-logger'\r\n], function (ko, registry, $t, renderer, $, consoleLogger) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates child context with passed component param as $data. Extends context with $t helper.\r\n     * Applies bindings to descendant nodes.\r\n     * @param {HTMLElement} el - element to apply bindings to.\r\n     * @param {ko.bindingContext} bindingContext - instance of ko.bindingContext, passed to binding initially.\r\n     * @param {Promise} promise - instance of jQuery promise\r\n     * @param {Object} component - component instance to attach to new context\r\n     */\r\n    function applyComponents(el, bindingContext, promise, component) {\r\n        promise.resolve();\r\n        component = bindingContext.createChildContext(component);\r\n\r\n        ko.utils.extend(component, {\r\n            $t: $t\r\n        });\r\n\r\n        ko.utils.arrayForEach(ko.virtualElements.childNodes(el), ko.cleanNode);\r\n\r\n        ko.applyBindingsToDescendants(component, el);\r\n    }\r\n\r\n    ko.bindingHandlers.scope = {\r\n\r\n        /**\r\n         * Scope binding's init method.\r\n         * @returns {Object} - Knockout declaration for it to let binding control descendants.\r\n         */\r\n        init: function () {\r\n            return {\r\n                controlsDescendantBindings: true\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Reads params passed to binding, parses component declarations.\r\n         * Fetches for those found and attaches them to the new context.\r\n         * @param {HTMLElement} el - Element to apply bindings to.\r\n         * @param {Function} valueAccessor - Function that returns value, passed to binding.\r\n         * @param {Object} allBindings - Object, which represents all bindings applied to element.\r\n         * @param {Object} viewModel - Object, which represents view model binded to el.\r\n         * @param {ko.bindingContext} bindingContext - Instance of ko.bindingContext, passed to binding initially.\r\n         */\r\n        update: function (el, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var component = valueAccessor(),\r\n                promise = $.Deferred(),\r\n                apply = applyComponents.bind(this, el, bindingContext, promise),\r\n                loggerUtils = consoleLogger.utils;\r\n\r\n            if (typeof component === 'string') {\r\n                loggerUtils.asyncLog(\r\n                    promise,\r\n                    {\r\n                        data: {\r\n                            component: component\r\n                        },\r\n                        messages: loggerUtils.createMessages(\r\n                            'requestingComponent',\r\n                            'requestingComponentIsLoaded',\r\n                            'requestingComponentIsFailed'\r\n                        )\r\n                    }\r\n                );\r\n\r\n                registry.get(component, apply);\r\n            } else if (typeof component === 'function') {\r\n                component(apply);\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings.scope = true;\r\n\r\n    renderer\r\n        .addNode('scope')\r\n        .addAttribute('scope', {\r\n            name: 'ko-scope'\r\n        });\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/simple-checked.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    '../template/renderer'\r\n], function (ko, renderer) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.simpleChecked = {\r\n        'after': ['attr'],\r\n\r\n        /**\r\n         * Implements same functionality as a standard 'simpleChecked' binding,\r\n         * but with a difference that it wont' change values array if\r\n         * value of DOM element changes.\r\n         */\r\n        init: function (element, valueAccessor) {\r\n            var isCheckbox = element.type === 'checkbox',\r\n                isRadio = element.type === 'radio',\r\n                updateView,\r\n                updateModel;\r\n\r\n            if (!isCheckbox && !isRadio) {\r\n                return;\r\n            }\r\n\r\n            /**\r\n             * Updates checked observable\r\n             */\r\n            updateModel = function () {\r\n                var  modelValue = ko.dependencyDetection.ignore(valueAccessor),\r\n                    isChecked = element.checked;\r\n\r\n                if (ko.computedContext.isInitial()) {\r\n                    return;\r\n                }\r\n\r\n                if (modelValue.peek() === isChecked) {\r\n                    return;\r\n                }\r\n\r\n                if (isRadio && !isChecked) {\r\n                    return;\r\n                }\r\n\r\n                modelValue(isChecked);\r\n            };\r\n\r\n            /**\r\n             * Updates checkbox state\r\n             */\r\n            updateView = function () {\r\n                var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n                element.checked = !!modelValue;\r\n            };\r\n\r\n            ko.utils.registerEventHandler(element, 'change', updateModel);\r\n\r\n            ko.computed(updateModel, null, {\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n            ko.computed(updateView, null, {\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.expressionRewriting._twoWayBindings.simpleChecked = true;\r\n\r\n    renderer.addAttribute('simpleChecked');\r\n    renderer.addAttribute('simple-checked', {\r\n        binding: 'simpleChecked'\r\n    });\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/staticChecked.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    '../template/renderer'\r\n], function (ko, renderer) {\r\n    'use strict';\r\n\r\n    ko.bindingHandlers.staticChecked = {\r\n        'after': ['value', 'attr'],\r\n\r\n        /**\r\n         * Implements same functionality as a standard 'checked' binding,\r\n         * but with a difference that it wont' change values array if\r\n         * value of DOM element changes.\r\n         */\r\n        init: function (element, valueAccessor, allBindings) {\r\n            var isCheckbox = element.type === 'checkbox',\r\n                isRadio = element.type === 'radio',\r\n                isValueArray,\r\n                oldElemValue,\r\n                useCheckedValue,\r\n                checkedValue,\r\n                updateModel,\r\n                updateView;\r\n\r\n            if (!isCheckbox && !isRadio) {\r\n                return;\r\n            }\r\n\r\n            checkedValue = ko.pureComputed(function () {\r\n                if (allBindings.has('checkedValue')) {\r\n                    return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\r\n                } else if (allBindings.has('value')) {\r\n                    return ko.utils.unwrapObservable(allBindings.get('value'));\r\n                }\r\n\r\n                return element.value;\r\n            });\r\n\r\n            isValueArray = isCheckbox && ko.utils.unwrapObservable(valueAccessor()) instanceof Array;\r\n            oldElemValue = isValueArray ? checkedValue() : undefined;\r\n            useCheckedValue = isRadio || isValueArray;\r\n\r\n            /**\r\n             * Updates values array if it's necessary.\r\n             */\r\n            updateModel = function () {\r\n                var isChecked = element.checked,\r\n                    elemValue = useCheckedValue ? checkedValue() : isChecked,\r\n                    modelValue;\r\n\r\n                if (ko.computedContext.isInitial()) {\r\n                    return;\r\n                }\r\n\r\n                if (isRadio && !isChecked) {\r\n                    return;\r\n                }\r\n\r\n                modelValue = ko.dependencyDetection.ignore(valueAccessor);\r\n\r\n                if (isValueArray) {\r\n                    if (oldElemValue !== elemValue) {\r\n                        oldElemValue = elemValue;\r\n                    } else {\r\n                        ko.utils.addOrRemoveItem(modelValue, elemValue, isChecked);\r\n                    }\r\n                } else {\r\n                    ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Updates checkbox state.\r\n             */\r\n            updateView = function () {\r\n                var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n                if (isValueArray) {\r\n                    element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) >= 0;\r\n                } else if (isCheckbox) {\r\n                    element.checked = modelValue;\r\n                } else {\r\n                    element.checked = checkedValue() === modelValue;\r\n                }\r\n            };\r\n\r\n            ko.computed(updateModel, null, {\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n\r\n            ko.utils.registerEventHandler(element, 'click', updateModel);\r\n\r\n            ko.computed(updateView, null, {\r\n                disposeWhenNodeIsRemoved: element\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.expressionRewriting._twoWayBindings.staticChecked = true;\r\n\r\n    renderer.addAttribute('staticChecked');\r\n});\r\n","Magento_Ui/js/lib/knockout/bindings/tooltip.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'mage/template',\r\n    'text!ui/template/tooltip/tooltip.html',\r\n    '../template/renderer'\r\n], function ($, ko, _, template, tooltipTmpl, renderer) {\r\n    'use strict';\r\n\r\n    var tooltip,\r\n        defaults,\r\n        positions,\r\n        transformProp,\r\n        checkedPositions = {},\r\n        iterator = 0,\r\n        previousTooltip,\r\n        tooltipData,\r\n        positionData = {},\r\n        tooltipsCollection = {},\r\n        isTouchDevice = (function () {\r\n            return 'ontouchstart' in document.documentElement;\r\n        })(),\r\n        CLICK_EVENT = (function () {\r\n            return isTouchDevice ? 'touchstart' : 'click';\r\n        })();\r\n\r\n    defaults = {\r\n        tooltipWrapper: '[data-tooltip=tooltip-wrapper]',\r\n        tooltipContentBlock: 'data-tooltip-content',\r\n        closeButtonClass: 'action-close',\r\n        tailClass: 'data-tooltip-tail',\r\n        action: 'hover',\r\n        delay: 300,\r\n        track: false,\r\n        step: 20,\r\n        position: 'top',\r\n        closeButton: false,\r\n        showed: false,\r\n        strict: true,\r\n        center: false,\r\n        closeOnScroll: true\r\n    };\r\n\r\n    tooltipData = {\r\n        tooltipClasses: '',\r\n        trigger: false,\r\n        timeout: 0,\r\n        element: false,\r\n        event: false,\r\n        targetElement: {},\r\n        showed: false,\r\n        currentID: 0\r\n    };\r\n\r\n    /**\r\n     * Polyfill for css transform\r\n     */\r\n    transformProp = (function () {\r\n        var style = document.createElement('div').style,\r\n            base = 'Transform',\r\n            vendors = ['webkit', 'moz', 'ms', 'o'],\r\n            vi = vendors.length,\r\n            property;\r\n\r\n        if (typeof style.transform !== 'undefined') {\r\n            return 'transform';\r\n        }\r\n\r\n        while (vi--) {\r\n            property = vendors[vi] + base;\r\n\r\n            if (typeof style[property] !== 'undefined') {\r\n                return property;\r\n            }\r\n        }\r\n    })();\r\n\r\n    positions = {\r\n\r\n        /*eslint max-depth: [0, 0]*/\r\n\r\n        map: {\r\n            horizontal: {\r\n                s: 'w',\r\n                p: 'left'\r\n            },\r\n            vertical: {\r\n                s: 'h',\r\n                p: 'top'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wrapper function to get tooltip data (position, className, etc)\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        top: function (s) {\r\n            return positions._topLeftChecker(s, positions.map, 'vertical', '_bottom', 'top', 'right');\r\n        },\r\n\r\n        /**\r\n         * Wrapper function to get tooltip data (position, className, etc)\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        left: function (s) {\r\n            return positions._topLeftChecker(s, positions.map, 'horizontal', '_right', 'left', 'top');\r\n        },\r\n\r\n        /**\r\n         * Wrapper function to get tooltip data (position, className, etc)\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        bottom: function (s) {\r\n            return positions._bottomRightChecker(s, positions.map, 'vertical', '_top', 'bottom', 'left');\r\n        },\r\n\r\n        /**\r\n         * Wrapper function to get tooltip data (position, className, etc)\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        right: function (s) {\r\n            return positions._bottomRightChecker(s, positions.map, 'horizontal', '_left', 'right', 'bottom');\r\n        },\r\n\r\n        /**\r\n         * Check can tooltip setted on current position or not. If can't setted - delegate call.\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @param {String} direction - vertical or horizontal\r\n         * @param {String} className - class whats should be setted to tooltip\r\n         * @param {String} side - parent method name\r\n         * @param {String} delegate - method name if tooltip can't be setted in current position\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _topLeftChecker: function (s, map, direction, className, side, delegate) {\r\n            var result = {\r\n                    position: {}\r\n                },\r\n                config = tooltip.getTooltip(tooltipData.currentID),\r\n                startPosition = !config.strict ? s.eventPosition : s.elementPosition,\r\n                changedDirection;\r\n\r\n            checkedPositions[side] = true;\r\n\r\n            if (\r\n                startPosition[map[direction].p] - s.tooltipSize[map[direction].s] - config.step >\r\n                s.scrollPosition[map[direction].p]\r\n            ) {\r\n                result.position[map[direction].p] = startPosition[map[direction].p] - s.tooltipSize[map[direction].s] -\r\n                    config.step;\r\n                result.className = className;\r\n                result.side = side;\r\n                changedDirection = direction === 'vertical' ? 'horizontal' : 'vertical';\r\n                result = positions._normalize(s, result, config, delegate, map, changedDirection);\r\n            } else if (!checkedPositions[delegate]) {\r\n                result = positions[delegate].apply(null, arguments);\r\n            } else {\r\n                result = positions.positionCenter(s, result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Check can tooltip setted on current position or not. If can't setted - delegate call.\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @param {String} direction - vertical or horizontal\r\n         * @param {String} className - class whats should be setted to tooltip\r\n         * @param {String} side - parent method name\r\n         * @param {String} delegate - method name if tooltip can't be setted in current position\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _bottomRightChecker: function (s, map, direction, className, side, delegate) {\r\n            var result = {\r\n                    position: {}\r\n                },\r\n                config = tooltip.getTooltip(tooltipData.currentID),\r\n                startPosition = !config.strict ? s.eventPosition : {\r\n                    top: s.elementPosition.top + s.elementSize.h,\r\n                    left: s.elementPosition.left + s.elementSize.w\r\n                },\r\n                changedDirection;\r\n\r\n            checkedPositions[side] = true;\r\n\r\n            if (\r\n                startPosition[map[direction].p] + s.tooltipSize[map[direction].s] + config.step <\r\n                s.scrollPosition[map[direction].p] + s.windowSize[map[direction].s]\r\n            ) {\r\n                result.position[map[direction].p] = startPosition[map[direction].p] + config.step;\r\n                result.className = className;\r\n                result.side = side;\r\n                changedDirection = direction === 'vertical' ? 'horizontal' : 'vertical';\r\n                result = positions._normalize(s, result, config, delegate, map, changedDirection);\r\n            } else if (!checkedPositions[delegate]) {\r\n                result = positions[delegate].apply(null, arguments);\r\n            } else {\r\n                result = positions.positionCenter(s, result);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Centered tooltip if tooltip does not fit in window\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} data - current data (position, className, etc)\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        positionCenter: function (s, data) {\r\n            data = positions._positionCenter(s, data, 'horizontal', positions.map);\r\n            data = positions._positionCenter(s, data, 'vertical', positions.map);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Centered tooltip side\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} data - current data (position, className, etc)\r\n         * @param {String} direction - vertical or horizontal\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _positionCenter: function (s, data, direction, map) {\r\n            if (s.tooltipSize[map[direction].s] < s.windowSize[map[direction].s]) {\r\n                data.position[map[direction].p] = (s.windowSize[map[direction].s] -\r\n                    s.tooltipSize[map[direction].s]) / 2 + s.scrollPosition[map[direction].p];\r\n            } else {\r\n                data.position[map[direction].p] = s.scrollPosition[map[direction].p];\r\n                data.tooltipSize = {};\r\n                data.tooltipSize[map[direction].s] = s.windowSize[map[direction].s];\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Normalize horizontal or vertical position.\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} data - current data (position, className, etc)\r\n         * @param {Object} config - tooltip config\r\n         * @param {String} delegate - method name if tooltip can't be setted in current position\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @param {String} direction - vertical or horizontal\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _normalize: function (s, data, config, delegate, map, direction) {\r\n            var startPosition = !config.center ? s.eventPosition : {\r\n                    left: s.elementPosition.left + s.elementSize.w / 2,\r\n                    top: s.elementPosition.top + s.elementSize.h / 2\r\n                },\r\n                depResult;\r\n\r\n            if (startPosition[map[direction].p] - s.tooltipSize[map[direction].s] / 2 >\r\n                s.scrollPosition[map[direction].p] && startPosition[map[direction].p] +\r\n                s.tooltipSize[map[direction].s] / 2 <\r\n                s.scrollPosition[map[direction].p] + s.windowSize[map[direction].s]\r\n            ) {\r\n                data.position[map[direction].p] = startPosition[map[direction].p] - s.tooltipSize[map[direction].s] / 2;\r\n            } else {\r\n\r\n                /*eslint-disable no-lonely-if*/\r\n                if (!checkedPositions[delegate]) {\r\n                    depResult = positions[delegate].apply(null, arguments);\r\n\r\n                    if (depResult.hasOwnProperty('className')) {\r\n                        data = depResult;\r\n                    } else {\r\n                        data = positions._normalizeTail(s, data, config, delegate, map, direction, startPosition);\r\n                    }\r\n                } else {\r\n                    data = positions._normalizeTail(s, data, config, delegate, map, direction, startPosition);\r\n                }\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Calc tail position.\r\n         *\r\n         * @param {Object} s - object with sizes and positions elements\r\n         * @param {Object} data - current data (position, className, etc)\r\n         * @param {Object} config - tooltip config\r\n         * @param {String} delegate - method name if tooltip can't be setted in current position\r\n         * @param {Object} map - mapping for get direction positions\r\n         * @param {String} direction - vertical or horizontal\r\n         * @param {Object} startPosition - start position\r\n         * @returns {Object} tooltip data (position, className, etc)\r\n         */\r\n        _normalizeTail: function (s, data, config, delegate, map, direction, startPosition) {\r\n            data.tail = {};\r\n\r\n            if (s.tooltipSize[map[direction].s] < s.windowSize[map[direction].s]) {\r\n\r\n                if (\r\n                    startPosition[map[direction].p] >\r\n                    s.windowSize[map[direction].s] / 2 + s.scrollPosition[map[direction].p]\r\n                ) {\r\n                    data.position[map[direction].p] = s.windowSize[map[direction].s] +\r\n                        s.scrollPosition[map[direction].p] - s.tooltipSize[map[direction].s];\r\n                    data.tail[map[direction].p] = startPosition[map[direction].p] -\r\n                        s.tooltipSize[map[direction].s] / 2 - data.position[map[direction].p];\r\n                } else {\r\n                    data.position[map[direction].p] = s.scrollPosition[map[direction].p];\r\n                    data.tail[map[direction].p] = startPosition[map[direction].p] -\r\n                        s.tooltipSize[map[direction].s] / 2 - data.position[map[direction].p];\r\n                }\r\n            } else {\r\n                data.position[map[direction].p] = s.scrollPosition[map[direction].p];\r\n                data.tail[map[direction].p] = s.eventPosition[map[direction].p] - s.windowSize[map[direction].s] / 2;\r\n                data.tooltipSize = {};\r\n                data.tooltipSize[map[direction].s] = s.windowSize[map[direction].s];\r\n            }\r\n\r\n            return data;\r\n        }\r\n    };\r\n\r\n    tooltip = {\r\n\r\n        /**\r\n         * Set new tooltip to tooltipCollection, save config, and add unic id\r\n         *\r\n         * @param {Object} config - tooltip config\r\n         * @returns {String} tooltip id\r\n         */\r\n        setTooltip: function (config) {\r\n            var property = 'id-' + iterator;\r\n\r\n            tooltipsCollection[property] = config;\r\n            iterator++;\r\n\r\n            return property;\r\n        },\r\n\r\n        /**\r\n         * Get tooltip config by id\r\n         *\r\n         * @param {String} id - tooltip id\r\n         * @returns {Object} tooltip config\r\n         */\r\n        getTooltip: function (id) {\r\n            return tooltipsCollection[id];\r\n        },\r\n\r\n        /**\r\n         * Set content to current tooltip\r\n         *\r\n         * @param {Object} tooltipElement - tooltip element\r\n         * @param {Object} viewModel - tooltip view model\r\n         * @param {String} id - tooltip id\r\n         * @param {Object} bindingCtx - tooltip context\r\n         * @param {Object} event - action event\r\n         */\r\n        setContent: function (tooltipElement, viewModel, id, bindingCtx, event) {\r\n            var html = $(tooltipElement).html(),\r\n                config = tooltip.getTooltip(id),\r\n                body = $('body');\r\n\r\n            tooltipData.currentID = id;\r\n            tooltipData.trigger = $(event.currentTarget);\r\n            tooltip.setTargetData(event);\r\n            body.on('mousemove.setTargetData', tooltip.setTargetData);\r\n            tooltip.clearTimeout(id);\r\n\r\n            tooltipData.timeout = _.delay(function () {\r\n                body.off('mousemove.setTargetData', tooltip.setTargetData);\r\n\r\n                if (tooltipData.trigger[0] === tooltipData.targetElement) {\r\n                    tooltip.destroy(id);\r\n                    event.stopPropagation();\r\n                    tooltipElement = tooltip.createTooltip(id);\r\n                    tooltipElement.find('.' + defaults.tooltipContentBlock).append(html);\r\n                    tooltipElement.applyBindings(bindingCtx);\r\n                    tooltip.setHandlers(id);\r\n                    tooltip.setPosition(tooltipElement, id);\r\n                    previousTooltip = id;\r\n                }\r\n\r\n            }, config.delay);\r\n        },\r\n\r\n        /**\r\n         * Set position to current tooltip\r\n         *\r\n         * @param {Object} tooltipElement - tooltip element\r\n         * @param {String} id - tooltip id\r\n         */\r\n        setPosition: function (tooltipElement, id) {\r\n            var config = tooltip.getTooltip(id);\r\n\r\n            tooltip.sizeData = {\r\n                windowSize: {\r\n                    h: $(window).outerHeight(),\r\n                    w: $(window).outerWidth()\r\n                },\r\n                scrollPosition: {\r\n                    top: $(window).scrollTop(),\r\n                    left: $(window).scrollLeft()\r\n                },\r\n                tooltipSize: {\r\n                    h: tooltipElement.outerHeight(),\r\n                    w: tooltipElement.outerWidth()\r\n                },\r\n                elementSize: {\r\n                    h: tooltipData.trigger.outerHeight(),\r\n                    w: tooltipData.trigger.outerWidth()\r\n                },\r\n                elementPosition: tooltipData.trigger.offset(),\r\n                eventPosition: this.getEventPosition(tooltipData.event)\r\n            };\r\n\r\n            _.extend(positionData, positions[config.position](tooltip.sizeData));\r\n            tooltipElement.css(positionData.position);\r\n            tooltipElement.addClass(positionData.className);\r\n            tooltip._setTooltipSize(positionData, tooltipElement);\r\n            tooltip._setTailPosition(positionData, tooltipElement);\r\n            checkedPositions = {};\r\n        },\r\n\r\n        /**\r\n         * Check position data and change tooltip size if needs\r\n         *\r\n         * @param {Object} data - position data\r\n         * @param {Object} tooltipElement - tooltip element\r\n         */\r\n        _setTooltipSize: function (data, tooltipElement) {\r\n            if (data.tooltipSize) {\r\n                data.tooltipSize.w ?\r\n                    tooltipElement.css('width', data.tooltipSize.w) :\r\n                    tooltipElement.css('height', data.tooltipSize.h);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check position data and set position to tail\r\n         *\r\n         * @param {Object} data - position data\r\n         * @param {Object} tooltipElement - tooltip element\r\n         */\r\n        _setTailPosition: function (data, tooltipElement) {\r\n            var tail,\r\n                tailMargin;\r\n\r\n            if (data.tail) {\r\n                tail = tooltipElement.find('.' + defaults.tailClass);\r\n\r\n                if (data.tail.left) {\r\n                    tailMargin = parseInt(tail.css('margin-left'), 10);\r\n                    tail.css('margin-left', tailMargin + data.tail.left);\r\n                } else {\r\n                    tailMargin = parseInt(tail.css('margin-top'), 10);\r\n                    tail.css('margin-top', tailMargin + data.tail.top);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Resolves position for tooltip\r\n         *\r\n         * @param {Object} event\r\n         * @returns {Object}\r\n         */\r\n        getEventPosition: function (event) {\r\n            var position = {\r\n                left: event.originalEvent && event.originalEvent.pageX || 0,\r\n                top: event.originalEvent && event.originalEvent.pageY || 0\r\n            };\r\n\r\n            if (position.left === 0 && position.top === 0) {\r\n                _.extend(position, event.target.getBoundingClientRect());\r\n            }\r\n\r\n            return position;\r\n        },\r\n\r\n        /**\r\n         * Close tooltip if action happened outside handler and tooltip element\r\n         *\r\n         * @param {String} id - tooltip id\r\n         * @param {Object} event - action event\r\n         */\r\n        outerClick: function (id, event) {\r\n            var tooltipElement = $(event.target).parents(defaults.tooltipWrapper)[0],\r\n                isTrigger = event.target === tooltipData.trigger[0] || $.contains(tooltipData.trigger[0], event.target);\r\n\r\n            if (tooltipData.showed && tooltipElement !== tooltipData.element[0] && !isTrigger) {\r\n                tooltip.destroy(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Parse keydown event and if event trigger is escape key - close tooltip\r\n         *\r\n         * @param {Object} event - action event\r\n         */\r\n        keydownHandler: function (event) {\r\n            if (tooltipData.showed && event.keyCode === 27) {\r\n                tooltip.destroy(tooltipData.currentID);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change tooltip position when track is enabled\r\n         *\r\n         * @param {Object} event - current event\r\n         */\r\n        track: function (event) {\r\n            var inequality = {},\r\n                map = positions.map,\r\n                translate = {\r\n                    left: 'translateX',\r\n                    top: 'translateY'\r\n                },\r\n                eventPosition = {\r\n                    left: event.pageX,\r\n                    top: event.pageY\r\n                },\r\n                tooltipSize = {\r\n                    w: tooltipData.element.outerWidth(),\r\n                    h: tooltipData.element.outerHeight()\r\n                },\r\n                direction = positionData.side === 'bottom' || positionData.side === 'top' ? 'horizontal' : 'vertical';\r\n\r\n            inequality[map[direction].p] = eventPosition[map[direction].p] - (positionData.position[map[direction].p] +\r\n                tooltipSize[map[direction].s] / 2);\r\n\r\n            if (positionData.position[map[direction].p] + inequality[map[direction].p] +\r\n                tooltip.sizeData.tooltipSize[map[direction].s] >\r\n                tooltip.sizeData.windowSize[map[direction].s] + tooltip.sizeData.scrollPosition[map[direction].p] ||\r\n                inequality[map[direction].p] + positionData.position[map[direction].p] <\r\n                tooltip.sizeData.scrollPosition[map[direction].p]) {\r\n\r\n                return false;\r\n            }\r\n\r\n            tooltipData.element[0].style[transformProp] = translate[map[direction].p] +\r\n                '(' + inequality[map[direction].p] + 'px)';\r\n        },\r\n\r\n        /**\r\n         * Set handlers to tooltip\r\n         *\r\n         * @param {String} id - tooltip id\r\n         */\r\n        setHandlers: function (id) {\r\n            var config = tooltip.getTooltip(id);\r\n\r\n            if (config.track) {\r\n                tooltipData.trigger.on('mousemove.track', tooltip.track);\r\n            }\r\n\r\n            if (config.action === 'click') {\r\n                $(window).on(CLICK_EVENT + '.outerClick', tooltip.outerClick.bind(null, id));\r\n            }\r\n\r\n            if (config.closeButton) {\r\n                $('.' + config.closeButtonClass).on('click.closeButton', tooltip.destroy.bind(null, id));\r\n            }\r\n\r\n            if (config.closeOnScroll) {\r\n                document.addEventListener('scroll', tooltip.destroy, true);\r\n                $(window).on('scroll.tooltip', tooltip.outerClick.bind(null, id));\r\n            }\r\n\r\n            $(window).on('keydown.tooltip', tooltip.keydownHandler);\r\n            $(window).on('resize.outerClick', tooltip.outerClick.bind(null, id));\r\n        },\r\n\r\n        /**\r\n         * Toggle tooltip\r\n         *\r\n         * @param {Object} tooltipElement - tooltip element\r\n         * @param {Object} viewModel - tooltip view model\r\n         * @param {String} id - tooltip id\r\n         */\r\n        toggleTooltip: function (tooltipElement, viewModel, id) {\r\n            if (previousTooltip === id && tooltipData.showed) {\r\n                tooltip.destroy(id);\r\n\r\n                return false;\r\n            }\r\n\r\n            tooltip.setContent.apply(null, arguments);\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Create tooltip and append to DOM\r\n         *\r\n         * @param {String} id - tooltip id\r\n         * @returns {Object} tooltip element\r\n         */\r\n        createTooltip: function (id) {\r\n            var body = $('body'),\r\n                config = tooltip.getTooltip(id);\r\n\r\n            $(template(tooltipTmpl, {\r\n                data: config\r\n            })).appendTo(body);\r\n\r\n            tooltipData.showed = true;\r\n            tooltipData.element = $(config.tooltipWrapper);\r\n\r\n            return tooltipData.element;\r\n        },\r\n\r\n        /**\r\n         * Check action and clean timeout\r\n         *\r\n         * @param {String} id - tooltip id\r\n         */\r\n        clearTimeout: function (id) {\r\n            var config = tooltip.getTooltip(id);\r\n\r\n            if (config.action === 'hover') {\r\n                clearTimeout(tooltipData.timeout);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check previous tooltip\r\n         */\r\n        checkPreviousTooltip: function () {\r\n            if (!tooltipData.timeout) {\r\n                tooltip.destroy();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Destroy tooltip instance\r\n         */\r\n        destroy: function () {\r\n            if (tooltipData.element) {\r\n                tooltipData.element.remove();\r\n                tooltipData.showed = false;\r\n            }\r\n\r\n            positionData = {};\r\n            tooltipData.timeout = false;\r\n            tooltip.removeHandlers();\r\n        },\r\n\r\n        /**\r\n         * Remove tooltip handlers\r\n         */\r\n        removeHandlers: function () {\r\n            $('.' + defaults.closeButtonClass).off('click.closeButton');\r\n            tooltipData.trigger.off('mousemove.track');\r\n            document.removeEventListener('scroll', tooltip.destroy, true);\r\n            $(window).off('scroll.tooltip');\r\n            $(window).off(CLICK_EVENT + '.outerClick');\r\n            $(window).off('keydown.tooltip');\r\n            $(window).off('resize.outerClick');\r\n        },\r\n\r\n        /**\r\n         * Set target element\r\n         *\r\n         * @param {Object} event - current event\r\n         */\r\n        setTargetData: function (event) {\r\n            tooltipData.event = event;\r\n\r\n            //TODO: bug chrome v.49; Link to issue https://bugs.chromium.org/p/chromium/issues/detail?id=161464\r\n            if (event.timeStamp - (tooltipData.timestamp || 0) < 1) {\r\n                return;\r\n            }\r\n\r\n            if (event.type === 'mousemove') {\r\n                tooltipData.targetElement = event.target;\r\n            } else {\r\n                tooltipData.targetElement = event.currentTarget;\r\n                tooltipData.timestamp = event.timeStamp;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Merged user config with defaults configuration\r\n         *\r\n         * @param {Object} config - user config\r\n         * @returns {Object} merged config\r\n         */\r\n        processingConfig: function (config) {\r\n            return _.extend({}, defaults, config);\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.tooltip = {\r\n\r\n        /**\r\n         * Initialize tooltip\r\n         *\r\n         * @param {Object} elem - tooltip DOM element\r\n         * @param {Function} valueAccessor - ko observable property, tooltip data\r\n         * @param {Object} allBindings - all bindings on current element\r\n         * @param {Object} viewModel - current element viewModel\r\n         * @param {Object} bindingCtx - current element binding context\r\n         */\r\n        init: function (elem, valueAccessor, allBindings, viewModel, bindingCtx) {\r\n            var config = tooltip.processingConfig(valueAccessor()),\r\n                $parentScope = config.parentScope ? $(config.parentScope) : $(elem).parent(),\r\n                tooltipId;\r\n\r\n            $(elem).addClass('hidden');\r\n\r\n            if (isTouchDevice) {\r\n                config.action = 'click';\r\n            }\r\n            tooltipId = tooltip.setTooltip(config);\r\n\r\n            if (config.action === 'hover') {\r\n                $parentScope.on(\r\n                    'mouseenter',\r\n                    config.trigger,\r\n                    tooltip.setContent.bind(null, elem, viewModel, tooltipId, bindingCtx)\r\n                );\r\n                $parentScope.on(\r\n                    'mouseleave',\r\n                    config.trigger,\r\n                    tooltip.checkPreviousTooltip.bind(null, tooltipId)\r\n                );\r\n            } else if (config.action === 'click') {\r\n                $parentScope.on(\r\n                    'click',\r\n                    config.trigger,\r\n                    tooltip.toggleTooltip.bind(null, elem, viewModel, tooltipId, bindingCtx)\r\n                );\r\n            }\r\n\r\n            return {\r\n                controlsDescendantBindings: true\r\n            };\r\n        }\r\n    };\r\n\r\n    renderer.addAttribute('tooltip');\r\n});\r\n","Magento_Ui/js/lib/knockout/extender/bound-nodes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'mage/utils/wrapper',\r\n    'uiEvents'\r\n], function (ko, _, wrapper, Events) {\r\n    'use strict';\r\n\r\n    var nodesMap = new WeakMap();\r\n\r\n    /**\r\n     * Returns a array of nodes associated with a specified model.\r\n     *\r\n     * @param {Object} model\r\n     * @returns {Undefined|Array}\r\n     */\r\n    function getBounded(model) {\r\n        return nodesMap.get(model);\r\n    }\r\n\r\n    /**\r\n     * Removes specified node to models' associations list, if it's\r\n     * a root node (node is not a descendant of any previously added nodes).\r\n     * Triggers 'addNode' event.\r\n     *\r\n     * @param {Object} model\r\n     * @param {HTMLElement} node\r\n     */\r\n    function addBounded(model, node) {\r\n        var nodes = getBounded(model),\r\n            isRoot;\r\n\r\n        if (!nodes) {\r\n            nodesMap.set(model, [node]);\r\n\r\n            Events.trigger.call(model, 'addNode', node);\r\n\r\n            return;\r\n        }\r\n\r\n        isRoot = nodes.every(function (bounded) {\r\n            return !bounded.contains(node);\r\n        });\r\n\r\n        if (isRoot) {\r\n            nodes.push(node);\r\n\r\n            Events.trigger.call(model, 'addNode', node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes specified node from models' associations list.\r\n     * Triggers 'removeNode' event.\r\n     *\r\n     * @param {Object} model\r\n     * @param {HTMLElement} node\r\n     */\r\n    function removeBounded(model, node) {\r\n        var nodes = getBounded(model),\r\n            index;\r\n\r\n        if (!nodes) {\r\n            return;\r\n        }\r\n\r\n        index = nodes.indexOf(node);\r\n\r\n        if (~index) {\r\n            nodes.splice(index, 0);\r\n\r\n            Events.trigger.call(model, 'removeNode', node);\r\n        }\r\n\r\n        if (!nodes.length) {\r\n            nodesMap.delete(model);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns node's first sibling of 'element' type within the common component scope\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @param {*} data\r\n     * @returns {HTMLElement}\r\n     */\r\n    function getElement(node, data) {\r\n        var elem;\r\n\r\n        while (node.nextElementSibling) {\r\n            node = node.nextElementSibling;\r\n\r\n            if (node.nodeType === 1 && ko.dataFor(node) === data) {\r\n                elem = node;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    wrapper.extend(ko, {\r\n\r\n        /**\r\n         * Extends knockouts' 'applyBindings'\r\n         * to track nodes associated with model.\r\n         *\r\n         * @param {Function} orig - Original 'applyBindings' method.\r\n         * @param {Object} ctx\r\n         * @param {HTMLElement} node - Original 'applyBindings' method.\r\n         */\r\n        applyBindings: function (orig, ctx, node) {\r\n            var result = orig(),\r\n                data = ctx && (ctx.$data || ctx);\r\n\r\n            if (node && node.nodeType === 8) {\r\n                node = getElement(node, data);\r\n            }\r\n\r\n            if (!node || node.nodeType !== 1) {\r\n                return result;\r\n            }\r\n\r\n            if (data && data.registerNodes) {\r\n                addBounded(data, node);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Extends knockouts' cleanNode\r\n         * to track nodes associated with model.\r\n         *\r\n         * @param {Function} orig - Original 'cleanNode' method.\r\n         * @param {HTMLElement} node - Original 'cleanNode' method.\r\n         */\r\n        cleanNode: function (orig, node) {\r\n            var result = orig(),\r\n                data;\r\n\r\n            if (node.nodeType !== 1) {\r\n                return result;\r\n            }\r\n\r\n            data = ko.dataFor(node);\r\n\r\n            if (data && data.registerNodes) {\r\n                removeBounded(data, node);\r\n            }\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return {\r\n\r\n        /**\r\n         * Returns root nodes associated with a model. If callback is provided,\r\n         * will iterate through all of the present nodes triggering callback\r\n         * for each of it. Also it will subscribe to the 'addNode' event.\r\n         *\r\n         * @param {Object} model\r\n         * @param {Function} [callback]\r\n         * @returns {Array|Undefined}\r\n         */\r\n        get: function (model, callback) {\r\n            var nodes = getBounded(model) || [];\r\n\r\n            if (!_.isFunction(callback)) {\r\n                return nodes;\r\n            }\r\n\r\n            nodes.forEach(function (node) {\r\n                callback(node);\r\n            });\r\n\r\n            this.add.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Subscribes to adding of nodes associated with a model.\r\n         *\r\n         * @param {Object} model\r\n         */\r\n        add: function (model) {\r\n            var args = _.toArray(arguments).slice(1);\r\n\r\n            args.unshift('addNode');\r\n\r\n            Events.on.apply(model, args);\r\n        },\r\n\r\n        /**\r\n         * Subscribes to removal of nodes associated with a model.\r\n         *\r\n         * @param {Object} model\r\n         */\r\n        remove: function (model) {\r\n            var args = _.toArray(arguments).slice(1);\r\n\r\n            args.unshift('removeNode');\r\n\r\n            Events.on.apply(model, args);\r\n        },\r\n\r\n        /**\r\n         * Removes subscriptions from the model.\r\n         *\r\n         * @param {Object} model\r\n         */\r\n        off: function (model) {\r\n            var args = _.toArray(arguments).slice(1);\r\n\r\n            Events.off.apply(model, args);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/extender/observable_array.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore'\r\n], function (ko, _) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Iterator function.\r\n     *\r\n     * @param {String} callback\r\n     * @param {Array} args\r\n     * @param {Object} elem\r\n     * @returns {*}\r\n     */\r\n    function iterator(callback, args, elem) {\r\n        callback = elem[callback];\r\n\r\n        if (_.isFunction(callback)) {\r\n            return callback.apply(elem, args);\r\n        }\r\n\r\n        return callback;\r\n    }\r\n\r\n    /**\r\n     * Wrapper function.\r\n     *\r\n     * @param {String} method\r\n     * @returns {Function}\r\n     */\r\n    function wrapper(method) {\r\n        return function (iteratee) {\r\n            var callback = iteratee,\r\n                elems = this(),\r\n                args = _.toArray(arguments);\r\n\r\n            if (_.isString(iteratee)) {\r\n                callback = iterator.bind(null, iteratee, args.slice(1));\r\n\r\n                args.unshift(callback);\r\n            }\r\n\r\n            args.unshift(elems);\r\n\r\n            return _[method].apply(_, args);\r\n        };\r\n    }\r\n\r\n    _.extend(ko.observableArray.fn, {\r\n        each: wrapper('each'),\r\n\r\n        map: wrapper('map'),\r\n\r\n        filter: wrapper('filter'),\r\n\r\n        some: wrapper('some'),\r\n\r\n        every: wrapper('every'),\r\n\r\n        groupBy: wrapper('groupBy'),\r\n\r\n        sortBy: wrapper('sortBy'),\r\n\r\n        /**\r\n         * Wrapper for underscore findWhere function.\r\n         *\r\n         * @param {Object} properties\r\n         * @return {Object}\r\n         */\r\n        findWhere: function (properties) {\r\n            return _.findWhere(this(), properties);\r\n        },\r\n\r\n        /**\r\n         * Wrapper for underscore contains function.\r\n         *\r\n         * @param {*} value\r\n         * @return {Boolean}\r\n         */\r\n        contains: function (value) {\r\n            return _.contains(this(), value);\r\n        },\r\n\r\n        /**\r\n         * Inverse contains call.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        hasNo: function () {\r\n            return !this.contains.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Getter for length property.\r\n         *\r\n         * @return {Number}\r\n         */\r\n        getLength: function () {\r\n            return this().length;\r\n        },\r\n\r\n        /**\r\n         * Create object with keys that gets from each object property.\r\n         *\r\n         * @return {Object}\r\n         */\r\n        indexBy: function (key) {\r\n            return _.indexBy(this(), key);\r\n        },\r\n\r\n        /**\r\n         * Returns a copy of the array with all instances of the values removed.\r\n         *\r\n         * @return {Array}\r\n         */\r\n        without: function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n\r\n            args.unshift(this());\r\n\r\n            return _.without.apply(_, args);\r\n        },\r\n\r\n        /**\r\n         * Returns the first element of an array.\r\n         *\r\n         * @return {*}\r\n         */\r\n        first: function () {\r\n            return _.first(this());\r\n        },\r\n\r\n        /**\r\n         * Returns the last element of an array\r\n         *\r\n         * @return {*}\r\n         */\r\n        last: function () {\r\n            return _.last(this());\r\n        },\r\n\r\n        /**\r\n         * Iterate and pick provided properties.\r\n         *\r\n         * @return {Array}\r\n         */\r\n        pluck: function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n\r\n            args.unshift(this());\r\n\r\n            return _.pluck.apply(_, args);\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/knockout/template/engine.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    './observable_source',\r\n    './renderer',\r\n    '../../logger/console-logger'\r\n], function ($, ko, _, Source, renderer, consoleLogger) {\r\n    'use strict';\r\n\r\n    var RemoteTemplateEngine,\r\n        NativeTemplateEngine = ko.nativeTemplateEngine,\r\n        sources = {};\r\n\r\n    /**\r\n     * Remote template engine class. Is used to be able to load remote templates via knockout template binding.\r\n     */\r\n    RemoteTemplateEngine = function () {\r\n        // Instance reference for closure.\r\n        var engine = this,\r\n        // Decorate the builtin Knockout \"template\" binding to track synchronous template renders.\r\n        origUpdate = ko.bindingHandlers.template.update;\r\n\r\n        /**\r\n         * Counter to track the number of currently running render tasks (both synchronous and asynchronous).\r\n         * @type {Number}\r\n         * @private\r\n         */\r\n        this._rendersOutstanding = 0;\r\n\r\n        /**\r\n         * Use a jQuery object as an event bus (but any event emitter with on/off/emit methods could work)\r\n         * @type {jQuery}\r\n         * @private\r\n         */\r\n        this._events = $(this);\r\n\r\n        /**\r\n         * Rendered templates\r\n         * @type {Object}\r\n         * @private\r\n         */\r\n        this._templatesRendered = {};\r\n\r\n        /*eslint-disable no-unused-vars*/\r\n        /**\r\n         * Decorate update method\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function} valueAccessor\r\n         * @param {Object} allBindings\r\n         * @param {Object} viewModel\r\n         * @param {ko.bindingContext} bindingContext\r\n         * @returns {*}\r\n         */\r\n        ko.bindingHandlers.template.update = function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            /*eslint-enable no-unused-vars*/\r\n            var options = ko.utils.peekObservable(valueAccessor()),\r\n                templateName,\r\n                isSync,\r\n                updated;\r\n\r\n            if (typeof options === 'object') {\r\n                if (options.templateEngine && options.templateEngine !== engine) {\r\n                    return origUpdate.apply(this, arguments);\r\n                }\r\n\r\n                if (!options.name) {\r\n                    consoleLogger.error('Could not find template name', options);\r\n                }\r\n                templateName = options.name;\r\n            } else if (typeof options === 'string') {\r\n                templateName = options;\r\n            } else {\r\n                consoleLogger.error('Could not build a template binding', options);\r\n            }\r\n            engine._trackRender(templateName);\r\n            isSync = engine._hasTemplateLoaded(templateName);\r\n            updated = origUpdate.apply(this, arguments);\r\n\r\n            if (isSync) {\r\n                engine._releaseRender(templateName, 'sync');\r\n            }\r\n\r\n            return updated;\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Creates unique template identifier based on template name and it's extenders (optional)\r\n     * @param  {String} templateName\r\n     * @return {String} - unique template identifier\r\n     */\r\n    function createTemplateIdentifier(templateName) {\r\n        return templateName;\r\n    }\r\n\r\n    RemoteTemplateEngine.prototype = new NativeTemplateEngine;\r\n    RemoteTemplateEngine.prototype.constructor = RemoteTemplateEngine;\r\n\r\n    /**\r\n     * When an asynchronous render task begins, increment the internal counter for tracking when renders are complete.\r\n     * @private\r\n     */\r\n    RemoteTemplateEngine.prototype._trackRender = function (templateName) {\r\n        var rendersForTemplate = this._templatesRendered[templateName] !== undefined ?\r\n            this._templatesRendered[templateName] : 0;\r\n\r\n        this._rendersOutstanding++;\r\n        this._templatesRendered[templateName] = rendersForTemplate + 1;\r\n        this._resolveRenderWaits();\r\n    };\r\n\r\n    /**\r\n     * When an asynchronous render task ends, decrement the internal counter for tracking when renders are complete.\r\n     * @private\r\n     */\r\n    RemoteTemplateEngine.prototype._releaseRender = function (templateName) {\r\n        var rendersForTemplate = this._templatesRendered[templateName];\r\n\r\n        this._rendersOutstanding--;\r\n        this._templatesRendered[templateName] = rendersForTemplate - 1;\r\n        this._resolveRenderWaits();\r\n    };\r\n\r\n    /**\r\n     * Check to see if renders are complete and trigger events for listeners.\r\n     * @private\r\n     */\r\n    RemoteTemplateEngine.prototype._resolveRenderWaits = function () {\r\n        if (this._rendersOutstanding === 0) {\r\n            this._events.triggerHandler('finishrender');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get a promise for the end of the current run of renders, both sync and async.\r\n     * @return {jQueryPromise} - promise that resolves when render completes\r\n     */\r\n    RemoteTemplateEngine.prototype.waitForFinishRender = function () {\r\n        var defer = $.Deferred();\r\n\r\n        this._events.one('finishrender', defer.resolve);\r\n\r\n        return defer.promise();\r\n    };\r\n\r\n    /**\r\n     * Returns true if this template has already been asynchronously loaded and will be synchronously rendered.\r\n     * @param {String} templateName\r\n     * @returns {Boolean}\r\n     * @private\r\n     */\r\n    RemoteTemplateEngine.prototype._hasTemplateLoaded = function (templateName) {\r\n        // Sources object will have cached template once makeTemplateSource has run\r\n        return sources.hasOwnProperty(templateName);\r\n    };\r\n\r\n    /**\r\n     * Overrided method of native knockout template engine.\r\n     * Caches template after it's unique name and renders in once.\r\n     * If template name is not typeof string, delegates work to knockout.templateSources.anonymousTemplate.\r\n     * @param  {*} template\r\n     * @param  {HTMLElement} templateDocument - document\r\n     * @param  {Object} options - options, passed to template binding\r\n     * @param  {ko.bindingContext} bindingContext\r\n     * @returns {TemplateSource} Object with methods 'nodes' and 'data'.\r\n     */\r\n    RemoteTemplateEngine.prototype.makeTemplateSource = function (template, templateDocument, options, bindingContext) {\r\n        var engine = this,\r\n            source,\r\n            templateId;\r\n\r\n        if (typeof template === 'string') {\r\n            templateId = createTemplateIdentifier(template);\r\n            source = sources[templateId];\r\n\r\n            if (!source) {\r\n                source = new Source(template);\r\n                source.requestedBy = bindingContext.$data.name;\r\n                sources[templateId] = source;\r\n\r\n                consoleLogger.info('templateStartLoading', {\r\n                    template: templateId,\r\n                    component: bindingContext.$data.name\r\n                });\r\n\r\n                renderer.render(template).then(function (rendered) {\r\n                    consoleLogger.info('templateLoadedFromServer', {\r\n                        template: templateId,\r\n                        component: bindingContext.$data.name\r\n                    });\r\n                    source.nodes(rendered);\r\n                    engine._releaseRender(templateId, 'async');\r\n                }).fail(function () {\r\n                    consoleLogger.error('templateLoadingFail', {\r\n                        template: templateId,\r\n                        component: bindingContext.$data.name\r\n                    });\r\n                });\r\n            }\r\n\r\n            if (source.requestedBy !== bindingContext.$data.name) {\r\n                consoleLogger.info('templateLoadedFromCache', {\r\n                    template: templateId,\r\n                    component: bindingContext.$data.name\r\n                });\r\n            }\r\n\r\n            return source;\r\n        } else if (template.nodeType === 1 || template.nodeType === 8) {\r\n            source = new ko.templateSources.anonymousTemplate(template);\r\n\r\n            return source;\r\n        }\r\n\r\n        throw new Error('Unknown template type: ' + template);\r\n    };\r\n\r\n    /**\r\n     * Overrided method of native knockout template engine.\r\n     * Should return array of html elements.\r\n     * @param  {TemplateSource} templateSource - object with methods 'nodes' and 'data'.\r\n     * @return {Array} - array of html elements\r\n     */\r\n    RemoteTemplateEngine.prototype.renderTemplateSource = function (templateSource) {\r\n        var nodes = templateSource.nodes();\r\n\r\n        return ko.utils.cloneNodes(nodes);\r\n    };\r\n\r\n    /**\r\n     * Overrided method of native knockout template engine.\r\n     * Created in order to invoke makeTemplateSource method with custom set of params.\r\n     * @param  {*} template - template identifier\r\n     * @param  {ko.bindingContext} bindingContext\r\n     * @param  {Object} options - options, passed to template binding\r\n     * @param  {HTMLElement} templateDocument - document\r\n     * @return {Array} - array of html elements\r\n     */\r\n    RemoteTemplateEngine.prototype.renderTemplate = function (template, bindingContext, options, templateDocument) {\r\n        var templateSource = this.makeTemplateSource(template, templateDocument, options, bindingContext);\r\n\r\n        return this.renderTemplateSource(templateSource);\r\n    };\r\n\r\n    return new RemoteTemplateEngine;\r\n});\r\n","Magento_Ui/js/lib/knockout/template/loader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var licenseRegExp   = /<!--[\\s\\S]*?-->/,\r\n        defaultPlugin   = 'text',\r\n        defaultExt      = 'html';\r\n\r\n    /**\r\n     * Checks of provided string contains a file extension.\r\n     *\r\n     * @param {String} str - String to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function hasFileExtension(str) {\r\n        return !!~str.indexOf('.') && !!str.split('.').pop();\r\n    }\r\n\r\n    /**\r\n     * Checks if provided string contains a requirejs's plugin reference.\r\n     *\r\n     * @param {String} str - String to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function hasPlugin(str) {\r\n        return !!~str.indexOf('!');\r\n    }\r\n\r\n    /**\r\n     * Checks if provided string is a full path to the file.\r\n     *\r\n     * @param {String} str - String to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isFullPath(str) {\r\n        return !!~str.indexOf('://');\r\n    }\r\n\r\n    /**\r\n     * Removes license comment from the provided string.\r\n     *\r\n     * @param {String} content - String to be processed.\r\n     * @returns {String}\r\n     */\r\n    function removeLicense(content) {\r\n        return content.replace(licenseRegExp, function (match) {\r\n            return ~match.indexOf('/**') ? '' : match;\r\n        });\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Attempts to extract template by provided path from\r\n         * a DOM element and falls back to a file loading if\r\n         * none of the DOM nodes was found.\r\n         *\r\n         * @param {String} path - Path to the template or a DOM selector.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        loadTemplate: function (path) {\r\n            var content = this.loadFromNode(path),\r\n                defer;\r\n\r\n            if (content) {\r\n                defer = $.Deferred();\r\n\r\n                defer.resolve(content);\r\n\r\n                return defer.promise();\r\n            }\r\n\r\n            return this.loadFromFile(path);\r\n        },\r\n\r\n        /**\r\n         * Loads template from external file by provided\r\n         * path, which will be preliminary formatted.\r\n         *\r\n         * @param {String} path - Path to the template.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        loadFromFile: function (path) {\r\n            var loading = $.Deferred();\r\n\r\n            path = this.formatPath(path);\r\n\r\n            require([path], function (template) {\r\n                template = removeLicense(template);\r\n                loading.resolve(template);\r\n            }, function (err) {\r\n                loading.reject(err);\r\n            });\r\n\r\n            return loading.promise();\r\n        },\r\n\r\n        /**\r\n         * Attempts to extract content of a node found by provided selector.\r\n         *\r\n         * @param {String} selector - Node's selector (not necessary valid).\r\n         * @returns {String|Boolean} If specified node doesn't exists\r\n         *      'false' will be returned, otherwise returns node's content.\r\n         */\r\n        loadFromNode: function (selector) {\r\n            var node;\r\n\r\n            try {\r\n                node =\r\n                    document.getElementById(selector) ||\r\n                    document.querySelector(selector);\r\n\r\n                return node ? node.innerHTML : false;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Adds requirejs's plugin and file extension to\r\n         * to the provided string if it's necessary.\r\n         *\r\n         * @param {String} path - Path to be processed.\r\n         * @returns {String} Formatted path.\r\n         */\r\n        formatPath: function (path) {\r\n            var result = path;\r\n\r\n            if (!hasPlugin(path)) {\r\n                result = defaultPlugin + '!' + result;\r\n            }\r\n\r\n            if (isFullPath(path)) {\r\n                return result;\r\n            }\r\n\r\n            if (!hasFileExtension(path)) {\r\n                result += '.' + defaultExt;\r\n            }\r\n\r\n            return result.replace(/^([^\\/]+)/g, '$1/template');\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/knockout/template/observable_source.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/**\r\n * Is being used by knockout template engine to store template to.\r\n */\r\ndefine([\r\n    'ko',\r\n    'uiClass'\r\n], function (ko, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n\r\n        /**\r\n         * Initializes templateName, _data, nodes properties.\r\n         *\r\n         * @param  {template} template - identifier of template\r\n         */\r\n        initialize: function (template) {\r\n            this.templateName = template;\r\n            this._data = {};\r\n            this.nodes = ko.observable([]);\r\n        },\r\n\r\n        /**\r\n         * Data setter. If only one arguments passed, returns corresponding value.\r\n         * Else, writes into it.\r\n         * @param  {String} key - key to write to or to read from\r\n         * @param  {*} value\r\n         * @return {*} - if 1 arg provided, Returns _data[key] property\r\n         */\r\n        data: function (key, value) {\r\n            if (arguments.length === 1) {\r\n                return this._data[key];\r\n            }\r\n\r\n            this._data[key] = value;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/lib/knockout/template/renderer.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    './loader'\r\n], function ($, _, loader) {\r\n    'use strict';\r\n\r\n    var colonReg       = /\\\\:/g,\r\n        renderedTemplatePromises = {},\r\n        attributes     = {},\r\n        elements       = {},\r\n        globals        = [],\r\n        renderer,\r\n        preset;\r\n\r\n    renderer = {\r\n\r\n        /**\r\n         * Loads template by provided path and\r\n         * than converts it's content to html.\r\n         *\r\n         * @param {String} tmplPath - Path to the template.\r\n         * @returns {jQueryPromise}\r\n         * @alias getRendered\r\n         */\r\n        render: function (tmplPath) {\r\n            var cachedPromise = renderedTemplatePromises[tmplPath];\r\n\r\n            if (!cachedPromise) {\r\n                cachedPromise = renderedTemplatePromises[tmplPath] = loader\r\n                    .loadTemplate(tmplPath)\r\n                    .then(renderer.parseTemplate);\r\n            }\r\n\r\n            return cachedPromise;\r\n        },\r\n\r\n        /**\r\n         * @ignore\r\n         */\r\n        getRendered: function (tmplPath) {\r\n            return renderer.render(tmplPath);\r\n        },\r\n\r\n        /**\r\n         * Parses provided string as html content\r\n         * and returns an array of DOM elements.\r\n         *\r\n         * @param {String} html - String to be processed.\r\n         * @returns {Array}\r\n         */\r\n        parseTemplate: function (html) {\r\n            var fragment = document.createDocumentFragment();\r\n\r\n            $(fragment).append(html);\r\n\r\n            return renderer.normalize(fragment);\r\n        },\r\n\r\n        /**\r\n         * Processes custom attributes and nodes of provided DOM element.\r\n         *\r\n         * @param {HTMLElement} content - Element to be processed.\r\n         * @returns {Array} An array of content's child nodes.\r\n         */\r\n        normalize: function (content) {\r\n            globals.forEach(function (handler) {\r\n                handler(content);\r\n            });\r\n\r\n            return _.toArray(content.childNodes);\r\n        },\r\n\r\n        /**\r\n         * Adds new global content handler.\r\n         *\r\n         * @param {Function} handler - Function which will be invoked for\r\n         *      an every content passed to 'normalize' method.\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        addGlobal: function (handler) {\r\n            if (!_.contains(globals, handler)) {\r\n                globals.push(handler);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified global content handler.\r\n         *\r\n         * @param {Function} handler - Handler to be removed.\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        removeGlobal: function (handler) {\r\n            var index = globals.indexOf(handler);\r\n\r\n            if (~index) {\r\n                globals.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds new custom attribute handler.\r\n         *\r\n         * @param {String} id - Attribute identifier.\r\n         * @param {(Object|Function)} [config={}]\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        addAttribute: function (id, config) {\r\n            var data = {\r\n                name: id,\r\n                binding: id,\r\n                handler: renderer.handlers.attribute\r\n            };\r\n\r\n            if (_.isFunction(config)) {\r\n                data.handler = config;\r\n            } else if (_.isObject(config)) {\r\n                _.extend(data, config);\r\n            }\r\n\r\n            data.id = id;\r\n            attributes[id] = data;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified attribute handler.\r\n         *\r\n         * @param {String} id - Attribute identifier.\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        removeAttribute: function (id) {\r\n            delete attributes[id];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds new custom node handler.\r\n         *\r\n         * @param {String} id - Node identifier.\r\n         * @param {(Object|Function)} [config={}]\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        addNode: function (id, config) {\r\n            var data = {\r\n                name: id,\r\n                binding: id,\r\n                handler: renderer.handlers.node\r\n            };\r\n\r\n            if (_.isFunction(config)) {\r\n                data.handler = config;\r\n            } else if (_.isObject(config)) {\r\n                _.extend(data, config);\r\n            }\r\n\r\n            data.id = id;\r\n            elements[id] = data;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified custom node handler.\r\n         *\r\n         * @param {String} id - Node identifier.\r\n         * @returns {Renderer} Chainable.\r\n         */\r\n        removeNode: function (id) {\r\n            delete elements[id];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided DOM element is a custom node.\r\n         *\r\n         * @param {HTMLElement} node - Node to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isCustomNode: function (node) {\r\n            return _.some(elements, function (elem) {\r\n                return elem.name.toUpperCase() === node.tagName;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Processes custom attributes of a content's child nodes.\r\n         *\r\n         * @param {HTMLElement} content - DOM element to be processed.\r\n         */\r\n        processAttributes: function (content) {\r\n            var repeat;\r\n\r\n            repeat = _.some(attributes, function (attr) {\r\n                var attrName = attr.name,\r\n                    nodes    = content.querySelectorAll('[' + attrName + ']'),\r\n                    handler  = attr.handler;\r\n\r\n                return _.toArray(nodes).some(function (node) {\r\n                    var data = node.getAttribute(attrName);\r\n\r\n                    return handler(node, data, attr) === true;\r\n                });\r\n            });\r\n\r\n            if (repeat) {\r\n                renderer.processAttributes(content);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Processes custom nodes of a provided content.\r\n         *\r\n         * @param {HTMLElement} content - DOM element to be processed.\r\n         */\r\n        processNodes: function (content) {\r\n            var repeat;\r\n\r\n            repeat = _.some(elements, function (element) {\r\n                var nodes   = content.querySelectorAll(element.name),\r\n                    handler = element.handler;\r\n\r\n                return _.toArray(nodes).some(function (node) {\r\n                    var data = node.getAttribute('args');\r\n\r\n                    return handler(node, data, element) === true;\r\n                });\r\n            });\r\n\r\n            if (repeat) {\r\n                renderer.processNodes(content);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wraps provided string in curly braces if it's necessary.\r\n         *\r\n         * @param {String} args - String to be wrapped.\r\n         * @returns {String} Wrapped string.\r\n         */\r\n        wrapArgs: function (args) {\r\n            if (~args.indexOf('\\\\:')) {\r\n                args = args.replace(colonReg, ':');\r\n            } else if (~args.indexOf(':') && !~args.indexOf('}')) {\r\n                args = '{' + args + '}';\r\n            }\r\n\r\n            return args;\r\n        },\r\n\r\n        /**\r\n         * Wraps child nodes of provided DOM element\r\n         * with knockout's comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Node whose children should be wrapped.\r\n         * @param {String} binding - Name of the binding for the opener comment tag.\r\n         * @param {String} data - Data associated with a binding.\r\n         *\r\n         * @example\r\n         *      <div id=\"example\"><span/></div>\r\n         *      wrapChildren(document.getElementById('example'), 'foreach', 'data');\r\n         *      =>\r\n         *      <div id=\"example\">\r\n         *      <!-- ko foreach: data -->\r\n         *          <span></span>\r\n         *      <!-- /ko -->\r\n         *      </div>\r\n         */\r\n        wrapChildren: function (node, binding, data) {\r\n            var tag = this.createComment(binding, data),\r\n                $node = $(node);\r\n\r\n            $node.prepend(tag.open);\r\n            $node.append(tag.close);\r\n        },\r\n\r\n        /**\r\n         * Wraps specified node with knockout's comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Node to be wrapped.\r\n         * @param {String} binding - Name of the binding for the opener comment tag.\r\n         * @param {String} data - Data associated with a binding.\r\n         *\r\n         * @example\r\n         *      <div id=\"example\"></div>\r\n         *      wrapNode(document.getElementById('example'), 'foreach', 'data');\r\n         *      =>\r\n         *      <!-- ko foreach: data -->\r\n         *          <div id=\"example\"></div>\r\n         *      <!-- /ko -->\r\n         */\r\n        wrapNode: function (node, binding, data) {\r\n            var tag = this.createComment(binding, data),\r\n                $node = $(node);\r\n\r\n            $node.before(tag.open);\r\n            $node.after(tag.close);\r\n        },\r\n\r\n        /**\r\n         * Creates knockouts' comment tag for the provided binding.\r\n         *\r\n         * @param {String} binding - Name of the binding.\r\n         * @param {String} data - Data associated with a binding.\r\n         * @returns {Object} Object with an open and close comment elements.\r\n         */\r\n        createComment: function (binding, data) {\r\n            return {\r\n                open: document.createComment(' ko ' + binding + ': ' + data + ' '),\r\n                close: document.createComment(' /ko ')\r\n            };\r\n        }\r\n    };\r\n\r\n    renderer.handlers = {\r\n\r\n        /**\r\n         * Basic node handler. Replaces custom nodes\r\n         * with a corresponding knockout's comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Node to be processed.\r\n         * @param {String} data\r\n         * @param {Object} element\r\n         * @returns {Boolean} True\r\n         *\r\n         * @example Sample syntaxes conversions.\r\n         *      <with args=\"model\">\r\n         *          <span/>\r\n         *      </with>\r\n         *      =>\r\n         *      <!-- ko with: model-->\r\n         *          <span/>\r\n         *      <!-- /ko -->\r\n         */\r\n        node: function (node, data, element) {\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.wrapNode(node, element.binding, data);\r\n            $(node).replaceWith(node.childNodes);\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Base attribute handler. Replaces custom attributes with\r\n         * a corresponding knockouts' data binding.\r\n         *\r\n         * @param {HTMLElement} node - Node to be processed.\r\n         * @param {String} data - Data associated with a binding.\r\n         * @param {Object} attr - Attribute definition.\r\n         *\r\n         * @example Sample syntaxes conversions.\r\n         *      <div text=\"label\"></div>\r\n         *      =>\r\n         *      <div data-bind=\"text: label\"></div>\r\n         */\r\n        attribute: function (node, data, attr) {\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.bindings.add(node, attr.binding, data);\r\n            node.removeAttribute(attr.name);\r\n        },\r\n\r\n        /**\r\n         * Wraps provided node with a knockouts' comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Node that will be wrapped.\r\n         * @param {String} data - Data associated with a binding.\r\n         * @param {Object} attr - Attribute definition.\r\n         *\r\n         * @example\r\n         *      <div outereach=\"data\" class=\"test\"></div>\r\n         *      =>\r\n         *      <!-- ko foreach: data -->\r\n         *          <div class=\"test\"></div>\r\n         *      <!-- /ko -->\r\n         */\r\n        wrapAttribute: function (node, data, attr) {\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.wrapNode(node, attr.binding, data);\r\n            node.removeAttribute(attr.name);\r\n        }\r\n    };\r\n\r\n    renderer.bindings = {\r\n\r\n        /**\r\n         * Appends binding string to the current\r\n         * 'data-bind' attribute of provided node.\r\n         *\r\n         * @param {HTMLElement} node - DOM element whose 'data-bind' attribute will be extended.\r\n         * @param {String} name - Name of a binding.\r\n         * @param {String} data - Data associated with the binding.\r\n         */\r\n        add: function (node, name, data) {\r\n            var bindings = this.get(node);\r\n\r\n            if (bindings) {\r\n                bindings += ', ';\r\n            }\r\n\r\n            bindings += name;\r\n\r\n            if (data) {\r\n                bindings += ': ' + data;\r\n            }\r\n\r\n            this.set(node, bindings);\r\n        },\r\n\r\n        /**\r\n         * Extracts value of a 'data-bind' attribute from provided node.\r\n         *\r\n         * @param {HTMLElement} node - Node whose attribute to be extracted.\r\n         * @returns {String}\r\n         */\r\n        get: function (node) {\r\n            return node.getAttribute('data-bind') || '';\r\n        },\r\n\r\n        /**\r\n         * Sets 'data-bind' attribute of the specified node\r\n         * to the provided value.\r\n         *\r\n         * @param {HTMLElement} node - Node whose attribute will be altered.\r\n         * @param {String} bindings - New value of 'data-bind' attribute.\r\n         */\r\n        set: function (node, bindings) {\r\n            node.setAttribute('data-bind', bindings);\r\n        }\r\n    };\r\n\r\n    renderer\r\n        .addGlobal(renderer.processAttributes)\r\n        .addGlobal(renderer.processNodes);\r\n\r\n    /**\r\n     * Collection of default binding conversions.\r\n     */\r\n    preset = {\r\n        nodes: _.object([\r\n            'if',\r\n            'text',\r\n            'with',\r\n            'scope',\r\n            'ifnot',\r\n            'foreach',\r\n            'component'\r\n        ], Array.prototype),\r\n        attributes: _.object([\r\n            'css',\r\n            'attr',\r\n            'html',\r\n            'with',\r\n            'text',\r\n            'click',\r\n            'event',\r\n            'submit',\r\n            'enable',\r\n            'disable',\r\n            'options',\r\n            'visible',\r\n            'template',\r\n            'hasFocus',\r\n            'textInput',\r\n            'component',\r\n            'uniqueName',\r\n            'optionsText',\r\n            'optionsValue',\r\n            'checkedValue',\r\n            'selectedOptions'\r\n        ], Array.prototype)\r\n    };\r\n\r\n    _.extend(preset.attributes, {\r\n        if: renderer.handlers.wrapAttribute,\r\n        ifnot: renderer.handlers.wrapAttribute,\r\n        innerif: {\r\n            binding: 'if'\r\n        },\r\n        innerifnot: {\r\n            binding: 'ifnot'\r\n        },\r\n        outereach: {\r\n            binding: 'foreach',\r\n            handler: renderer.handlers.wrapAttribute\r\n        },\r\n        foreach: {\r\n            name: 'each'\r\n        },\r\n        value: {\r\n            name: 'ko-value'\r\n        },\r\n        style: {\r\n            name: 'ko-style'\r\n        },\r\n        checked: {\r\n            name: 'ko-checked'\r\n        },\r\n        disabled: {\r\n            name: 'ko-disabled',\r\n            binding: 'disable'\r\n        },\r\n        focused: {\r\n            name: 'ko-focused',\r\n            binding: 'hasFocus'\r\n        },\r\n\r\n        /**\r\n         * Custom 'render' attribute handler function. Wraps child elements\r\n         * of a node with knockout's 'ko template:' comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Element to be processed.\r\n         * @param {String} data - Data specified in 'render' attribute of a node.\r\n         */\r\n        render: function (node, data) {\r\n            data = data || 'getTemplate()';\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.wrapChildren(node, 'template', data);\r\n            node.removeAttribute('render');\r\n        }\r\n    });\r\n\r\n    _.extend(preset.nodes, {\r\n        foreach: {\r\n            name: 'each'\r\n        },\r\n\r\n        /**\r\n         * Custom 'render' node handler function.\r\n         * Replaces node with knockout's 'ko template:' comment tag.\r\n         *\r\n         * @param {HTMLElement} node - Element to be processed.\r\n         * @param {String} data - Data specified in 'args' attribute of a node.\r\n         */\r\n        render: function (node, data) {\r\n            data = data || 'getTemplate()';\r\n            data = renderer.wrapArgs(data);\r\n\r\n            renderer.wrapNode(node, 'template', data);\r\n            $(node).replaceWith(node.childNodes);\r\n        }\r\n    });\r\n\r\n    _.each(preset.attributes, function (data, id) {\r\n        renderer.addAttribute(id, data);\r\n    });\r\n\r\n    _.each(preset.nodes, function (data, id) {\r\n        renderer.addNode(id, data);\r\n    });\r\n\r\n    return renderer;\r\n});\r\n","Magento_Ui/js/lib/logger/console-logger.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './logger',\r\n    './entry-factory',\r\n    './console-output-handler',\r\n    './formatter',\r\n    './message-pool',\r\n    './levels-pool',\r\n    'Magento_Ui/js/lib/core/storage/local',\r\n    'underscore',\r\n    './logger-utils'\r\n], function (Logger, entryFactory, ConsoleHandler, Formatter, messagePoll, levelsPoll, storage, _, LoggerUtils) {\r\n    'use strict';\r\n\r\n    var STORAGE_NAMESPACE = 'CONSOLE_LOGGER';\r\n\r\n    /**\r\n     * Singleton Logger's sub-class instance of which is configured to display its\r\n     * messages to the console. It also provides the support of predefined messages\r\n     * and persists its display level.\r\n     */\r\n    function ConsoleLogger() {\r\n        var formatter = new Formatter(),\r\n            consoleHandler = new ConsoleHandler(formatter),\r\n            savedLevel = storage.get(STORAGE_NAMESPACE),\r\n            utils = new LoggerUtils(this);\r\n\r\n        Logger.call(this, consoleHandler, entryFactory);\r\n\r\n        if (savedLevel) {\r\n            this.displayLevel_ = savedLevel;\r\n        }\r\n\r\n        this.utils = utils;\r\n        this.messages = messagePoll;\r\n        this.levels = levelsPoll.getLevels();\r\n    }\r\n\r\n    _.extend(ConsoleLogger, Logger);\r\n\r\n    ConsoleLogger.prototype = Object.create(Logger.prototype);\r\n    ConsoleLogger.prototype.constructor = ConsoleLogger;\r\n\r\n    /**\r\n     * Overrides parent method to save the provided display level.\r\n     *\r\n     * @override\r\n     */\r\n    ConsoleLogger.prototype.setDisplayLevel = function (level) {\r\n        Logger.prototype.setDisplayLevel.call(this, level);\r\n\r\n        storage.set(STORAGE_NAMESPACE, level);\r\n    };\r\n\r\n    /**\r\n     * Adds the support of predefined messages.\r\n     *\r\n     * @protected\r\n     * @override\r\n     */\r\n    ConsoleLogger.prototype.createEntry_ = function (message, level, data) {\r\n        var code;\r\n\r\n        if (messagePoll.hasMessage(message)) {\r\n            data = data || {};\r\n            code = message;\r\n            message = messagePoll.getMessage(code);\r\n\r\n            data.messageCode = code;\r\n        }\r\n\r\n        return Logger.prototype.createEntry_.call(this, message, level, data);\r\n    };\r\n\r\n    return new ConsoleLogger();\r\n});\r\n","Magento_Ui/js/lib/logger/console-output-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './levels-pool'\r\n], function (logLevels) {\r\n    'use strict';\r\n\r\n    var levels = logLevels.getLevels();\r\n\r\n    /**\r\n     * @param {LogFormatter} formatter\r\n     */\r\n    function ConsoleOutputHandler(formatter) {\r\n        /**\r\n         * @protected\r\n         * @type {LogFormatter}\r\n         */\r\n        this.formatter_ = formatter;\r\n    }\r\n\r\n    /**\r\n     * Display data of the provided entry to the console.\r\n     *\r\n     * @param {LogEntry} entry - Entry to be displayed.\r\n     */\r\n    ConsoleOutputHandler.prototype.show = function (entry) {\r\n        var displayString = this.formatter_.process(entry);\r\n\r\n        switch (entry.level) {\r\n            case levels.ERROR:\r\n                console.error(displayString);\r\n                break;\r\n\r\n            case levels.WARN:\r\n                console.warn(displayString);\r\n                break;\r\n\r\n            case levels.INFO:\r\n                console.info(displayString);\r\n                break;\r\n\r\n            case levels.DEBUG:\r\n                console.log(displayString);\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Displays the array of entries.\r\n     *\r\n     * @param {Array<LogEntry>} entries\r\n     */\r\n    ConsoleOutputHandler.prototype.dump = function (entries) {\r\n        entries.forEach(this.show, this);\r\n    };\r\n\r\n    return ConsoleOutputHandler;\r\n});\r\n","Magento_Ui/js/lib/logger/entry-factory.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './entry'\r\n], function (LogEntry) {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * @param {String} message\r\n         * @param {Number} level\r\n         * @param {Object} [messageData]\r\n         * @returns {LogEntry}\r\n         */\r\n        createEntry: function (message, level, messageData) {\r\n            return new LogEntry(message, level, messageData);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/logger/entry.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './levels-pool'\r\n], function (logLevels) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {String} message\r\n     * @param {Number} level\r\n     * @param {Object} [data]\r\n     */\r\n    function LogEntry(message, level, data) {\r\n        /**\r\n         * @readonly\r\n         * @type {Number}\r\n         */\r\n        this.timestamp = Date.now();\r\n\r\n        /**\r\n         * @readonly\r\n         * @type {Number}\r\n         */\r\n        this.level = level;\r\n\r\n        /**\r\n         * @readonly\r\n         * @type {String}\r\n         */\r\n        this.levelName = logLevels.getNameByCode(level);\r\n\r\n        /**\r\n         * @readonly\r\n         * @type {Object}\r\n         */\r\n        this.data = data;\r\n\r\n        /**\r\n         * @readonly\r\n         * @type {String}\r\n         */\r\n        this.message = message;\r\n    }\r\n\r\n    return LogEntry;\r\n});\r\n","Magento_Ui/js/lib/logger/formatter.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'moment',\r\n    'mage/utils/template'\r\n], function (moment, mageTemplate) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {String} dateFormat\r\n     * @param {String} template\r\n     */\r\n    function LogFormatter(dateFormat, template) {\r\n        /**\r\n         * @protected\r\n         * @type {String}\r\n         */\r\n        this.dateFormat_ = 'YYYY-MM-DD hh:mm:ss';\r\n\r\n        /**\r\n         * @protected\r\n         * @type {String}\r\n         */\r\n        this.template_ = '[${ $.date }] [${ $.entry.levelName }] ${ $.message }';\r\n\r\n        if (dateFormat) {\r\n            this.dateFormat_ = dateFormat;\r\n        }\r\n\r\n        if (template) {\r\n            this.template_ = template;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {LogEntry} entry\r\n     * @returns {String}\r\n     */\r\n    LogFormatter.prototype.process = function (entry) {\r\n        var message = mageTemplate.template(entry.message, entry.data),\r\n            date = moment(entry.timestamp).format(this.dateFormat_);\r\n\r\n        return mageTemplate.template(this.template_, {\r\n            date: date,\r\n            entry: entry,\r\n            message: message\r\n        });\r\n    };\r\n\r\n    return LogFormatter;\r\n});\r\n","Magento_Ui/js/lib/logger/levels-pool.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var LEVELS,\r\n        CODE_MAP;\r\n\r\n    LEVELS = {\r\n        NONE: 0,\r\n        ERROR: 1,\r\n        WARN: 2,\r\n        INFO: 3,\r\n        DEBUG: 4,\r\n        ALL: 5\r\n    };\r\n\r\n    CODE_MAP = _.invert(LEVELS);\r\n\r\n    return {\r\n        /**\r\n         * Returns the list of available log levels.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getLevels: function () {\r\n            return LEVELS;\r\n        },\r\n\r\n        /**\r\n         * Returns name of the log level that matches to the provided code.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getNameByCode: function (code) {\r\n            return CODE_MAP[code];\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/logger/logger-utils.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Utils methods for logger\r\n     * @param {Logger} logger\r\n     */\r\n    function LogUtils(logger) {\r\n        this.logger = logger;\r\n\r\n    }\r\n\r\n    /**\r\n     * Method for logging asynchronous operations\r\n     * @param {Promise} promise\r\n     * @param {Object} config\r\n     */\r\n    LogUtils.prototype.asyncLog = function (promise, config) {\r\n        var levels,\r\n            messages,\r\n            wait;\r\n\r\n        config = config || {};\r\n        levels = config.levels || this.createLevels();\r\n        messages = config.messages || this.createMessages();\r\n        wait = config.wait || 5000;\r\n\r\n        this.logger[levels.requested](messages.requested, config.data);\r\n        setTimeout(function () {\r\n            promise.state() === 'pending' ?\r\n                this.logger[levels.failed](messages.failed, config.data) :\r\n                this.logger[levels.loaded](messages.loaded, config.data);\r\n        }.bind(this), wait);\r\n    };\r\n\r\n    /**\r\n     * Method that creates object of messages\r\n     * @param {String} requested - log message that showing that request for class is started\r\n     * @param {String} loaded - log message that show when requested class is loaded\r\n     * @param {String} failed - log message that show when requested class is failed\r\n     * @returns {Object}\r\n     */\r\n    LogUtils.prototype.createMessages = function (requested, loaded, failed) {\r\n        return {\r\n            requested: requested || '',\r\n            loaded: loaded || '',\r\n            failed: failed || ''\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Method that creates object of log levels\r\n     * @param {String} requested - log message that showing that request for class is started\r\n     * @param {String} loaded - log message that show when requested class is loaded\r\n     * @param {String} failed - log message that show when requested class is failed\r\n     * @returns {Object}\r\n     */\r\n    LogUtils.prototype.createLevels = function (requested, loaded, failed) {\r\n        return {\r\n            requested: requested || 'info',\r\n            loaded: loaded || 'info',\r\n            failed: failed || 'warn'\r\n        };\r\n    };\r\n\r\n    return LogUtils;\r\n});\r\n","Magento_Ui/js/lib/logger/logger.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    './levels-pool'\r\n], function (logLevels) {\r\n    'use strict';\r\n\r\n    var levels = logLevels.getLevels();\r\n\r\n    /**\r\n     * @param {LogOutputHandler} outputHandler\r\n     * @param {LogEntryFactory} entryFactory\r\n     */\r\n    function Logger(outputHandler, entryFactory) {\r\n        /**\r\n         * An array of log entries.\r\n         *\r\n         * @protected\r\n         * @type {Array<LogEntry>}\r\n         */\r\n        this.entries_ = [];\r\n\r\n        /**\r\n         * Current display level.\r\n         *\r\n         * @protected\r\n         * @type {Number}\r\n         */\r\n        this.displayLevel_ = levels.ERROR;\r\n\r\n        /**\r\n         * An array of display criteria.\r\n         *\r\n         * @protected\r\n         * @type {Array<LogCriteria>}\r\n         */\r\n        this.displayCriteria_ = [];\r\n\r\n        /**\r\n         * @protected\r\n         * @type {LogEntryFactory}\r\n         */\r\n        this.entryFactory_ = entryFactory;\r\n\r\n        /**\r\n         * @protected\r\n         * @type {Array<LogOutputHandler>}\r\n         */\r\n        this.outputHandlers_ = [outputHandler];\r\n\r\n        this.addDisplayCriteria(this.matchesLevel_);\r\n    }\r\n\r\n    /**\r\n     * Swaps current display level with the provided one.\r\n     *\r\n     * @param {Number} level - Level's code.\r\n     */\r\n    Logger.prototype.setDisplayLevel = function (level) {\r\n        var levelName = logLevels.getNameByCode(level);\r\n\r\n        if (!levelName) {\r\n            throw new TypeError('The provided level is not defined in the levels list.');\r\n        }\r\n\r\n        this.displayLevel_ = level;\r\n    };\r\n\r\n    /**\r\n     * Sets up the criteria by which log entries will be filtered out from the output.\r\n     *\r\n     * @param {LogCriteria} criteria\r\n     */\r\n    Logger.prototype.addDisplayCriteria = function (criteria) {\r\n        this.displayCriteria_.push(criteria);\r\n    };\r\n\r\n    /**\r\n     * Removes previously defined criteria.\r\n     *\r\n     * @param {LogCriteria} criteria\r\n     */\r\n    Logger.prototype.removeDisplayCriteria = function (criteria) {\r\n        var index = this.displayCriteria_.indexOf(criteria);\r\n\r\n        if (~index) {\r\n            this.displayCriteria_.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {String} message\r\n     * @param {Object} [messageData]\r\n     * @returns {LogEntry}\r\n     */\r\n    Logger.prototype.error = function (message, messageData) {\r\n        return this.log_(message, levels.ERROR, messageData);\r\n    };\r\n\r\n    /**\r\n     * @param {String} message\r\n     * @param {Object} [messageData]\r\n     * @returns {LogEntry}\r\n     */\r\n    Logger.prototype.warn = function (message, messageData) {\r\n        return this.log_(message, levels.WARN, messageData);\r\n    };\r\n\r\n    /**\r\n     * @param {String} message\r\n     * @param {Object} [messageData]\r\n     * @returns {LogEntry}\r\n     */\r\n    Logger.prototype.info = function (message, messageData) {\r\n        return this.log_(message, levels.INFO, messageData);\r\n    };\r\n\r\n    /**\r\n     * @param {String} message\r\n     * @param {Object} [messageData]\r\n     * @returns {LogEntry}\r\n     */\r\n    Logger.prototype.debug = function (message, messageData) {\r\n        return this.log_(message, levels.DEBUG, messageData);\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     * @param {String} message\r\n     * @param {Number} level\r\n     * @param {Object} [messageData]\r\n     * @returns {LogEntry}\r\n     */\r\n    Logger.prototype.log_ = function (message, level, messageData) {\r\n        var entry = this.createEntry_(message, level, messageData);\r\n\r\n        this.entries_.push(entry);\r\n\r\n        if (this.matchesCriteria_(entry)) {\r\n            this.processOutput_(entry);\r\n        }\r\n\r\n        return entry;\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     * @param {String} message\r\n     * @param {Number} level\r\n     * @param {Object} [messageData]\r\n     * @returns {LogEntry}\r\n     */\r\n    Logger.prototype.createEntry_ = function (message, level, messageData) {\r\n        return this.entryFactory_.createEntry(message, level, messageData);\r\n    };\r\n\r\n    /**\r\n     * Returns an array of log entries that have been added to the logger.\r\n     *\r\n     * @param {LogCriteria} [criteria] - Optional filter criteria.\r\n     * @returns {Array<LogEntry>}\r\n     */\r\n    Logger.prototype.getEntries = function (criteria) {\r\n        if (criteria) {\r\n            return this.entries_.filter(criteria);\r\n        }\r\n\r\n        return this.entries_;\r\n    };\r\n\r\n    /**\r\n     * @param {LogCriteria} [criteria]\r\n     */\r\n    Logger.prototype.dump = function (criteria) {\r\n        var entries;\r\n\r\n        if (!criteria) {\r\n            criteria = this.matchesCriteria_;\r\n        }\r\n\r\n        entries = this.entries_.filter(criteria, this);\r\n\r\n        this.outputHandlers_.forEach(function (handler) {\r\n            handler.dump(entries);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     * @param {LogEntry} entry\r\n     */\r\n    Logger.prototype.processOutput_ = function (entry) {\r\n        this.outputHandlers_.forEach(function (handler) {\r\n            handler.show(entry);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     * @param {LogEntry} entry\r\n     * @returns {Boolean}\r\n     */\r\n    Logger.prototype.matchesCriteria_ = function (entry) {\r\n        return this.displayCriteria_.every(function (criteria) {\r\n            return criteria.call(this, entry);\r\n        }, this);\r\n    };\r\n\r\n    /**\r\n     * Checks that the level of provided entry passes the \"displayLevel_\" threshold.\r\n     *\r\n     * @protected\r\n     * @param {LogEntry} entry - Entry to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    Logger.prototype.matchesLevel_ = function (entry) {\r\n        return entry.level <= this.displayLevel_;\r\n    };\r\n\r\n    return Logger;\r\n});\r\n","Magento_Ui/js/lib/logger/message-pool.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    var MESSAGES = {\r\n        templateStartLoading:\r\n            'The \"${ $.template }\" template requested by  the \"${$.component}\" component started loading.',\r\n        templateLoadedFromServer:\r\n            'The \"${ $.template }\" template requested by the \"${$.component}\" component  was loaded from server.\"',\r\n        templateLoadedFromCache:\r\n            'The \"${ $.template }\" template  requested by the \"${$.component}\" component was loaded from cache.\"',\r\n        templateLoadingFail: 'Failed to load the \"${ $.template }\" template requested by \"${$.component}\".',\r\n        componentStartInitialization:\r\n            'Component \"${$.component}\" start initialization with instance name \"${$.componentName}\".',\r\n        componentStartLoading: ' Started loading the \"${$.component}\" component.',\r\n        componentFinishLoading: 'The \"${$.component}\" component was loaded.',\r\n        componentLoadingFail: 'Failed to load the \"${$.component}\" component.',\r\n        depsLoadingFail: 'Could not get the declared \"${$.deps}\" dependency for the \"${$.component}\" instance.',\r\n        depsStartRequesting: 'Requesting the \"${$.deps}\" dependency for the \"${$.component}\" instance.',\r\n        depsFinishRequesting: 'The \"${$.deps}\" dependency for the \"${$.component}\" instance was received.',\r\n        requestingComponent: 'Requesting the \"${$.component}\" component.',\r\n        requestingComponentIsLoaded: 'The requested \"${$.component}\" component was received.',\r\n        requestingComponentIsFailed: 'Could not get the requested \"${$.component}\" component.'\r\n    };\r\n\r\n    return {\r\n        /**\r\n         * Returns message that matches the provided code.\r\n         *\r\n         * @param {String} code - Message's identifier\r\n         * @returns {String}\r\n         */\r\n        getMessage: function (code) {\r\n            return MESSAGES[code];\r\n        },\r\n\r\n        /**\r\n         * Adds a new message to the poll.\r\n         *\r\n         * @param {String} code - Message's identifier.\r\n         * @param {String} message - Text of the message\r\n         */\r\n        addMessage: function (code, message) {\r\n            MESSAGES[code] = message;\r\n        },\r\n\r\n        /**\r\n         * Tells whether message with provide code exists in the poll.\r\n         *\r\n         * @param {String} code - Message's identifier.\r\n         * @returns {Boolean}\r\n         */\r\n        hasMessage: function (code) {\r\n            return MESSAGES.hasOwnProperty(code);\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/registry/registry.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    var privateData = new WeakMap();\r\n\r\n    /**\r\n     * Extracts private item storage associated\r\n     * with a provided registry instance.\r\n     *\r\n     * @param {Object} container\r\n     * @returns {Object}\r\n     */\r\n    function getItems(container) {\r\n        return privateData.get(container).items;\r\n    }\r\n\r\n    /**\r\n     * Extracts private requests array associated\r\n     * with a provided registry instance.\r\n     *\r\n     * @param {Object} container\r\n     * @returns {Array}\r\n     */\r\n    function getRequests(container) {\r\n        return privateData.get(container).requests;\r\n    }\r\n\r\n    /**\r\n     * Wrapper function used for convenient access to the elements.\r\n     * See 'async' method for examples of usage and comparison\r\n     * with a regular 'get' method.\r\n     *\r\n     * @param {(String|Object|Function)} name - Key of the requested element.\r\n     * @param {Registry} registry - Instance of a registry\r\n     *      where to search for the element.\r\n     * @param {(Function|String)} [method] - Optional callback function\r\n     *      or a name of the elements' method which\r\n     *      will be invoked when element is available in registry.\r\n     * @returns {*}\r\n     */\r\n    function async(name, registry, method) {\r\n        var args = _.toArray(arguments).slice(3);\r\n\r\n        if (_.isString(method)) {\r\n            registry.get(name, function (component) {\r\n                component[method].apply(component, args);\r\n            });\r\n        } else if (_.isFunction(method)) {\r\n            registry.get(name, method);\r\n        } else if (!args.length) {\r\n            return registry.get(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks that every property of the query object\r\n     * is present and equal to the corresponding\r\n     * property in target object.\r\n     * Note that non-strict comparison is used.\r\n     *\r\n     * @param {Object} query - Query object.\r\n     * @param {Object} target - Target object.\r\n     * @returns {Boolean}\r\n     */\r\n    function compare(query, target) {\r\n        var matches = true,\r\n            index,\r\n            keys,\r\n            key;\r\n\r\n        if (!_.isObject(query) || !_.isObject(target)) {\r\n            return false;\r\n        }\r\n\r\n        keys = Object.getOwnPropertyNames(query);\r\n        index = keys.length;\r\n\r\n        while (matches && index--) {\r\n            key = keys[index];\r\n\r\n            /* eslint-disable eqeqeq */\r\n            if (target[key] != query[key]) {\r\n                matches = false;\r\n            }\r\n\r\n            /* eslint-enable eqeqeq */\r\n        }\r\n\r\n        return matches;\r\n    }\r\n\r\n    /**\r\n     * Explodes incoming string into object if\r\n     * string is defined as a set of key = value pairs.\r\n     *\r\n     * @param {(String|*)} query - String to be processed.\r\n     * @returns {Object|*} Either created object or an unmodified incoming\r\n     *      value if conversion was not possible.\r\n     * @example Sample conversions.\r\n     *      'key = value, key2 = value2'\r\n     *      => {key: 'value', key2: 'value2'}\r\n     */\r\n    function explode(query) {\r\n        var result = {},\r\n            index,\r\n            data;\r\n\r\n        if (typeof query !== 'string' || !~query.indexOf('=')) {\r\n            return query;\r\n        }\r\n\r\n        query = query.split(',');\r\n        index = query.length;\r\n\r\n        while (index--) {\r\n            data = query[index].split('=');\r\n\r\n            result[data[0].trim()] = data[1].trim();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Extracts items from the provided data object\r\n     * which matches specified search criteria.\r\n     *\r\n     * @param {Object} data - Data object where to perform a lookup.\r\n     * @param {(String|Object|Function)} query - Search criteria.\r\n     * @param {Boolean} findAll - Flag that defines whether to\r\n     *      search for all applicable items or to stop on a first found entry.\r\n     * @returns {Array|Object|*}\r\n     */\r\n    function find(data, query, findAll) {\r\n        var iterator,\r\n            item;\r\n\r\n        query = explode(query);\r\n\r\n        if (typeof query === 'string') {\r\n            item = data[query];\r\n\r\n            if (findAll) {\r\n                return item ? [item] : [];\r\n            }\r\n\r\n            return item;\r\n        }\r\n\r\n        iterator = !_.isFunction(query) ?\r\n            compare.bind(null, query) :\r\n            query;\r\n\r\n        return findAll ?\r\n            _.filter(data, iterator) :\r\n            _.find(data, iterator);\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    function Registry() {\r\n        var data = {\r\n            items: {},\r\n            requests: []\r\n        };\r\n\r\n        this._updateRequests = _.debounce(this._updateRequests.bind(this), 10);\r\n        privateData.set(this, data);\r\n    }\r\n\r\n    Registry.prototype = {\r\n        constructor: Registry,\r\n\r\n        /**\r\n         * Retrieves item from registry which matches specified search criteria.\r\n         *\r\n         * @param {(Object|String|Function|Array)} query - Search condition (see examples).\r\n         * @param {Function} [callback] - Callback that will be invoked when\r\n         *      all of the requested items are available.\r\n         * @returns {*}\r\n         *\r\n         * @example Requesting item by it's name.\r\n         *      var obj = {index: 'test', sample: true};\r\n         *\r\n         *      registry.set('first', obj);\r\n         *      registry.get('first') === obj;\r\n         *      => true\r\n         *\r\n         * @example Requesting item with a specific properties.\r\n         *      registry.get('sample = 1, index = test') === obj;\r\n         *      => true\r\n         *      registry.get('sample = 0, index = foo') === obj;\r\n         *      => false\r\n         *\r\n         * @example Declaring search criteria as an object.\r\n         *      registry.get({sample: true}) === obj;\r\n         *      => true;\r\n         *\r\n         * @example Providing custom search handler.\r\n         *      registry.get(function (item) { return item.sample === true; }) === obj;\r\n         *      => true\r\n         *\r\n         * @example Sample asynchronous request declaration.\r\n         *      registry.get('index = test', function (item) {});\r\n         *\r\n         * @example Requesting multiple elements.\r\n         *      registry.set('second', {index: 'test2'});\r\n         *      registry.get(['first', 'second'], function (first, second) {});\r\n         */\r\n        get: function (query, callback) {\r\n            if (typeof callback !== 'function') {\r\n                return find(getItems(this), query);\r\n            }\r\n\r\n            this._addRequest(query, callback);\r\n        },\r\n\r\n        /**\r\n         * Sets provided item to the registry.\r\n         *\r\n         * @param {String} id - Item's identifier.\r\n         * @param {*} item - Item's data.\r\n         * returns {Registry} Chainable.\r\n         */\r\n        set: function (id, item) {\r\n            getItems(this)[id] = item;\r\n\r\n            this._updateRequests();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes specified item from registry.\r\n         * Note that search query is not applicable.\r\n         *\r\n         * @param {String} id - Item's identifier.\r\n         * @returns {Registry} Chainable.\r\n         */\r\n        remove: function (id) {\r\n            delete getItems(this)[id];\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Retrieves a collection of elements that match\r\n         * provided search criteria.\r\n         *\r\n         * @param {(Object|String|Function)} query - Search query.\r\n         *      See 'get' method for the syntax examples.\r\n         * @returns {Array} Found elements.\r\n         */\r\n        filter: function (query) {\r\n            return find(getItems(this), query, true);\r\n        },\r\n\r\n        /**\r\n         * Checks that at least one element in collection\r\n         * matches provided search criteria.\r\n         *\r\n         * @param {(Object|String|Function)} query - Search query.\r\n         *      See 'get' method for the syntax examples.\r\n         * @returns {Boolean}\r\n         */\r\n        has: function (query) {\r\n            return !!this.get(query);\r\n        },\r\n\r\n        /**\r\n         * Checks that registry contains a provided item.\r\n         *\r\n         * @param {*} item - Item to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        contains: function (item) {\r\n            return _.contains(getItems(this), item);\r\n        },\r\n\r\n        /**\r\n         * Extracts identifier of an item if it's present in registry.\r\n         *\r\n         * @param {*} item - Item whose identifier will be extracted.\r\n         * @returns {String|Undefined}\r\n         */\r\n        indexOf: function (item) {\r\n            return _.findKey(getItems(this), function (elem) {\r\n                return item === elem;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Same as a 'get' method except that it returns\r\n         * a promise object instead of invoking provided callback.\r\n         *\r\n         * @param {(String|Function|Object|Array)} query - Search query.\r\n         *      See 'get' method for the syntax examples.\r\n         * @returns {jQueryPromise}\r\n         */\r\n        promise: function (query) {\r\n            var defer    = $.Deferred(),\r\n                callback = defer.resolve.bind(defer);\r\n\r\n            this.get(query, callback);\r\n\r\n            return defer.promise();\r\n        },\r\n\r\n        /**\r\n         * Creates a wrapper function over the provided search query\r\n         * in order to provide somehow more convenient access to the\r\n         * registry's items.\r\n         *\r\n         * @param {(String|Object|Function)} query - Search criteria.\r\n         *      See 'get' method for the syntax examples.\r\n         * @returns {Function}\r\n         *\r\n         * @example Comparison with a 'get' method on retrieving items.\r\n         *      var module = registry.async('name');\r\n         *\r\n         *      module();\r\n         *      => registry.get('name');\r\n         *\r\n         * @example Asynchronous request.\r\n         *      module(function (component) {});\r\n         *      => registry.get('name', function (component) {});\r\n         *\r\n         * @example Requesting item and invoking it's method with specified parameters.\r\n         *      module('trigger', true);\r\n         *      => registry.get('name', function (component) {\r\n         *          component.trigger(true);\r\n         *      });\r\n         */\r\n        async: function (query) {\r\n            return async.bind(null, query, this);\r\n        },\r\n\r\n        /**\r\n         * Creates new instance of a Registry.\r\n         *\r\n         * @returns {Registry} New instance.\r\n         */\r\n        create: function () {\r\n            return new Registry;\r\n        },\r\n\r\n        /**\r\n         * Adds new request to the queue or resolves it immediately\r\n         * if all of the required items are available.\r\n         *\r\n         * @private\r\n         * @param {(Object|String|Function|Array)} queries - Search criteria.\r\n         *      See 'get' method for the syntax examples.\r\n         * @param {Function} callback - Callback that will be invoked when\r\n         *      all of the requested items are available.\r\n         * @returns {Registry}\r\n         */\r\n        _addRequest: function (queries, callback) {\r\n            var request;\r\n\r\n            if (!Array.isArray(queries)) {\r\n                queries = queries ? [queries] : [];\r\n            }\r\n\r\n            request = {\r\n                queries: queries.map(explode),\r\n                callback: callback\r\n            };\r\n\r\n            this._canResolve(request) ?\r\n                this._resolveRequest(request) :\r\n                getRequests(this).push(request);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates requests list resolving applicable items.\r\n         *\r\n         * @private\r\n         * @returns {Registry} Chainable.\r\n         */\r\n        _updateRequests: function () {\r\n            getRequests(this)\r\n                .filter(this._canResolve, this)\r\n                .forEach(this._resolveRequest, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Resolves provided request invoking it's callback\r\n         * with items specified in query parameters.\r\n         *\r\n         * @private\r\n         * @param {Object} request - Request object.\r\n         * @returns {Registry} Chainable.\r\n         */\r\n        _resolveRequest: function (request) {\r\n            var requests = getRequests(this),\r\n                items    = request.queries.map(this.get, this),\r\n                index    = requests.indexOf(request);\r\n\r\n            request.callback.apply(null, items);\r\n\r\n            if (~index) {\r\n                requests.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided request can be resolved.\r\n         *\r\n         * @private\r\n         * @param {Object} request - Request object.\r\n         * @returns {Boolean}\r\n         */\r\n        _canResolve: function (request) {\r\n            var queries = request.queries;\r\n\r\n            return queries.every(this.has, this);\r\n        }\r\n    };\r\n\r\n    return new Registry;\r\n});\r\n","Magento_Ui/js/lib/validation/rules.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    './utils',\r\n    'moment',\r\n    'tinycolor',\r\n    'jquery/validate',\r\n    'mage/translate'\r\n], function ($, _, utils, moment, tinycolor) {\r\n    'use strict';\r\n\r\n    /**\r\n     * validate credit card number using mod10\r\n     * @param {String} s\r\n     * @return {Boolean}\r\n     */\r\n    function validateCreditCard(s) {\r\n        // remove non-numerics\r\n        var v = '0123456789',\r\n            w = '',\r\n            i, j, k, m, c, a, x;\r\n\r\n        for (i = 0; i < s.length; i++) {\r\n            x = s.charAt(i);\r\n\r\n            if (v.indexOf(x, 0) !== -1) {\r\n                w += x;\r\n            }\r\n        }\r\n        // validate number\r\n        j = w.length / 2;\r\n        k = Math.floor(j);\r\n        m = Math.ceil(j) - k;\r\n        c = 0;\r\n\r\n        for (i = 0; i < k; i++) {\r\n            a = w.charAt(i * 2 + m) * 2;\r\n            c += a > 9 ? Math.floor(a / 10 + a % 10) : a;\r\n        }\r\n\r\n        for (i = 0; i < k + m; i++) {\r\n            c += w.charAt(i * 2 + 1 - m) * 1;\r\n        }\r\n\r\n        return c % 10 === 0;\r\n    }\r\n\r\n    /**\r\n     * Collection of validation rules including rules from additional-methods.js\r\n     * @type {Object}\r\n     */\r\n    return _.mapObject({\r\n        'min_text_length': [\r\n            function (value, params) {\r\n                return _.isUndefined(value) || value.length === 0 || value.length >= +params;\r\n            },\r\n            $.mage.__('Please enter more or equal than {0} symbols.')\r\n        ],\r\n        'max_text_length': [\r\n            function (value, params) {\r\n                return !_.isUndefined(value) && value.length <= +params;\r\n            },\r\n            $.mage.__('Please enter less or equal than {0} symbols.')\r\n        ],\r\n        'max-words': [\r\n            function (value, params) {\r\n                return utils.isEmpty(value) || utils.stripHtml(value).match(/\\b\\w+\\b/g).length < params;\r\n            },\r\n            $.mage.__('Please enter {0} words or less.')\r\n        ],\r\n        'min-words': [\r\n            function (value, params) {\r\n                return utils.isEmpty(value) || utils.stripHtml(value).match(/\\b\\w+\\b/g).length >= params;\r\n            },\r\n            $.mage.__('Please enter at least {0} words.')\r\n        ],\r\n        'range-words': [\r\n            function (value, params) {\r\n                var match = utils.stripHtml(value).match(/\\b\\w+\\b/g) || [];\r\n\r\n                return utils.isEmpty(value) || match.length >= params[0] &&\r\n                    match.length <= params[1];\r\n            },\r\n            $.mage.__('Please enter between {0} and {1} words.')\r\n        ],\r\n        'letters-with-basic-punc': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^[a-z\\-.,()\\u0027\\u0022\\s]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters or punctuation only please')\r\n        ],\r\n        'alphanumeric': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^\\w+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters, numbers, spaces or underscores only please')\r\n        ],\r\n        'letters-only': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^[a-z]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters only please')\r\n        ],\r\n        'no-whitespace': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^\\S+$/i.test(value);\r\n            },\r\n            $.mage.__('No white space please')\r\n        ],\r\n        'no-marginal-whitespace': [\r\n            function (value) {\r\n                return !/^\\s+|\\s+$/i.test(value);\r\n            },\r\n            $.mage.__('No marginal white space please')\r\n        ],\r\n        'zip-range': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^90[2-5]-\\d{2}-\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx')\r\n        ],\r\n        'integer': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^-?\\d+$/.test(value);\r\n            },\r\n            $.mage.__('A positive or negative non-decimal number please')\r\n        ],\r\n        'vinUS': [\r\n            function (value) {\r\n                if (utils.isEmpty(value)) {\r\n                    return true;\r\n                }\r\n\r\n                if (value.length !== 17) {\r\n                    return false;\r\n                }\r\n                var i, n, d, f, cd, cdv,//eslint-disable-line vars-on-top\r\n                    LL = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],//eslint-disable-line max-len\r\n                    VL = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9],\r\n                    FL = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],\r\n                    rs = 0;\r\n\r\n                for (i = 0; i < 17; i++) {\r\n                    f = FL[i];\r\n                    d = value.slice(i, i + 1);\r\n\r\n                    if (i === 8) {\r\n                        cdv = d;\r\n                    }\r\n\r\n                    if (!isNaN(d)) {\r\n                        d *= f;\r\n                    } else {\r\n                        for (n = 0; n < LL.length; n++) {//eslint-disable-line max-depth\r\n                            if (d.toUpperCase() === LL[n]) {//eslint-disable-line max-depth\r\n                                d = VL[n];\r\n                                d *= f;\r\n\r\n                                if (isNaN(cdv) && n === 8) {//eslint-disable-line max-depth\r\n                                    cdv = LL[n];\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    rs += d;\r\n                }\r\n                cd = rs % 11;\r\n\r\n                if (cd === 10) {\r\n                    cd = 'X';\r\n                }\r\n\r\n                if (cd === cdv) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('The specified vehicle identification number (VIN) is invalid.')\r\n        ],\r\n        'dateITA': [\r\n            function (value) {\r\n                var check = false,\r\n                    re = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/,\r\n                    adata, gg, mm, aaaa, xdata;\r\n\r\n                if (re.test(value)) {\r\n                    adata = value.split('/');\r\n                    gg = parseInt(adata[0], 10);\r\n                    mm = parseInt(adata[1], 10);\r\n                    aaaa = parseInt(adata[2], 10);\r\n                    xdata = new Date(aaaa, mm - 1, gg);\r\n\r\n                    if (xdata.getFullYear() === aaaa &&\r\n                        xdata.getMonth() === mm - 1 &&\r\n                        xdata.getDate() === gg\r\n                    ) {\r\n                        check = true;\r\n                    } else {\r\n                        check = false;\r\n                    }\r\n                } else {\r\n                    check = false;\r\n                }\r\n\r\n                return check;\r\n            },\r\n            $.mage.__('Please enter a correct date')\r\n        ],\r\n        'dateNL': [\r\n            function (value) {\r\n                return /^\\d\\d?[\\.\\/-]\\d\\d?[\\.\\/-]\\d\\d\\d?\\d?$/.test(value);\r\n            },\r\n            $.mage.__('Vul hier een geldige datum in.')\r\n        ],\r\n        'time': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^([01]\\d|2[0-3])(:[0-5]\\d){0,2}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 and 23:59')\r\n        ],\r\n        'time12h': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\s[AP]M))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 am and 12:00 pm')\r\n        ],\r\n        'phoneUS': [\r\n            function (value) {\r\n                value = value.replace(/\\s+/g, '');\r\n\r\n                return utils.isEmpty(value) || value.length > 9 &&\r\n                    value.match(/^(1-?)?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})-?[2-9]\\d{2}-?\\d{4}$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        'phoneUK': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || value.length > 9 &&\r\n                    value.match(/^(\\(?(0|\\+44)[1-9]{1}\\d{1,4}?\\)?\\s?\\d{3,4}\\s?\\d{3,4})$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        'mobileUK': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || value.length > 9 && value.match(/^((0|\\+44)7\\d{3}\\s?\\d{6})$/);\r\n            },\r\n            $.mage.__('Please specify a valid mobile number')\r\n        ],\r\n        'stripped-min-length': [\r\n            function (value, param) {\r\n                return _.isUndefined(value) || value.length === 0 || utils.stripHtml(value).length >= param;\r\n            },\r\n            $.mage.__('Please enter at least {0} characters')\r\n        ],\r\n        'email2': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^((([a-z]|\\d|[!#\\$%&\\u0027\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&\\u0027\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\u0022)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\u0022)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i.test(value);//eslint-disable-line max-len\r\n            },\r\n            $.validator.messages.email\r\n        ],\r\n        'url2': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&\\u0027\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);//eslint-disable-line max-len\r\n            },\r\n            $.validator.messages.url\r\n        ],\r\n        'credit-card-types': [\r\n            function (value, param) {\r\n                var validTypes;\r\n\r\n                if (utils.isEmpty(value)) {\r\n                    return true;\r\n                }\r\n\r\n                if (/[^0-9-]+/.test(value)) {\r\n                    return false;\r\n                }\r\n                value = value.replace(/\\D/g, '');\r\n                validTypes = 0x0000;\r\n\r\n                if (param.mastercard) {\r\n                    validTypes |= 0x0001;\r\n                }\r\n\r\n                if (param.visa) {\r\n                    validTypes |= 0x0002;\r\n                }\r\n\r\n                if (param.amex) {\r\n                    validTypes |= 0x0004;\r\n                }\r\n\r\n                if (param.dinersclub) {\r\n                    validTypes |= 0x0008;\r\n                }\r\n\r\n                if (param.enroute) {\r\n                    validTypes |= 0x0010;\r\n                }\r\n\r\n                if (param.discover) {\r\n                    validTypes |= 0x0020;\r\n                }\r\n\r\n                if (param.jcb) {\r\n                    validTypes |= 0x0040;\r\n                }\r\n\r\n                if (param.unknown) {\r\n                    validTypes |= 0x0080;\r\n                }\r\n\r\n                if (param.all) {\r\n                    validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;\r\n                }\r\n\r\n                if (validTypes & 0x0001 && /^(51|52|53|54|55)/.test(value)) { //mastercard\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0002 && /^(4)/.test(value)) { //visa\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0004 && /^(34|37)/.test(value)) { //amex\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0008 && /^(300|301|302|303|304|305|36|38)/.test(value)) { //dinersclub\r\n                    return value.length === 14;\r\n                }\r\n\r\n                if (validTypes & 0x0010 && /^(2014|2149)/.test(value)) { //enroute\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0020 && /^(6011)/.test(value)) { //discover\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0040 && /^(3)/.test(value)) { //jcb\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) { //jcb\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0080) { //unknown\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        'ipv4': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(value);//eslint-disable-line max-len\r\n            },\r\n            $.mage.__('Please enter a valid IP v4 address.')\r\n        ],\r\n        'ipv6': [\r\n            function (value) {\r\n                return utils.isEmpty(value) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);//eslint-disable-line max-len\r\n            },\r\n            $.mage.__('Please enter a valid IP v6 address.')\r\n        ],\r\n        'pattern': [\r\n            function (value, param) {\r\n                return utils.isEmpty(value) || new RegExp(param).test(value);\r\n            },\r\n            $.mage.__('Invalid format.')\r\n        ],\r\n        'validate-no-html-tags': [\r\n            function (value) {\r\n                return !/<(\\/)?\\w+/.test(value);\r\n            },\r\n            $.mage.__('HTML tags are not allowed.')\r\n        ],\r\n        'validate-select': [\r\n            function (value) {\r\n                return value !== 'none' && value != null && value.length !== 0;\r\n            },\r\n            $.mage.__('Please select an option.')\r\n        ],\r\n        'validate-no-empty': [\r\n            function (value) {\r\n                return !utils.isEmpty(value);\r\n            },\r\n            $.mage.__('Empty Value.')\r\n        ],\r\n        'validate-alphanum-with-spaces': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-zA-Z0-9 ]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or spaces only in this field.')\r\n        ],\r\n        'validate-data': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[A-Za-z]+[A-Za-z0-9_]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.')//eslint-disable-line max-len\r\n        ],\r\n        'validate-street': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) ||\r\n                    /^[ \\w]{3,}([A-Za-z]\\.)?([ \\w]*\\#\\d+)?(\\r\\n| )[ \\w]{3,}/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9), spaces and \"#\" in this field.')\r\n        ],\r\n        'validate-phoneStrict': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        'validate-phoneLax': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) ||\r\n                    /^((\\d[\\-. ]?)?((\\(\\d{3}\\))|\\d{3}))?[\\-. ]?\\d{3}[\\-. ]?\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        'validate-fax': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid fax number (Ex: 123-456-7890).')\r\n        ],\r\n        'validate-email': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i.test(value);//eslint-disable-line max-len\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        'validate-emailSender': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[\\S ]+$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        'validate-password': [\r\n            function (value) {\r\n                var pass;\r\n\r\n                if (value == null) {\r\n                    return false;\r\n                }\r\n\r\n                pass = value.trim();\r\n\r\n                if (!pass.length) {\r\n                    return true;\r\n                }\r\n\r\n                return !(pass.length > 0 && pass.length < 6);\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'validate-admin-password': [\r\n            function (value) {\r\n                var pass;\r\n\r\n                if (value == null) {\r\n                    return false;\r\n                }\r\n\r\n                pass = value.trim();\r\n\r\n                if (pass.length === 0) {\r\n                    return true;\r\n                }\r\n\r\n                if (!/[a-z]/i.test(value) || !/[0-9]/.test(value)) {\r\n                    return false;\r\n                }\r\n\r\n                if (pass.length < 7) {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 7 or more characters, using both numeric and alphabetic.')\r\n        ],\r\n        'validate-customer-password': [\r\n            function (v, elm) {\r\n                var validator = this,\r\n                    counter = 0,\r\n                    passwordMinLength = $(elm).data('password-min-length'),\r\n                    passwordMinCharacterSets = $(elm).data('password-min-character-sets'),\r\n                    pass = v.trim(),\r\n                    result = pass.length >= passwordMinLength;\r\n\r\n                if (result === false) {\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum length of this field must be equal or greater than %1 symbols. Leading and trailing spaces will be ignored.').replace('%1', passwordMinLength);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                if (pass.match(/\\d+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[a-z]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[A-Z]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[^a-zA-Z0-9]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (counter < passwordMinCharacterSets) {\r\n                    result = false;\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum of different classes of characters in password is %1. Classes of characters: Lower Case, Upper Case, Digits, Special Characters.').replace('%1', passwordMinCharacterSets);//eslint-disable-line max-len\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.passwordErrorMessage;\r\n            }\r\n        ],\r\n        'validate-url': [\r\n            function (value) {\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n                value = (value || '').replace(/^\\s+/, '').replace(/\\s+$/, '');\r\n\r\n                return (/^(http|https|ftp):\\/\\/(([A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))(\\.[A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))*)(:(\\d+))?(\\/[A-Z0-9~](([A-Z0-9_~-]|\\.)*[A-Z0-9~]|))*\\/?(.*)?$/i).test(value);//eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. Protocol is required (http://, https:// or ftp://).')\r\n        ],\r\n        'validate-clean-url': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^(http|https|ftp):\\/\\/(([A-Z0-9][A-Z0-9_-]*)(\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(value) || /^(www)((\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(value);//eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. For example http://www.example.com or www.example.com.')\r\n        ],\r\n        'validate-xml-identifier': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[A-Z][A-Z0-9_\\/-]*$/i.test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid XML-identifier (Ex: something_1, block5, id-4).')\r\n        ],\r\n        'validate-ssn': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^\\d{3}-?\\d{2}-?\\d{4}$/.test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid social security number (Ex: 123-45-6789).')\r\n        ],\r\n        'validate-zip-us': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid zip code (Ex: 90602 or 90602-1234).')\r\n        ],\r\n        'validate-date-au': [\r\n            function (value) {\r\n                var regex = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/,\r\n                    d;\r\n\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n\r\n                if (utils.isEmpty(value) || !regex.test(value)) {\r\n                    return false;\r\n                }\r\n                d = new Date(value.replace(regex, '$2/$1/$3'));\r\n\r\n                return parseInt(RegExp.$2, 10) === 1 + d.getMonth() &&\r\n                    parseInt(RegExp.$1, 10) === d.getDate() &&\r\n                    parseInt(RegExp.$3, 10) === d.getFullYear();\r\n\r\n            },\r\n            $.mage.__('Please use this date format: dd/mm/yyyy. For example 17/03/2006 for the 17th of March, 2006.')\r\n        ],\r\n        'validate-currency-dollar': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^\\$?\\-?([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}\\d*(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$/.test(value);//eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid $ amount. For example $100.00.')\r\n        ],\r\n        'validate-not-negative-number': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || !isNaN(utils.parseNumber(value))\r\n                    && value >= 0 && (/^\\s*-?\\d+([,.]\\d+)*\\s*%?\\s*$/).test(value);\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater, without comma in this field.')\r\n        ],\r\n        // validate-not-negative-number should be replaced in all places with this one and then removed\r\n        'validate-zero-or-greater': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || !isNaN(utils.parseNumber(value))\r\n                    && value >= 0 && (/^\\s*-?\\d+([,.]\\d+)*\\s*%?\\s*$/).test(value);\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater, without comma in this field.')\r\n        ],\r\n        'validate-greater-than-zero': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || !isNaN(utils.parseNumber(value))\r\n                    && value > 0 && (/^\\s*-?\\d+([,.]\\d+)*\\s*%?\\s*$/).test(value);\r\n            },\r\n            $.mage.__('Please enter a number greater than 0, without comma in this field.')\r\n        ],\r\n        'validate-css-length': [\r\n            function (value) {\r\n                if (value !== '') {\r\n                    return (/^[0-9]*\\.*[0-9]+(px|pc|pt|ex|em|mm|cm|in|%)?$/).test(value);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please input a valid CSS-length (Ex: 100px, 77pt, 20em, .5ex or 50%).')\r\n        ],\r\n        'validate-number': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) ||\r\n                    !isNaN(utils.parseNumber(value)) &&\r\n                    /^\\s*-?\\d*(?:[.,|'|\\s]\\d+)*(?:[.,|'|\\s]\\d{2})?-?\\s*$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'validate-integer': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || !isNaN(utils.parseNumber(value)) && /^\\s*-?\\d*\\s*$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid integer in this field.')\r\n        ],\r\n        'validate-number-range': [\r\n            function (value, param) {\r\n                var numValue, dataAttrRange, result, range, m;\r\n\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n\r\n                numValue = utils.parseNumber(value);\r\n\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                dataAttrRange = /^(-?[\\d.,]+)?-(-?[\\d.,]+)?$/;\r\n                result = true;\r\n                range = param;\r\n\r\n                if (range) {\r\n                    m = dataAttrRange.exec(range);\r\n\r\n                    if (m) {\r\n                        result = result && utils.isBetween(numValue, m[1], m[2]);\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        'validate-positive-percent-decimal': [\r\n            function (value) {\r\n                var numValue;\r\n\r\n                if (utils.isEmptyNoTrim(value) || !/^\\s*-?\\d*(\\.\\d*)?\\s*$/.test(value)) {\r\n                    return false;\r\n                }\r\n\r\n                numValue = utils.parseNumber(value);\r\n\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                return utils.isBetween(numValue, 0.01, 100);\r\n            },\r\n            $.mage.__('Please enter a valid percentage discount value greater than 0.')\r\n        ],\r\n        'validate-digits': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || !/[^\\d]/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'validate-digits-range': [\r\n            function (value, param) {\r\n                var numValue, dataAttrRange, result, range, m;\r\n\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                }\r\n\r\n                numValue = utils.parseNumber(value);\r\n\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                dataAttrRange = /^(-?\\d+)?-(-?\\d+)?$/;\r\n                result = true;\r\n                range = param;\r\n\r\n                if (range) {\r\n                    m = dataAttrRange.exec(range);\r\n\r\n                    if (m) {\r\n                        result = result && utils.isBetween(numValue, m[1], m[2]);\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        'validate-range': [\r\n            function (value) {\r\n                var minValue, maxValue, ranges;\r\n\r\n                if (utils.isEmptyNoTrim(value)) {\r\n                    return true;\r\n                } else if ($.validator.methods['validate-digits'] && $.validator.methods['validate-digits'](value)) {\r\n                    minValue = maxValue = utils.parseNumber(value);\r\n                } else {\r\n                    ranges = /^(-?\\d+)?-(-?\\d+)?$/.exec(value);\r\n\r\n                    if (ranges) {\r\n                        minValue = utils.parseNumber(ranges[1]);\r\n                        maxValue = utils.parseNumber(ranges[2]);\r\n\r\n                        if (minValue > maxValue) {//eslint-disable-line max-depth\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        'validate-alpha': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-zA-Z]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use letters only (a-z or A-Z) in this field.')\r\n        ],\r\n        'validate-code': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-z]+[a-z0-9_]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use only lowercase letters (a-z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.')//eslint-disable-line max-len\r\n        ],\r\n        'validate-alphanum': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-zA-Z0-9]+$/.test(value);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z) or numbers (0-9) in this field. No spaces or other characters are allowed.')//eslint-disable-line max-len\r\n        ],\r\n        'validate-not-number-first': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[^0-9-\\.].*$/.test(value.trim());\r\n            },\r\n            $.mage.__('First character must be letter.')\r\n        ],\r\n        'validate-date': [\r\n            function (value, params, additionalParams) {\r\n                var test = moment(value, additionalParams.dateFormat);\r\n\r\n                return utils.isEmptyNoTrim(value) || test.isValid();\r\n            },\r\n            $.mage.__('Please enter a valid date.')\r\n        ],\r\n        'validate-date-range': [\r\n            function (value, params) {\r\n                var fromDate = $('input[name*=\"' + params + '\"]').val();\r\n\r\n                return moment.utc(value).unix() >= moment.utc(fromDate).unix() || isNaN(moment.utc(value).unix());\r\n            },\r\n            $.mage.__('Make sure the To Date is later than or the same as the From Date.')\r\n        ],\r\n        'validate-identifier': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^[a-z0-9][a-z0-9_\\/-]+(\\.[a-z0-9_-]+)?$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid URL Key (Ex: \"example-page\", \"example-page.html\" or \"anotherlevel/example-page\").')//eslint-disable-line max-len\r\n        ],\r\n        'validate-trailing-hyphen': [\r\n            function (value) {\r\n                return utils.isEmptyNoTrim(value) || /^(?!-)(?!.*-$).+$/.test(value);\r\n            },\r\n            $.mage.__('Trailing hyphens are not allowed.')\r\n        ],\r\n        'validate-zip-international': [\r\n\r\n            /*function(v) {\r\n            // @TODO: Cleanup\r\n            return Validation.get('IsEmpty').test(v) || /(^[A-z0-9]{2,10}([\\s]{0,1}|[\\-]{0,1})[A-z0-9]{2,10}$)/.test(v);\r\n            }*/\r\n            function () {\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a valid zip code.')\r\n        ],\r\n        'validate-state': [\r\n            function (value) {\r\n                return value !== 0;\r\n            },\r\n            $.mage.__('Please select State/Province.')\r\n        ],\r\n        'less-than-equals-to': [\r\n            function (value, params) {\r\n                value = utils.parseNumber(value);\r\n\r\n                if (isNaN(parseFloat(params))) {\r\n                    params = $(params).val();\r\n                }\r\n\r\n                params = utils.parseNumber(params);\r\n\r\n                if (!isNaN(params) && !isNaN(value)) {\r\n                    this.lteToVal = params;\r\n\r\n                    return value <= params;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            function () {\r\n                return $.mage.__('Please enter a value less than or equal to %s.').replace('%s', this.lteToVal);\r\n            }\r\n        ],\r\n        'greater-than-equals-to': [\r\n            function (value, params) {\r\n                value = utils.parseNumber(value);\r\n\r\n                if (isNaN(parseFloat(params))) {\r\n                    params = $(params).val();\r\n                }\r\n\r\n                params = utils.parseNumber(params);\r\n\r\n                if (!isNaN(params) && !isNaN(value)) {\r\n                    this.gteToVal = params;\r\n\r\n                    return value >= params;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            function () {\r\n                return $.mage.__('Please enter a value greater than or equal to %s.').replace('%s', this.gteToVal);\r\n            }\r\n        ],\r\n        'validate-emails': [\r\n            function (value) {\r\n                var validRegexp, emails, i;\r\n\r\n                if (utils.isEmpty(value)) {\r\n                    return true;\r\n                }\r\n                validRegexp = /^[a-z0-9\\._-]{1,30}@([a-z0-9_-]{1,30}\\.){1,5}[a-z]{2,4}$/i;\r\n                emails = value.split(/[\\s\\n\\,]+/g);\r\n\r\n                for (i = 0; i < emails.length; i++) {\r\n                    if (!validRegexp.test(emails[i].strip())) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter valid email addresses, separated by commas. For example, johndoe@domain.com, johnsmith@domain.com.')//eslint-disable-line max-len\r\n        ],\r\n        'validate-cc-number': [\r\n\r\n            /**\r\n             * Validate credit card number based on mod 10.\r\n             *\r\n             * @param {String} value - credit card number\r\n             * @return {Boolean}\r\n             */\r\n            function (value) {\r\n                if (value) {\r\n                    return validateCreditCard(value);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        'validate-cc-ukss': [\r\n\r\n            /**\r\n             * Validate Switch/Solo/Maestro issue number and start date is filled.\r\n             *\r\n             * @param {String} value - input field value\r\n             * @return {*}\r\n             */\r\n            function (value) {\r\n                return value;\r\n            },\r\n            $.mage.__('Please enter issue number or start date for switch/solo card type.')\r\n        ],\r\n        'required-entry': [\r\n            function (value) {\r\n                return !utils.isEmpty(value);\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'checked': [\r\n            function (value) {\r\n                return value;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'not-negative-amount': [\r\n            function (value) {\r\n                if (value.length) {\r\n                    return (/^\\s*\\d+([,.]\\d+)*\\s*%?\\s*$/).test(value);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter positive number in this field.')\r\n        ],\r\n        'validate-per-page-value-list': [\r\n            function (value) {\r\n                var isValid = true,\r\n                    values = value.split(','),\r\n                    i;\r\n\r\n                if (utils.isEmpty(value)) {\r\n                    return isValid;\r\n                }\r\n\r\n                for (i = 0; i < values.length; i++) {\r\n                    if (!/^[0-9]+$/.test(values[i])) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('Please enter a valid value, ex: 10,20,30')\r\n        ],\r\n        'validate-new-password': [\r\n            function (value) {\r\n                if ($.validator.methods['validate-password'] && !$.validator.methods['validate-password'](value)) {\r\n                    return false;\r\n                }\r\n\r\n                if (utils.isEmpty(value) && value !== '') {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'validate-item-quantity': [\r\n            function (value, params) {\r\n                var validator = this,\r\n                    result = false,\r\n                    // obtain values for validation\r\n                    qty = utils.parseNumber(value),\r\n                    isMinAllowedValid = typeof params.minAllowed === 'undefined' ||\r\n                        qty >= utils.parseNumber(params.minAllowed),\r\n                    isMaxAllowedValid = typeof params.maxAllowed === 'undefined' ||\r\n                        qty <= utils.parseNumber(params.maxAllowed),\r\n                    isQtyIncrementsValid = typeof params.qtyIncrements === 'undefined' ||\r\n                        qty % utils.parseNumber(params.qtyIncrements) === 0;\r\n\r\n                result = qty > 0;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('Please enter a quantity greater than 0.');//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isMinAllowedValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('The fewest you may purchase is %1.').replace('%1', params.minAllowed);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isMaxAllowedValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('The maximum you may purchase is %1.').replace('%1', params.maxAllowed);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isQtyIncrementsValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('You can buy this product only in quantities of %1 at a time.').replace('%1', params.qtyIncrements);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.itemQtyErrorMessage;\r\n            }\r\n        ],\r\n        'equalTo': [\r\n            function (value, param) {\r\n                return value === $(param).val();\r\n            },\r\n            $.validator.messages.equalTo\r\n        ],\r\n        'validate-file-type': [\r\n            function (name, types) {\r\n                var extension = name.split('.').pop().toLowerCase();\r\n\r\n                if (types && typeof types === 'string') {\r\n                    types = types.split(' ');\r\n                }\r\n\r\n                return !types || !types.length || ~types.indexOf(extension);\r\n            },\r\n            $.mage.__('We don\\'t recognize or support this file extension type.')\r\n        ],\r\n        'validate-max-size': [\r\n            function (size, maxSize) {\r\n                return maxSize === false || size < maxSize;\r\n            },\r\n            $.mage.__('File you are trying to upload exceeds maximum file size limit.')\r\n        ],\r\n        'validate-if-tag-script-exist': [\r\n            function (value) {\r\n                return !value || (/<script\\b[^>]*>([\\s\\S]*?)<\\/script>$/ig).test(value);\r\n            },\r\n            $.mage.__('Please use tag SCRIPT with SRC attribute or with proper content to include JavaScript to the document.')//eslint-disable-line max-len\r\n        ],\r\n        'date_range_min': [\r\n            function (value, minValue, params) {\r\n                return moment.utc(value, params.dateFormat).unix() >= minValue;\r\n            },\r\n            $.mage.__('The date is not within the specified range.')\r\n        ],\r\n        'date_range_max': [\r\n            function (value, maxValue, params) {\r\n                return moment.utc(value, params.dateFormat).unix() <= maxValue;\r\n            },\r\n            $.mage.__('The date is not within the specified range.')\r\n        ],\r\n        'validate-color': [\r\n            function (value) {\r\n                if (value === '') {\r\n                    return true;\r\n                }\r\n\r\n                return tinycolor(value).isValid();\r\n            },\r\n            $.mage.__('Wrong color format. Please specify color in HEX, RGBa, HSVa, HSLa or use color name.')\r\n        ],\r\n        'blacklist-url': [\r\n            function (value, param) {\r\n                return new RegExp(param).test(value);\r\n            },\r\n            $.mage.__('This link is not allowed.')\r\n        ],\r\n        'validate-dob': [\r\n            function (value, param, params) {\r\n                if (value === '') {\r\n                    return true;\r\n                }\r\n\r\n                return moment.utc(value, params.dateFormat).isSameOrBefore(moment.utc());\r\n            },\r\n            $.mage.__('The Date of Birth should not be greater than today.')\r\n        ],\r\n        'validate-no-utf8mb4-characters': [\r\n            function (value) {\r\n                var validator = this,\r\n                    message = $.mage.__('Please remove invalid characters: {0}.'),\r\n                    matches = value.match(/(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g),\r\n                    result = matches === null;\r\n\r\n                if (!result) {\r\n                    validator.charErrorMessage = message.replace('{0}', matches.join());\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.charErrorMessage;\r\n            }\r\n        ]\r\n    }, function (data) {\r\n        return {\r\n            handler: data[0],\r\n            message: data[1]\r\n        };\r\n    });\r\n});\r\n","Magento_Ui/js/lib/validation/utils.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    var utils = {\r\n        /**\r\n         * Check if string is empty with trim.\r\n         *\r\n         * @param {String} value\r\n         * @return {Boolean}\r\n         */\r\n        isEmpty: function (value) {\r\n            return value === '' || value == null || value.length === 0 || /^\\s+$/.test(value);\r\n        },\r\n\r\n        /**\r\n         * Check if string is empty no trim.\r\n         *\r\n         * @param {String} value\r\n         * @return {Boolean}\r\n         */\r\n        isEmptyNoTrim: function (value) {\r\n            return value === '' || value == null || value.length === 0;\r\n        },\r\n\r\n        /**\r\n         * Checks if {value} is between numbers {from} and {to}.\r\n         *\r\n         * @param {String} value\r\n         * @param {String} from\r\n         * @param {String} to\r\n         * @return {Boolean}\r\n         */\r\n        isBetween: function (value, from, to) {\r\n            return (from === null || from === '' || value >= utils.parseNumber(from)) &&\r\n                   (to === null || to === '' || value <= utils.parseNumber(to));\r\n        },\r\n\r\n        /**\r\n         * Parse price string.\r\n         *\r\n         * @param {String} value\r\n         * @return {Number}\r\n         */\r\n        parseNumber: function (value) {\r\n            var isDot, isComa;\r\n\r\n            if (typeof value !== 'string') {\r\n                return parseFloat(value);\r\n            }\r\n            isDot = value.indexOf('.');\r\n            isComa = value.indexOf(',');\r\n\r\n            if (isDot !== -1 && isComa !== -1) {\r\n                if (isComa > isDot) {\r\n                    value = value.replace('.', '').replace(',', '.');\r\n                } else {\r\n                    value = value.replace(',', '');\r\n                }\r\n            } else if (isComa !== -1) {\r\n                value = value.replace(',', '.');\r\n            }\r\n\r\n            return parseFloat(value);\r\n        },\r\n\r\n        /**\r\n         * Removes HTML tags and space characters, numbers and punctuation.\r\n         *\r\n         * @param {String} value -  Value being stripped.\r\n         * @return {String}\r\n         */\r\n        stripHtml: function (value) {\r\n            return value.replace(/<.[^<>]*?>/g, ' ').replace(/&nbsp;|&#160;/gi, ' ')\r\n                .replace(/[0-9.(),;:!?%#$'\"_+=\\/-]*/g, '');\r\n        }\r\n    };\r\n\r\n    return utils;\r\n});\r\n","Magento_Ui/js/lib/validation/validator.js":"/*\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    './rules'\r\n], function (_, rulesList) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Validates provided value be the specified rule.\r\n     *\r\n     * @param {String} id - Rule identifier.\r\n     * @param {*} value - Value to be checked.\r\n     * @param {*} [params]\r\n     * @param {*} additionalParams - additional validation params set by method caller\r\n     * @returns {Object}\r\n     */\r\n    function validate(id, value, params, additionalParams) {\r\n        var rule,\r\n            message,\r\n            valid,\r\n            result = {\r\n                rule: id,\r\n                passed: true,\r\n                message: ''\r\n            };\r\n\r\n        if (_.isObject(params)) {\r\n            message = params.message || '';\r\n        }\r\n\r\n        if (!rulesList[id]) {\r\n            return result;\r\n        }\r\n\r\n        rule    = rulesList[id];\r\n        message = message || rule.message;\r\n        valid   = rule.handler(value, params, additionalParams);\r\n\r\n        if (!valid) {\r\n            params = Array.isArray(params) ?\r\n                params :\r\n                [params];\r\n\r\n            if (typeof message === 'function') {\r\n                message = message.call(rule);\r\n            }\r\n\r\n            message = params.reduce(function (msg, param, idx) {\r\n                return msg.replace(new RegExp('\\\\{' + idx + '\\\\}', 'g'), param);\r\n            }, message);\r\n\r\n            result.passed = false;\r\n            result.message = message;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Validates provided value by a specified set of rules.\r\n     *\r\n     * @param {(String|Object)} rules - One or many validation rules.\r\n     * @param {*} value - Value to be checked.\r\n     * @param {*} additionalParams - additional validation params set by method caller\r\n     * @returns {Object}\r\n     */\r\n    function validator(rules, value, additionalParams) {\r\n        var result;\r\n\r\n        if (typeof rules === 'object') {\r\n            result = {\r\n                passed: true\r\n            };\r\n\r\n            _.every(rules, function (ruleParams, id) {\r\n                if (ruleParams.validate || ruleParams !== false || additionalParams) {\r\n                    result = validate(id, value, ruleParams, additionalParams);\r\n\r\n                    return result.passed;\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            return result;\r\n        }\r\n\r\n        return validate.apply(null, arguments);\r\n    }\r\n\r\n    /**\r\n     * Adds new validation rule.\r\n     *\r\n     * @param {String} id - Rule identifier.\r\n     * @param {Function} handler - Validation function.\r\n     * @param {String} message - Error message.\r\n     */\r\n    validator.addRule = function (id, handler, message) {\r\n        rulesList[id] = {\r\n            handler: handler,\r\n            message: message\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Returns rule object found by provided identifier.\r\n     *\r\n     * @param {String} id - Rule identifier.\r\n     * @returns {Object}\r\n     */\r\n    validator.getRule = function (id) {\r\n        return rulesList[id];\r\n    };\r\n\r\n    return validator;\r\n});\r\n","Magento_Ui/js/lib/view/utils/async.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    'uiRegistry',\r\n    './dom-observer',\r\n    'Magento_Ui/js/lib/knockout/extender/bound-nodes',\r\n    './bindings'\r\n], function (ko, $, _, registry, domObserver, boundedNodes) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if provided value is a dom element.\r\n     *\r\n     * @param {*} node - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isDomElement(node) {\r\n        return typeof node === 'object' && node.tagName && node.nodeType;\r\n    }\r\n\r\n    /**\r\n     * Parses provided string and extracts\r\n     * component, context and selector data from it.\r\n     *\r\n     * @param {String} str - String to be processed.\r\n     * @returns {Object} Data retrieved from string.\r\n     *\r\n     * @example Sample format.\r\n     *      '{{component}}:{{ctx}} -> {{selector}}'\r\n     *\r\n     *      component - Name of component.\r\n     *      ctx - Selector of the root node upon which component is binded.\r\n     *      selector - Selector of DOM elements located\r\n     *          inside of a previously specified context.\r\n     */\r\n    function parseSelector(str) {\r\n        var data    = str.trim().split('->'),\r\n            result  = {},\r\n            componentData;\r\n\r\n        if (data.length === 1) {\r\n            if (!~data[0].indexOf(':')) {\r\n                result.selector = data[0];\r\n            } else {\r\n                componentData = data[0];\r\n            }\r\n        } else {\r\n            componentData   = data[0];\r\n            result.selector = data[1];\r\n        }\r\n\r\n        if (componentData) {\r\n            componentData = componentData.split(':');\r\n\r\n            result.component = componentData[0];\r\n            result.ctx = componentData[1];\r\n        }\r\n\r\n        _.each(result, function (value, key) {\r\n            result[key] = value.trim();\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Internal method used to normalize argumnets passed\r\n     * to 'async' module methods.\r\n     *\r\n     * @param {(String|Object)} selector\r\n     * @param {(HTMLElement|Object|String)} [ctx]\r\n     * @returns {Object}\r\n     */\r\n    function parseData(selector, ctx) {\r\n        var data = {};\r\n\r\n        if (arguments.length === 2) {\r\n            data.selector = selector;\r\n\r\n            if (isDomElement(ctx)) {\r\n                data.ctx = ctx;\r\n            } else {\r\n                data.component = ctx;\r\n                data.ctx = '*';\r\n            }\r\n        } else {\r\n            data = _.isString(selector) ?\r\n                parseSelector(selector) :\r\n                selector;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Creates promise that will be resolved\r\n     * when requested component is registred.\r\n     *\r\n     * @param {String} name - Name of component.\r\n     * @returns {jQueryPromise}\r\n     */\r\n    function waitComponent(name) {\r\n        var deffer = $.Deferred();\r\n\r\n        if (_.isString(name)) {\r\n            registry.get(name, function (component) {\r\n                deffer.resolve(component);\r\n            });\r\n        } else {\r\n            deffer.resolve(name);\r\n        }\r\n\r\n        return deffer.promise();\r\n    }\r\n\r\n    /**\r\n     * Creates listener for the nodes binded to provided component.\r\n     *\r\n     * @param {Object} data - Listener data.\r\n     * @param {Object} component - Associated with nodes component.\r\n     */\r\n    function setRootListener(data, component) {\r\n        boundedNodes.get(component, function (root) {\r\n            if (!$(root).is(data.ctx || '*')) {\r\n                return;\r\n            }\r\n\r\n            data.selector ?\r\n                domObserver.get(data.selector, data.fn, root) :\r\n                data.fn(root);\r\n        });\r\n    }\r\n\r\n    /*eslint-disable no-unused-vars*/\r\n    /**\r\n     * Sets listener for the appearance of elements which\r\n     * matches specified selector data.\r\n     *\r\n     * @param {(String|Object)} selector - Valid css selector or a string\r\n     *      in format acceptable by 'parseSelector' method or an object with\r\n     *      'component', 'selector' and 'ctx' properties.\r\n     * @param {(HTMLElement|Object|String)} [ctx] - Optional context parameter\r\n     *      which might be a DOM element, component instance or components' name.\r\n     * @param {Function} fn - Callback that will be invoked\r\n     *      when required DOM element appears.\r\n     *\r\n     * @example\r\n     *      Creating listener of the 'span' nodes appearance,\r\n     *      located inside of 'div' nodes, which are binded to 'cms_page_listing' component:\r\n     *\r\n     *      $.async('cms_page_listing:div -> span', function (node) {});\r\n     *\r\n     * @example Another syntaxes of the previous example.\r\n     *      $.async({\r\n     *          component: 'cms_page_listing',\r\n     *          ctx: 'div',\r\n     *          selector: 'span'\r\n     *       }, function (node) {});\r\n     *\r\n     * @example Listens for appearance of any child node inside of specified component.\r\n     *      $.async('> *', 'cms_page_lsiting', function (node) {});\r\n     *\r\n     * @example Listens for appearance of 'span' nodes inside of specific context.\r\n     *      $.async('span', document.getElementById('test'), function (node) {});\r\n     */\r\n    $.async = function (selector, ctx, fn) {\r\n        var args = _.toArray(arguments),\r\n            data = parseData.apply(null, _.initial(args));\r\n\r\n        data.fn = _.last(args);\r\n\r\n        if (data.component) {\r\n            waitComponent(data.component)\r\n                .then(setRootListener.bind(null, data));\r\n        } else {\r\n            domObserver.get(data.selector, data.fn, data.ctx);\r\n        }\r\n    };\r\n\r\n    /*eslint-enable no-unused-vars*/\r\n\r\n    _.extend($.async, {\r\n\r\n        /*eslint-disable no-unused-vars*/\r\n        /**\r\n         * Returns collection of elements found by provided selector data.\r\n         *\r\n         * @param {(String|Object)} selector - See 'async' definition.\r\n         * @param {(HTMLElement|Object|String)} [ctx] - See 'async' definition.\r\n         * @returns {Array} An array of DOM elements.\r\n         */\r\n        get: function (selector, ctx) {\r\n            var data        = parseData.apply(null, arguments),\r\n                component   = data.component,\r\n                nodes;\r\n\r\n            if (!component) {\r\n                return $(data.selector, data.ctx).toArray();\r\n            } else if (_.isString(component)) {\r\n                component = registry.get(component);\r\n            }\r\n\r\n            if (!component) {\r\n                return [];\r\n            }\r\n\r\n            nodes = boundedNodes.get(component);\r\n            nodes = $(nodes).filter(data.ctx).toArray();\r\n\r\n            return data.selector ?\r\n                $(data.selector, nodes).toArray() :\r\n                nodes;\r\n        },\r\n\r\n        /*eslint-enable no-unused-vars*/\r\n\r\n        /**\r\n         * Sets removal listener of the specified nodes.\r\n         *\r\n         * @param {(HTMLElement|Array|ArrayLike)} nodes - Nodes whose removal to track.\r\n         * @param {Function} fn - Callback that will be invoked when node is removed.\r\n         */\r\n        remove: function (nodes, fn) {\r\n            domObserver.remove(nodes, fn);\r\n        },\r\n\r\n        parseSelector: parseSelector\r\n    });\r\n\r\n    return $;\r\n});\r\n","Magento_Ui/js/lib/view/utils/bindings.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore'\r\n], function (ko, $, _) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if provided  value is a dom element.\r\n     *\r\n     * @param {*} node - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isDomElement(node) {\r\n        return typeof node === 'object' && node.tagName && node.nodeType;\r\n    }\r\n\r\n    /**\r\n     * Removes from the provided array all non-root nodes located inside\r\n     * of the comment element as long as the closing comment tags.\r\n     *\r\n     * @param {(Array|ArrayLike)} nodes - An array of nodes to be processed.\r\n     * @returns {Array}\r\n     */\r\n    function normalize(nodes) {\r\n        var result;\r\n\r\n        nodes   = _.toArray(nodes);\r\n        result  = nodes.slice();\r\n\r\n        nodes.forEach(function (node) {\r\n            if (node.nodeType === 8) {\r\n                result = !ko.virtualElements.hasBindingValue(node) ?\r\n                    _.without(result, node) :\r\n                    _.difference(result, ko.virtualElements.childNodes(node));\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Extends binding context of each item in the collection.\r\n     *\r\n     * @param {...Object} extenders - Multiple extender objects to be applied to the context.\r\n     * @returns {jQueryCollection} Chainable.\r\n     */\r\n    $.fn.extendCtx = function () {\r\n        var nodes       = normalize(this),\r\n            extenders   = _.toArray(arguments);\r\n\r\n        nodes.forEach(function (node) {\r\n            var ctx  = ko.contextFor(node),\r\n                data = [ctx].concat(extenders);\r\n\r\n            _.extend.apply(_, data);\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Evaluates bindings specified in each DOM element of collection.\r\n     *\r\n     * @param {(HTMLElement|Object)} [ctx] - Context to use for bindings evaluation.\r\n     *      If not specified then current context of a collections' item will be used.\r\n     * @returns {jQueryCollection} Chainable.\r\n     */\r\n    $.fn.applyBindings = function (ctx) {\r\n        var nodes = normalize(this),\r\n            nodeCtx;\r\n\r\n        if (isDomElement(ctx)) {\r\n            ctx = ko.contextFor(ctx);\r\n        }\r\n\r\n        nodes.forEach(function (node) {\r\n            nodeCtx = ctx || ko.contextFor(node);\r\n\r\n            ko.applyBindings(nodeCtx, node);\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Adds specified bindings to each DOM element in\r\n     * collection and evaluates them with provided context.\r\n     *\r\n     * @param {(Object|Function)} data - Either bindings object or a function\r\n     *      which returns bindings data for each element in collection.\r\n     * @param {(HTMLElement|Object)} [ctx] - Context to use for bindings evaluation.\r\n     *      If not specified then current context of a collections' item will be used.\r\n     * @returns {jQueryCollection} Chainable.\r\n     */\r\n    $.fn.bindings = function (data, ctx) {\r\n        var nodes    = normalize(this),\r\n            bindings = data,\r\n            nodeCtx;\r\n\r\n        if (isDomElement(ctx)) {\r\n            ctx = ko.contextFor(ctx);\r\n        }\r\n\r\n        nodes.forEach(function (node) {\r\n            nodeCtx = ctx || ko.contextFor(node);\r\n\r\n            if (_.isFunction(data)) {\r\n                bindings = data(nodeCtx, node);\r\n            }\r\n\r\n            ko.applyBindingsToNode(node, bindings, nodeCtx);\r\n        });\r\n\r\n        return this;\r\n    };\r\n});\r\n","Magento_Ui/js/lib/view/utils/dom-observer.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'domReady!'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    var counter = 1,\r\n        watchers,\r\n        globalObserver,\r\n        disabledNodes = [];\r\n\r\n    watchers = {\r\n        selectors: {},\r\n        nodes: {}\r\n    };\r\n\r\n    /**\r\n     * Checks if node represents an element node (nodeType === 1).\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Boolean}\r\n     */\r\n    function isElementNode(node) {\r\n        return node.nodeType === 1;\r\n    }\r\n\r\n    /**\r\n     * Extracts all child descendant\r\n     * elements of a specified node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Array}\r\n     */\r\n    function extractChildren(node) {\r\n        var children = node.querySelectorAll('*');\r\n\r\n        return _.toArray(children);\r\n    }\r\n\r\n    /**\r\n     * Extracts node identifier. If ID is not specified,\r\n     * then it will be created for the provided node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Number}\r\n     */\r\n    function getNodeId(node) {\r\n        var id = node._observeId;\r\n\r\n        if (!id) {\r\n            id = node._observeId = counter++;\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Invokes callback passing node to it.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @param {Object} data\r\n     */\r\n    function trigger(node, data) {\r\n        var id = getNodeId(node),\r\n            ids = data.invoked;\r\n\r\n        if (_.contains(ids, id)) {\r\n            return;\r\n        }\r\n\r\n        data.callback(node);\r\n        data.invoked.push(id);\r\n    }\r\n\r\n    /**\r\n     * Adds node to the observer list.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Object}\r\n     */\r\n    function createNodeData(node) {\r\n        var nodes   = watchers.nodes,\r\n            id      = getNodeId(node);\r\n\r\n        nodes[id] = nodes[id] || {};\r\n\r\n        return nodes[id];\r\n    }\r\n\r\n    /**\r\n     * Returns data associated with a specified node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @returns {Object|Undefined}\r\n     */\r\n    function getNodeData(node) {\r\n        var nodeId = node._observeId;\r\n\r\n        return watchers.nodes[nodeId];\r\n    }\r\n\r\n    /**\r\n     * Removes data associated with a specified node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     */\r\n    function removeNodeData(node) {\r\n        var nodeId = node._observeId;\r\n\r\n        delete watchers.nodes[nodeId];\r\n    }\r\n\r\n    /**\r\n     * Adds removal listener for a specified node.\r\n     *\r\n     * @param {HTMLElement} node\r\n     * @param {Object} data\r\n     */\r\n    function addRemovalListener(node, data) {\r\n        var nodeData = createNodeData(node);\r\n\r\n        (nodeData.remove = nodeData.remove || []).push(data);\r\n    }\r\n\r\n    /**\r\n     * Adds listener for the nodes which matches specified selector.\r\n     *\r\n     * @param {String} selector - CSS selector.\r\n     * @param {Object} data\r\n     */\r\n    function addSelectorListener(selector, data) {\r\n        var storage = watchers.selectors;\r\n\r\n        (storage[selector] = storage[selector] || []).push(data);\r\n    }\r\n\r\n    /**\r\n     * Calls handlers associated with an added node.\r\n     * Adds listeners for the node removal.\r\n     *\r\n     * @param {HTMLElement} node - Added node.\r\n     */\r\n    function processAdded(node) {\r\n        _.each(watchers.selectors, function (listeners, selector) {\r\n            for (let data of listeners) {\r\n                if (!data.ctx.contains(node) || !$(node, data.ctx).is(selector)) {\r\n                    break;\r\n                }\r\n\r\n                if (data.type === 'add') {\r\n                    trigger(node, data);\r\n                } else if (data.type === 'remove') {\r\n                    addRemovalListener(node, data);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calls handlers associated with a removed node.\r\n     *\r\n     * @param {HTMLElement} node - Removed node.\r\n     */\r\n    function processRemoved(node) {\r\n        var nodeData    = getNodeData(node),\r\n            listeners   = nodeData && nodeData.remove;\r\n\r\n\r\n        if (!listeners) {\r\n            return;\r\n        }\r\n\r\n        for (let data of listeners) {\r\n            trigger(node, data);\r\n        }\r\n        removeNodeData(node);\r\n    }\r\n\r\n    /**\r\n     * Removes all non-element nodes from provided array\r\n     * and appends to it descendant elements.\r\n     *\r\n     * @param {Array} nodes\r\n     * @returns {Array}\r\n     */\r\n    function formNodesList(nodes) {\r\n        var result = [],\r\n            children;\r\n\r\n        nodes = _.toArray(nodes).filter(isElementNode);\r\n\r\n        for (let node of nodes) {\r\n            result.push(node);\r\n\r\n            children = extractChildren(node);\r\n            result.push(...children);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Collects all removed and added nodes from\r\n     * mutation records into separate arrays\r\n     * while removing duplicates between both types of changes.\r\n     *\r\n     * @param {Array} mutations - An array of mutation records.\r\n     * @returns {Object} Object with 'removed' and 'added' nodes arrays.\r\n     */\r\n    function formChangesLists(mutations) {\r\n        var removed = [],\r\n            added = [];\r\n\r\n        for (let record of mutations) {\r\n            removed.push(...record.removedNodes);\r\n            added.push(...record.addedNodes);\r\n        }\r\n\r\n        removed = removed.filter(function (node) {\r\n            var addIndex = added.indexOf(node),\r\n                wasAdded = !!~addIndex;\r\n\r\n            if (wasAdded) {\r\n                added.splice(addIndex, 1);\r\n            }\r\n\r\n            return !wasAdded;\r\n        });\r\n\r\n        return {\r\n            removed: formNodesList(removed),\r\n            added: formNodesList(added)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Verify if the DOM node is a child of a defined disabled node, if so we shouldn't observe provided mutation.\r\n     *\r\n     * @param {Object} mutation - a single mutation\r\n     * @returns {Boolean}\r\n     */\r\n    function shouldObserveMutation(mutation) {\r\n        var isDisabled;\r\n\r\n        if (disabledNodes.length > 0) {\r\n            // Iterate through the disabled nodes and determine if this mutation is occurring inside one of them\r\n            isDisabled = _.find(disabledNodes, function (node) {\r\n                return node === mutation.target || $.contains(node, mutation.target);\r\n            });\r\n\r\n            // If we find a matching node we should not observe the mutation\r\n            return !isDisabled;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Should we observe these mutations? Check the first and last mutation to determine if this is a disabled mutation,\r\n     * we check both the first and last in case one has been removed from the DOM during the process of the mutation.\r\n     *\r\n     * @param {Array} mutations - An array of mutation records.\r\n     * @returns {Boolean}\r\n     */\r\n    function shouldObserveMutations(mutations) {\r\n        var firstMutation,\r\n            lastMutation;\r\n\r\n        if (mutations.length > 0) {\r\n            firstMutation = mutations[0];\r\n            lastMutation = mutations[mutations.length - 1];\r\n\r\n            return shouldObserveMutation(firstMutation) && shouldObserveMutation(lastMutation);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    globalObserver = new MutationObserver(function (mutations) {\r\n        var changes;\r\n\r\n        if (shouldObserveMutations(mutations)) {\r\n            let node;\r\n\r\n            changes = formChangesLists(mutations);\r\n\r\n            for (node of changes.removed) {\r\n                processRemoved(node);\r\n            }\r\n            for (node of changes.added) {\r\n                processAdded(node);\r\n            }\r\n        }\r\n    });\r\n\r\n    globalObserver.observe(document.body, {\r\n        subtree: true,\r\n        childList: true\r\n    });\r\n\r\n    return {\r\n        /**\r\n         * Disable a node from being observed by the mutations, you may want to disable specific aspects of the\r\n         * application which are heavy on DOM changes. The observer running on some actions could cause significant\r\n         * delays and degrade the performance of that specific part of the application exponentially.\r\n         *\r\n         * @param {HTMLElement} node - a HTML node within the document\r\n         */\r\n        disableNode: function (node) {\r\n            disabledNodes.push(node);\r\n        },\r\n\r\n        /**\r\n         * Adds listener for the appearance of nodes that matches provided\r\n         * selector and which are inside of the provided context. Callback will be\r\n         * also invoked on elements which a currently present.\r\n         *\r\n         * @param {String} selector - CSS selector.\r\n         * @param {Function} callback - Function that will invoked when node appears.\r\n         * @param {HTMLElement} [ctx=document.body] - Context inside of which to search for the node.\r\n         */\r\n        get: function (selector, callback, ctx) {\r\n            var data,\r\n                nodes;\r\n\r\n            data = {\r\n                ctx: ctx || document.body,\r\n                type: 'add',\r\n                callback: callback,\r\n                invoked: []\r\n            };\r\n\r\n            nodes = $(selector, data.ctx).toArray();\r\n\r\n            for (let node of nodes) {\r\n                trigger(node, data);\r\n            }\r\n            addSelectorListener(selector, data);\r\n        },\r\n\r\n        /**\r\n         * Adds listener for the nodes removal.\r\n         *\r\n         * @param {(jQueryObject|HTMLElement|Array|String)} selector\r\n         * @param {Function} callback - Function that will invoked when node is removed.\r\n         * @param {HTMLElement} [ctx=document.body] - Context inside of which to search for the node.\r\n         */\r\n        remove: function (selector, callback, ctx) {\r\n            var nodes = [],\r\n                data;\r\n\r\n            data = {\r\n                ctx: ctx || document.body,\r\n                type: 'remove',\r\n                callback: callback,\r\n                invoked: []\r\n            };\r\n\r\n            if (typeof selector === 'object') {\r\n                nodes = !_.isUndefined(selector.length) ?\r\n                    _.toArray(selector) :\r\n                    [selector];\r\n            } else if (_.isString(selector)) {\r\n                nodes = $(selector, ctx).toArray();\r\n\r\n                addSelectorListener(selector, data);\r\n            }\r\n\r\n            for (let node of nodes) {\r\n                addRemovalListener(node, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Removes listeners.\r\n         *\r\n         * @param {String} selector\r\n         * @param {Function} [fn]\r\n         */\r\n        off: function (selector, fn) {\r\n            var selectors = watchers.selectors,\r\n                listeners = selectors[selector];\r\n\r\n            if (selector && !fn) {\r\n                delete selectors[selector];\r\n            } else if (listeners && fn) {\r\n                selectors[selector] = listeners.filter(function (data) {\r\n                    return data.callback !== fn;\r\n                });\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_Ui/js/lib/view/utils/raf.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    var processMap = new WeakMap(),\r\n        origRaf,\r\n        raf;\r\n\r\n    origRaf = window.requestAnimationFrame ||\r\n        window.webkitRequestAnimationFrame ||\r\n        window.mozRequestAnimationFrame ||\r\n        window.onRequestAnimationFrame ||\r\n        window.msRequestAnimationFrame ||\r\n        function (callback) {\r\n            if (typeof callback != 'function') {\r\n                throw new Error('raf argument \"callback\" must be of type function');\r\n            }\r\n            window.setTimeout(callback, 1000 / 60);\r\n        };\r\n\r\n    /**\r\n     * Creates new process object or extracts the\r\n     * the existing one.\r\n     *\r\n     * @param {*} id - Process identifier.\r\n     * @param {Number} fps - Required FPS count.\r\n     * @returns {Object}\r\n     */\r\n    function getProcess(id, fps) {\r\n        var process = processMap.get(id);\r\n\r\n        if (!process) {\r\n            process = {};\r\n            processMap.set(id, process);\r\n        }\r\n\r\n        if (process.fps !== fps) {\r\n            process.fps        = fps;\r\n            process.interval   = 1000 / fps;\r\n            process.update     = Date.now();\r\n        }\r\n\r\n        return process;\r\n    }\r\n\r\n    /**\r\n     * Proxy method which delegates call to the 'requestAnimationFrame'\r\n     * function and optionally can keep track of the FPS with which\r\n     * provided function is called.\r\n     *\r\n     * @param {Function} callback - Callback function to be passed to 'requestAnimationFrame'.\r\n     * @param {Number} [fps] - If specified, will update FPS counter for the provided function.\r\n     * @returns {Number|Boolean} ID of request or a flag which indicates\r\n     *      whether callback fits specified FPS.\r\n     */\r\n    raf = function (callback, fps) {\r\n        var rafId = origRaf(callback);\r\n\r\n        return fps ? raf.tick(callback, fps) : rafId;\r\n    };\r\n\r\n    /**\r\n     * Updates FPS counter for the specified process\r\n     * and returns a flag which indicates whether\r\n     * counter value is equal or greater than the required FPS.\r\n     *\r\n     * @param {*} id - Process identifier.\r\n     * @param {Number} fps - Required FPS count.\r\n     * @returns {Boolean}\r\n     */\r\n    raf.tick = function (id, fps) {\r\n        var process  = getProcess(id, fps),\r\n            now      = Date.now(),\r\n            delta    = now - process.update,\r\n            interval = process.interval;\r\n\r\n        if (fps >= 60 || delta >= interval) {\r\n            process.update = now - delta % interval;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    return raf;\r\n});\r\n","Magento_Ui/js/modal/alert.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'jquery-ui-modules/widget',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/translate'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    $.widget('mage.alert', $.mage.confirm, {\r\n        options: {\r\n            modalClass: 'confirm',\r\n            title: $.mage.__('Attention'),\r\n            actions: {\r\n\r\n                /**\r\n                 * Callback always - called on all actions.\r\n                 */\r\n                always: function () {}\r\n            },\r\n            buttons: [{\r\n                text: $.mage.__('OK'),\r\n                class: 'action-primary action-accept',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function () {\r\n                    this.closeModal(true);\r\n                }\r\n            }]\r\n        },\r\n\r\n        /**\r\n         * Close modal window.\r\n         */\r\n        closeModal: function () {\r\n            this.options.actions.always();\r\n            this.element.on('alertclosed', _.bind(this._remove, this));\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n\r\n    return function (config) {\r\n        return $('<div></div>').html(config.content).alert(config);\r\n    };\r\n});\r\n","Magento_Ui/js/modal/confirm.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/translate',\r\n    'jquery-ui-modules/widget',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($, _, $t) {\r\n    'use strict';\r\n\r\n    $.widget('mage.confirm', $.mage.modal, {\r\n        options: {\r\n            modalClass: 'confirm',\r\n            title: '',\r\n            focus: '.action-accept',\r\n            actions: {\r\n\r\n                /**\r\n                 * Callback always - called on all actions.\r\n                 */\r\n                always: function () {},\r\n\r\n                /**\r\n                 * Callback confirm.\r\n                 */\r\n                confirm: function () {},\r\n\r\n                /**\r\n                 * Callback cancel.\r\n                 */\r\n                cancel: function () {}\r\n            },\r\n            buttons: [{\r\n                text: $t('Cancel'),\r\n                class: 'action-secondary action-dismiss',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function (event) {\r\n                    this.closeModal(event);\r\n                }\r\n            }, {\r\n                text: $t('OK'),\r\n                class: 'action-primary action-accept',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function (event) {\r\n                    this.closeModal(event, true);\r\n                }\r\n            }]\r\n        },\r\n\r\n        /**\r\n         * Create widget.\r\n         */\r\n        _create: function () {\r\n            this._super();\r\n            this.modal.find(this.options.modalCloseBtn).off().on('click', _.bind(this.closeModal, this));\r\n            this.openModal();\r\n        },\r\n\r\n        /**\r\n         * Remove modal window.\r\n         */\r\n        _remove: function () {\r\n            this.modal.remove();\r\n        },\r\n\r\n        /**\r\n         * Open modal window.\r\n         */\r\n        openModal: function () {\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Close modal window.\r\n         */\r\n        closeModal: function (event, result) {\r\n            result = result || false;\r\n\r\n            if (result) {\r\n                this.options.actions.confirm(event);\r\n            } else {\r\n                this.options.actions.cancel(event);\r\n            }\r\n            this.options.actions.always(event);\r\n            this.element.on('confirmclosed', _.bind(this._remove, this));\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n\r\n    return function (config) {\r\n        return $('<div></div>').html(config.content).confirm(config);\r\n    };\r\n});\r\n","Magento_Ui/js/modal/modal-component.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'uiCollection',\r\n    'uiRegistry',\r\n    'underscore',\r\n    './modal'\r\n], function ($, Collection, registry, _) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            template: 'ui/modal/modal-component',\r\n            title: '',\r\n            subTitle: '',\r\n            options: {\r\n                modalClass: '',\r\n                title: '',\r\n                subTitle: '',\r\n                buttons: [],\r\n                keyEventHandlers: {}\r\n            },\r\n            valid: true,\r\n            links: {\r\n                title: 'options.title',\r\n                subTitle: 'options.subTitle'\r\n            },\r\n            listens: {\r\n                state: 'onState',\r\n                title: 'setTitle',\r\n                'options.subTitle': 'setSubTitle'\r\n            },\r\n            modalClass: 'modal-component',\r\n            onCancel: 'closeModal'\r\n        },\r\n\r\n        /**\r\n         * Initializes component.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            _.bindAll(this,\r\n                'initModal',\r\n                'openModal',\r\n                'closeModal',\r\n                'toggleModal',\r\n                'setPrevValues',\r\n                'validate');\r\n            this.initializeContent();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes modal configuration\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            return this._super()\r\n                .initSelector()\r\n                .initModalEvents();\r\n        },\r\n\r\n        /**\r\n         * Configure modal selector\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initSelector: function () {\r\n            var modalClass = this.name.replace(/\\./g, '_');\r\n\r\n            this.contentSelector = '.' + this.modalClass;\r\n            this.options.modalClass = this.options.modalClass + ' ' + modalClass;\r\n            this.rootSelector = '.' + modalClass;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Configure modal keyboard handlers\r\n         * and outer click\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initModalEvents: function () {\r\n            this.options.keyEventHandlers.escapeKey = this.options.outerClickHandler = this[this.onCancel].bind(this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize modal's content components\r\n         */\r\n        initializeContent: function () {\r\n            $.async({\r\n                component: this.name\r\n            }, this.initModal);\r\n        },\r\n\r\n        /**\r\n         * Init toolbar section so other components will be able to place something in it\r\n         */\r\n        initToolbarSection: function () {\r\n            this.set('toolbarSection', this.modal.data('mage-modal').modal.find('header').get(0));\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n            this.observe(['state', 'focused']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Wrap content in a modal of certain type\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initModal: function (element) {\r\n            if (!this.modal) {\r\n                this.overrideModalButtonCallback();\r\n                this.options.modalCloseBtnHandler = this[this.onCancel].bind(this);\r\n                this.modal = $(element).modal(this.options);\r\n                this.initToolbarSection();\r\n\r\n                if (this.waitCbk) {\r\n                    this.waitCbk();\r\n                    this.waitCbk = null;\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Open modal\r\n         */\r\n        openModal: function () {\r\n            if (this.modal) {\r\n                this.state(true);\r\n            } else {\r\n                this.waitCbk = this.openModal;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close modal\r\n         */\r\n        closeModal: function () {\r\n            if (this.modal) {\r\n                this.state(false);\r\n            } else {\r\n                this.waitCbk = this.closeModal;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggle modal\r\n         */\r\n        toggleModal: function () {\r\n            if (this.modal) {\r\n                this.state(!this.state());\r\n            } else {\r\n                this.waitCbk = this.toggleModal;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sets title for modal\r\n         *\r\n         * @param {String} title\r\n         */\r\n        setTitle: function (title) {\r\n            if (this.title !== title) {\r\n                this.title = title;\r\n            }\r\n\r\n            if (this.modal) {\r\n                this.modal.modal('setTitle', title);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sets subTitle for modal\r\n         *\r\n         * @param {String} subTitle\r\n         */\r\n        setSubTitle: function (subTitle) {\r\n            if (this.subTitle !== subTitle) {\r\n                this.subTitle = subTitle;\r\n            }\r\n\r\n            if (this.modal) {\r\n                this.modal.modal('setSubTitle', subTitle);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wrap content in a modal of certain type\r\n         *\r\n         * @param {Boolean} state\r\n         */\r\n        onState: function (state) {\r\n            if (state) {\r\n                this.modal.modal('openModal');\r\n                this.applyData();\r\n            } else {\r\n                this.modal.modal('closeModal');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate everything validatable in modal\r\n         */\r\n        validate: function (elem) {\r\n            if (typeof elem === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            if (typeof elem.validate === 'function') {\r\n                this.valid &= elem.validate().valid;\r\n            } else if (elem.elems) {\r\n                elem.elems().forEach(this.validate, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reset data from provider\r\n         */\r\n        resetData: function () {\r\n            this.elems().forEach(this.resetValue, this);\r\n        },\r\n\r\n        /**\r\n         * Update 'applied' property with data from modal content\r\n         */\r\n        applyData: function () {\r\n            var applied = {};\r\n\r\n            this.elems().forEach(this.gatherValues.bind(this, applied), this);\r\n            this.applied = applied;\r\n        },\r\n\r\n        /**\r\n         * Gather values from modal content\r\n         *\r\n         * @param {Array} applied\r\n         * @param {HTMLElement} elem\r\n         */\r\n        gatherValues: function (applied, elem) {\r\n            if (typeof elem.value === 'function') {\r\n                applied[elem.name] = elem.value();\r\n            } else if (elem.elems) {\r\n                elem.elems().forEach(this.gatherValues.bind(this, applied), this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set to previous values from modal content\r\n         *\r\n         * @param {HTMLElement} elem\r\n         */\r\n        setPrevValues: function (elem) {\r\n            if (typeof elem.value === 'function') {\r\n                this.modal.focus();\r\n                elem.value(this.applied[elem.name]);\r\n            } else if (elem.elems) {\r\n                elem.elems().forEach(this.setPrevValues, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Triggers some method in every modal child elem, if this method is defined\r\n         *\r\n         * @param {Object} action - action configuration,\r\n         * must contain actionName and targetName and\r\n         * can contain params\r\n         */\r\n        triggerAction: function (action) {\r\n            var targetName = action.targetName,\r\n                params = action.params || [],\r\n                actionName = action.actionName,\r\n                target;\r\n\r\n            target = registry.async(targetName);\r\n\r\n            if (target && typeof target === 'function' && actionName) {\r\n                params.unshift(actionName);\r\n                target.apply(target, params);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Override modal buttons callback placeholders with real callbacks\r\n         */\r\n        overrideModalButtonCallback: function () {\r\n            var buttons = this.options.buttons;\r\n\r\n            if (buttons && buttons.length) {\r\n                buttons.forEach(function (button) {\r\n                    button.click = this.getButtonClickHandler(button.actions);\r\n                }, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Generate button click handler based on button's 'actions' configuration\r\n         */\r\n        getButtonClickHandler: function (actionsConfig) {\r\n            var actions = actionsConfig.map(\r\n                function (actionConfig) {\r\n                    if (_.isObject(actionConfig)) {\r\n                        return this.triggerAction.bind(this, actionConfig);\r\n                    }\r\n\r\n                    return this[actionConfig] ? this[actionConfig].bind(this) : function () {};\r\n                }, this);\r\n\r\n            return function () {\r\n                actions.forEach(\r\n                    function (action) {\r\n                        action();\r\n                    }\r\n                );\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Cancels changes in modal:\r\n         * returning elems values to the previous state,\r\n         * and close modal\r\n         */\r\n        actionCancel: function () {\r\n            this.elems().forEach(this.setPrevValues, this);\r\n            this.closeModal();\r\n        },\r\n\r\n        /**\r\n         * Accept changes in modal by not preventing them.\r\n         * Can be extended by exporting 'gatherValues' result somewhere\r\n         */\r\n        actionDone: function () {\r\n            this.valid = true;\r\n            this.elems().forEach(this.validate, this);\r\n\r\n            if (this.valid) {\r\n                this.closeModal();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/modal/modal.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'text!ui/template/modal/modal-popup.html',\r\n    'text!ui/template/modal/modal-slide.html',\r\n    'text!ui/template/modal/modal-custom.html',\r\n    'Magento_Ui/js/lib/key-codes',\r\n    'jquery-ui-modules/widget',\r\n    'jquery-ui-modules/core',\r\n    'mage/translate',\r\n    'jquery/z-index'\r\n], function ($, _, template, popupTpl, slideTpl, customTpl, keyCodes) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Detect browser transition end event.\r\n     * @return {String|undefined} - transition event.\r\n     */\r\n    var transitionEvent = (function () {\r\n        var transition,\r\n            elementStyle = document.createElement('div').style,\r\n            transitions = {\r\n                'transition': 'transitionend',\r\n                'OTransition': 'oTransitionEnd',\r\n                'MozTransition': 'transitionend',\r\n                'WebkitTransition': 'webkitTransitionEnd'\r\n            };\r\n\r\n        for (transition in transitions) {\r\n            if (elementStyle[transition] !== undefined && transitions.hasOwnProperty(transition)) {\r\n                return transitions[transition];\r\n            }\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Modal Window Widget\r\n     */\r\n    $.widget('mage.modal', {\r\n        options: {\r\n            id: null,\r\n            type: 'popup',\r\n            title: '',\r\n            subTitle: '',\r\n            modalClass: '',\r\n            focus: '[data-role=\"closeBtn\"]',\r\n            autoOpen: false,\r\n            clickableOverlay: true,\r\n            popupTpl: popupTpl,\r\n            slideTpl: slideTpl,\r\n            customTpl: customTpl,\r\n            modalVisibleClass: '_show',\r\n            parentModalClass: '_has-modal',\r\n            innerScrollClass: '_inner-scroll',\r\n            responsive: false,\r\n            innerScroll: false,\r\n            modalTitle: '[data-role=\"title\"]',\r\n            modalSubTitle: '[data-role=\"subTitle\"]',\r\n            modalBlock: '[data-role=\"modal\"]',\r\n            modalCloseBtn: '[data-role=\"closeBtn\"]',\r\n            modalContent: '[data-role=\"content\"]',\r\n            modalAction: '[data-role=\"action\"]',\r\n            focusableScope: '[data-role=\"focusable-scope\"]',\r\n            focusableStart: '[data-role=\"focusable-start\"]',\r\n            focusableEnd: '[data-role=\"focusable-end\"]',\r\n            appendTo: 'body',\r\n            wrapperClass: 'modals-wrapper',\r\n            overlayClass: 'modals-overlay',\r\n            responsiveClass: 'modal-slide',\r\n            trigger: '',\r\n            modalLeftMargin: 45,\r\n            closeText: $.mage.__('Close'),\r\n            buttons: [{\r\n                text: $.mage.__('Ok'),\r\n                class: '',\r\n                attr: {},\r\n\r\n                /**\r\n                 * Default action on button click\r\n                 */\r\n                click: function (event) {\r\n                    this.closeModal(event);\r\n                }\r\n            }],\r\n            keyEventHandlers: {\r\n\r\n                /**\r\n                 * Tab key press handler,\r\n                 * set focus to elements\r\n                 */\r\n                tabKey: function () {\r\n                    if (document.activeElement === this.modal[0]) {\r\n                        this._setFocus('start');\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Escape key press handler,\r\n                 * close modal window\r\n                 * @param {Object} event - event\r\n                 */\r\n                escapeKey: function (event) {\r\n                    if (this.options.isOpen && this.modal.find(document.activeElement).length ||\r\n                        this.options.isOpen && this.modal[0] === document.activeElement) {\r\n                        this.closeModal(event);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates modal widget.\r\n         */\r\n        _create: function () {\r\n            _.bindAll(\r\n                this,\r\n                'keyEventSwitcher',\r\n                '_tabSwitcher',\r\n                'closeModal'\r\n            );\r\n\r\n            this.options.id = this.uuid;\r\n            this.options.transitionEvent = transitionEvent;\r\n            this._createWrapper();\r\n            this._renderModal();\r\n            this._createButtons();\r\n\r\n            if (this.options.trigger) {\r\n                $(document).on('click', this.options.trigger, _.bind(this.toggleModal, this));\r\n            }\r\n            this._on(this.modal.find(this.options.modalCloseBtn), {\r\n                'click': this.options.modalCloseBtnHandler ? this.options.modalCloseBtnHandler : this.closeModal\r\n            });\r\n            this._on(this.element, {\r\n                'openModal': this.openModal,\r\n                'closeModal': this.closeModal\r\n            });\r\n            this.options.autoOpen ? this.openModal() : false;\r\n        },\r\n\r\n        /**\r\n         * Returns element from modal node.\r\n         * @return {Object} - element.\r\n         */\r\n        _getElem: function (elem) {\r\n            return this.modal.find(elem);\r\n        },\r\n\r\n        /**\r\n         * Gets visible modal count.\r\n         * * @return {Number} - visible modal count.\r\n         */\r\n        _getVisibleCount: function () {\r\n            var modals = this.modalWrapper.find(this.options.modalBlock);\r\n\r\n            return modals.filter('.' + this.options.modalVisibleClass).length;\r\n        },\r\n\r\n        /**\r\n         * Gets count of visible modal by slide type.\r\n         * * @return {Number} - visible modal count.\r\n         */\r\n        _getVisibleSlideCount: function () {\r\n            var elems = this.modalWrapper.find('[data-type=\"slide\"]');\r\n\r\n            return elems.filter('.' + this.options.modalVisibleClass).length;\r\n        },\r\n\r\n        /**\r\n         * Listener key events.\r\n         * Call handler function if it exists\r\n         */\r\n        keyEventSwitcher: function (event) {\r\n            var key = keyCodes[event.keyCode];\r\n\r\n            if (this.options.keyEventHandlers.hasOwnProperty(key)) {\r\n                this.options.keyEventHandlers[key].apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set title for modal.\r\n         *\r\n         * @param {String} title\r\n         */\r\n        setTitle: function (title) {\r\n            var $title = this.modal.find(this.options.modalTitle),\r\n                $subTitle = this.modal.find(this.options.modalSubTitle);\r\n\r\n            $title.text(title);\r\n            $title.append($subTitle);\r\n        },\r\n\r\n        /**\r\n         * Set sub title for modal.\r\n         *\r\n         * @param {String} subTitle\r\n         */\r\n        setSubTitle: function (subTitle) {\r\n            this.options.subTitle = subTitle;\r\n            this.modal.find(this.options.modalSubTitle).html(subTitle);\r\n        },\r\n\r\n        /**\r\n         * Toggle modal.\r\n         * * @return {Element} - current element.\r\n         */\r\n        toggleModal: function () {\r\n            if (this.options.isOpen === true) {\r\n                this.closeModal();\r\n            } else {\r\n                this.openModal();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Open modal.\r\n         * * @return {Element} - current element.\r\n         */\r\n        openModal: function () {\r\n            this.options.isOpen = true;\r\n            this.focussedElement = document.activeElement;\r\n            this._createOverlay();\r\n            this._setActive();\r\n            this._setKeyListener();\r\n            this.modal.one(this.options.transitionEvent, _.bind(this._setFocus, this, 'end', 'opened'));\r\n            this.modal.one(this.options.transitionEvent, _.bind(this._trigger, this, 'opened'));\r\n            this.modal.addClass(this.options.modalVisibleClass);\r\n\r\n            if (!this.options.transitionEvent) {\r\n                this._trigger('opened');\r\n            }\r\n\r\n            return this.element;\r\n        },\r\n\r\n        /**\r\n         * Set focus to element.\r\n         * @param {String} position - can be \"start\" and \"end\"\r\n         *      positions.\r\n         *      If position is \"end\" - sets focus to first\r\n         *      focusable element in modal window scope.\r\n         *      If position is \"start\" - sets focus to last\r\n         *      focusable element in modal window scope\r\n         *\r\n         *  @param {String} type - can be \"opened\" or false\r\n         *      If type is \"opened\" - looks to \"this.options.focus\"\r\n         *      property and sets focus\r\n         */\r\n        _setFocus: function (position, type) {\r\n            var focusableElements,\r\n                infelicity;\r\n\r\n            if (type === 'opened' && this.options.focus) {\r\n                this.modal.find($(this.options.focus)).trigger('focus');\r\n            } else if (type === 'opened' && !this.options.focus) {\r\n                this.modal.find(this.options.focusableScope).trigger('focus');\r\n            } else if (position === 'end') {\r\n                this.modal.find(this.options.modalCloseBtn).trigger('focus');\r\n            } else if (position === 'start') {\r\n                infelicity = 2; //Constant for find last focusable element\r\n                focusableElements = this.modal.find(':focusable');\r\n                focusableElements.eq(focusableElements.length - infelicity).trigger('focus');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set events listener when modal is opened.\r\n         */\r\n        _setKeyListener: function () {\r\n            this.modal.find(this.options.focusableStart).on('focusin', this._tabSwitcher);\r\n            this.modal.find(this.options.focusableEnd).on('focusin', this._tabSwitcher);\r\n            this.modal.on('keydown', this.keyEventSwitcher);\r\n        },\r\n\r\n        /**\r\n         * Remove events listener when modal is closed.\r\n         */\r\n        _removeKeyListener: function () {\r\n            this.modal.find(this.options.focusableStart).off('focusin', this._tabSwitcher);\r\n            this.modal.find(this.options.focusableEnd).off('focusin', this._tabSwitcher);\r\n            this.modal.off('keydown', this.keyEventSwitcher);\r\n        },\r\n\r\n        /**\r\n         * Switcher for focus event.\r\n         * @param {Object} e - event\r\n         */\r\n        _tabSwitcher: function (e) {\r\n            var target = $(e.target);\r\n\r\n            if (target.is(this.options.focusableStart)) {\r\n                this._setFocus('start');\r\n            } else if (target.is(this.options.focusableEnd)) {\r\n                this._setFocus('end');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close modal.\r\n         * * @return {Element} - current element.\r\n         */\r\n        closeModal: function () {\r\n            var that = this;\r\n\r\n            this._removeKeyListener();\r\n            this.options.isOpen = false;\r\n            this.modal.one(this.options.transitionEvent, function () {\r\n                that._close();\r\n            });\r\n            this.modal.removeClass(this.options.modalVisibleClass);\r\n\r\n            if (!this.options.transitionEvent) {\r\n                that._close();\r\n            }\r\n\r\n            return this.element;\r\n        },\r\n\r\n        /**\r\n         * Helper for closeModal function.\r\n         */\r\n        _close: function () {\r\n            var trigger = _.bind(this._trigger, this, 'closed', this.modal);\r\n\r\n            $(this.focussedElement).trigger('focus');\r\n            this._destroyOverlay();\r\n            this._unsetActive();\r\n            _.defer(trigger, this);\r\n        },\r\n\r\n        /**\r\n         * Set z-index and margin for modal and overlay.\r\n         */\r\n        _setActive: function () {\r\n            var zIndex = this.modal.zIndex(),\r\n                baseIndex = zIndex + this._getVisibleCount();\r\n\r\n            if (this.modal.data('active')) {\r\n                return;\r\n            }\r\n\r\n            this.modal.data('active', true);\r\n\r\n            this.overlay.zIndex(++baseIndex);\r\n            this.prevOverlayIndex = this.overlay.zIndex();\r\n            this.modal.zIndex(this.overlay.zIndex() + 1);\r\n\r\n            if (this._getVisibleSlideCount()) {\r\n                this.modal.css('marginLeft', this.options.modalLeftMargin * this._getVisibleSlideCount());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Unset styles for modal and set z-index for previous modal.\r\n         */\r\n        _unsetActive: function () {\r\n            this.modal.removeAttr('style');\r\n            this.modal.data('active', false);\r\n\r\n            if (this.overlay) {\r\n                this.overlay.zIndex(this.prevOverlayIndex - 1);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates wrapper to hold all modals.\r\n         */\r\n        _createWrapper: function () {\r\n            this.modalWrapper = $(this.options.appendTo).find('.' + this.options.wrapperClass);\r\n\r\n            if (!this.modalWrapper.length) {\r\n                this.modalWrapper = $('<div></div>')\r\n                    .addClass(this.options.wrapperClass)\r\n                    .appendTo(this.options.appendTo);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Compile template and append to wrapper.\r\n         */\r\n        _renderModal: function () {\r\n            $(template(\r\n                this.options[this.options.type + 'Tpl'],\r\n                {\r\n                    data: this.options\r\n                })).appendTo(this.modalWrapper);\r\n            this.modal = this.modalWrapper.find(this.options.modalBlock).last();\r\n            this.element.appendTo(this._getElem(this.options.modalContent));\r\n\r\n            if (this.element.is(':hidden')) {\r\n                this.element.show();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates buttons pane.\r\n         */\r\n        _createButtons: function () {\r\n            this.buttons = this._getElem(this.options.modalAction);\r\n            _.each(this.options.buttons, function (btn, key) {\r\n                var button = this.buttons[key];\r\n\r\n                if (btn.attr) {\r\n                    $(button).attr(btn.attr);\r\n                }\r\n\r\n                if (btn.class) {\r\n                    $(button).addClass(btn.class);\r\n                }\r\n\r\n                if (!btn.click) {\r\n                    btn.click = this.closeModal;\r\n                }\r\n                $(button).on('click', _.bind(btn.click, this));\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Creates overlay, append it to wrapper, set previous click event on overlay.\r\n         */\r\n        _createOverlay: function () {\r\n            var events,\r\n                outerClickHandler = this.options.outerClickHandler || this.closeModal;\r\n\r\n            this.overlay = $('.' + this.options.overlayClass);\r\n\r\n            if (!this.overlay.length) {\r\n                $(this.options.appendTo).addClass(this.options.parentModalClass);\r\n                this.overlay = $('<div></div>')\r\n                    .addClass(this.options.overlayClass)\r\n                    .appendTo(this.modalWrapper);\r\n            }\r\n            events = $._data(this.overlay.get(0), 'events');\r\n            events ? this.prevOverlayHandler = events.click[0].handler : false;\r\n            this.options.clickableOverlay ? this.overlay.off().on('click', outerClickHandler) : false;\r\n        },\r\n\r\n        /**\r\n         * Destroy overlay.\r\n         */\r\n        _destroyOverlay: function () {\r\n            if (this._getVisibleCount()) {\r\n                this.overlay.off().on('click', this.prevOverlayHandler);\r\n            } else {\r\n                $(this.options.appendTo).removeClass(this.options.parentModalClass);\r\n                this.overlay.remove();\r\n                this.overlay = null;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.modal;\r\n});\r\n","Magento_Ui/js/modal/modalToggle.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (config, el) {\r\n        var widget,\r\n            content;\r\n\r\n        if (config.contentSelector) {\r\n            content = $(config.contentSelector);\r\n        } else if (config.content) {\r\n            content = $('<div></div>').html(config.content);\r\n        } else {\r\n            content = $('<div></div>');\r\n        }\r\n\r\n        widget = content.modal(config);\r\n\r\n        $(el).on(config.toggleEvent, function () {\r\n            var state = widget.data('mage-modal').options.isOpen;\r\n\r\n            if (state) {\r\n                widget.modal('closeModal');\r\n            } else {\r\n                widget.modal('openModal');\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return widget;\r\n    };\r\n});\r\n","Magento_Ui/js/modal/prompt.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'text!ui/template/modal/modal-prompt-content.html',\r\n    'jquery-ui-modules/widget',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate'\r\n], function ($, _, template, promptContentTmpl) {\r\n    'use strict';\r\n\r\n    $.widget('mage.prompt', $.mage.modal, {\r\n        options: {\r\n            modalClass: 'prompt',\r\n            promptContentTmpl: promptContentTmpl,\r\n            promptField: '[data-role=\"promptField\"]',\r\n            attributesForm: {},\r\n            attributesField: {},\r\n            value: '',\r\n            validation: false,\r\n            validationRules: [],\r\n            keyEventHandlers: {\r\n\r\n                /**\r\n                 * Enter key press handler,\r\n                 * submit result and close modal window\r\n                 * @param {Object} event - event\r\n                 */\r\n                enterKey: function (event) {\r\n                    if (this.options.isOpen && this.modal.find(document.activeElement).length ||\r\n                        this.options.isOpen && this.modal[0] === document.activeElement) {\r\n                        this.closeModal(true);\r\n                        event.preventDefault();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Tab key press handler,\r\n                 * set focus to elements\r\n                 */\r\n                tabKey: function () {\r\n                    if (document.activeElement === this.modal[0]) {\r\n                        this._setFocus('start');\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Escape key press handler,\r\n                 * cancel and close modal window\r\n                 * @param {Object} event - event\r\n                 */\r\n                escapeKey: function (event) {\r\n                    if (this.options.isOpen && this.modal.find(document.activeElement).length ||\r\n                        this.options.isOpen && this.modal[0] === document.activeElement) {\r\n                        this.closeModal();\r\n                        event.preventDefault();\r\n                    }\r\n                }\r\n            },\r\n            actions: {\r\n\r\n                /**\r\n                 * Callback always - called on all actions.\r\n                 */\r\n                always: function () {},\r\n\r\n                /**\r\n                 * Callback confirm.\r\n                 */\r\n                confirm: function () {},\r\n\r\n                /**\r\n                 * Callback cancel.\r\n                 */\r\n                cancel: function () {}\r\n            },\r\n            buttons: [{\r\n                text: $.mage.__('Cancel'),\r\n                class: 'action-secondary action-dismiss',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function () {\r\n                    this.closeModal();\r\n                }\r\n            }, {\r\n                text: $.mage.__('OK'),\r\n                class: 'action-primary action-accept',\r\n\r\n                /**\r\n                 * Click handler.\r\n                 */\r\n                click: function () {\r\n                    this.closeModal(true);\r\n                }\r\n            }]\r\n        },\r\n\r\n        /**\r\n         * Create widget.\r\n         */\r\n        _create: function () {\r\n            this.options.focus = this.options.promptField;\r\n            this.options.validation = this.options.validation && this.options.validationRules.length;\r\n            this.options.outerClickHandler = this.options.outerClickHandler || _.bind(this.closeModal, this, false);\r\n            this._super();\r\n            this.modal.find(this.options.modalContent).append(this.getFormTemplate());\r\n            this.modal.find(this.options.modalCloseBtn).off().on('click',  _.bind(this.closeModal, this, false));\r\n\r\n            if (this.options.validation) {\r\n                this.setValidationClasses();\r\n            }\r\n\r\n            this.openModal();\r\n        },\r\n\r\n        /**\r\n         * Form template getter.\r\n         *\r\n         * @returns {Object} Form template.\r\n         */\r\n        getFormTemplate: function () {\r\n            var formTemplate,\r\n                formAttr = '',\r\n                inputAttr = '',\r\n                attributeName;\r\n\r\n            for (attributeName in this.options.attributesForm) {\r\n                if (this.options.attributesForm.hasOwnProperty(attributeName)) {\r\n                    formAttr = formAttr + ' ' + attributeName + '=\"' +\r\n                        this.options.attributesForm[attributeName] + '\"';\r\n                }\r\n            }\r\n\r\n            for (attributeName in this.options.attributesField) {\r\n                if (this.options.attributesField.hasOwnProperty(attributeName)) {\r\n                    inputAttr = inputAttr + ' ' + attributeName + '=\"' +\r\n                        this.options.attributesField[attributeName] + '\"';\r\n                }\r\n            }\r\n\r\n            formTemplate = $(template(this.options.promptContentTmpl, {\r\n                data: this.options,\r\n                formAttr: formAttr,\r\n                inputAttr: inputAttr\r\n            }));\r\n\r\n            return formTemplate;\r\n        },\r\n\r\n        /**\r\n         * Remove widget\r\n         */\r\n        _remove: function () {\r\n            this.modal.remove();\r\n        },\r\n\r\n        /**\r\n         * Validate prompt field\r\n         */\r\n        validate: function () {\r\n            return $.validator.validateSingleElement(this.options.promptField);\r\n        },\r\n\r\n        /**\r\n         * Add validation classes to prompt field\r\n         */\r\n        setValidationClasses: function () {\r\n            this.modal.find(this.options.promptField).attr('class', $.proxy(function (i, val) {\r\n                return val + ' ' + this.options.validationRules.join(' ');\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Open modal window\r\n         */\r\n        openModal: function () {\r\n            this._super();\r\n            this.modal.find(this.options.promptField).val(this.options.value);\r\n        },\r\n\r\n        /**\r\n         * Close modal window\r\n         */\r\n        closeModal: function (result) {\r\n            var value;\r\n\r\n            if (result) {\r\n                if (this.options.validation && !this.validate()) {\r\n                    return false;\r\n                }\r\n\r\n                value = this.modal.find(this.options.promptField).val();\r\n                this.options.actions.confirm.call(this, value);\r\n            } else {\r\n                this.options.actions.cancel.call(this, result);\r\n            }\r\n\r\n            this.options.actions.always();\r\n            this.element.on('promptclosed', _.bind(this._remove, this));\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n\r\n    return function (config) {\r\n        return $('<div class=\"prompt-message\"></div>').html(config.content).prompt(config);\r\n    };\r\n});\r\n","Magento_Ui/js/timeline/timeline-view.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'ko',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'underscore',\r\n    'Magento_Ui/js/lib/view/utils/raf',\r\n    'uiRegistry',\r\n    'uiClass'\r\n], function (ko, $, _, raf, registry, Class) {\r\n    'use strict';\r\n\r\n    var hasClassList = (function () {\r\n        var list = document.createElement('_').classList;\r\n\r\n        return !!list && !list.toggle('_test', false);\r\n    })();\r\n\r\n    /**\r\n     * Polyfill of the 'classList.toggle' method.\r\n     *\r\n     * @param {HTMLElement} elem\r\n     */\r\n    function toggleClass(elem) {\r\n        var classList   = elem.classList,\r\n            args        = Array.prototype.slice.call(arguments, 1),\r\n            $elem;\r\n\r\n        if (hasClassList) {\r\n            classList.toggle.apply(classList, args);\r\n        } else {\r\n            $elem = $(elem);\r\n            $elem.toggleClass.apply($elem, args);\r\n        }\r\n    }\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            selectors: {\r\n                content: '.timeline-content',\r\n                timeUnit: '.timeline-unit',\r\n                item: '.timeline-item:not([data-role=no-data-msg])',\r\n                event: '.timeline-event'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes TimelineView component.\r\n         *\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        initialize: function () {\r\n            _.bindAll(\r\n                this,\r\n                'refresh',\r\n                'initContent',\r\n                'initItem',\r\n                'initTimeUnit',\r\n                'getItemBindings',\r\n                'updateItemsPosition',\r\n                'onScaleChange',\r\n                'onEventElementRender',\r\n                'onWindowResize',\r\n                'onContentScroll',\r\n                'onDataReloaded',\r\n                'onToStartClick',\r\n                'onToEndClick'\r\n            );\r\n\r\n            this._super()\r\n                .initModel()\r\n                .waitContent();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies listeners for the model properties changes.\r\n         *\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        initModel: function () {\r\n            var model = registry.get(this.model);\r\n\r\n            model.on('scale', this.onScaleChange);\r\n            model.source.on('reloaded', this.onDataReloaded);\r\n\r\n            this.model = model;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Applies DOM watcher for the\r\n         * content element rendering.\r\n         *\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        waitContent: function () {\r\n            $.async({\r\n                selector: this.selectors.content,\r\n                component: this.model\r\n            }, this.initContent);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes timelines' content element.\r\n         *\r\n         * @param {HTMLElement} content\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        initContent: function (content) {\r\n            this.$content = content;\r\n\r\n            $(content).on('scroll', this.onContentScroll);\r\n            $(window).on('resize', this.onWindowResize);\r\n\r\n            $.async(this.selectors.item, content, this.initItem);\r\n            $.async(this.selectors.event, content, this.onEventElementRender);\r\n            $.async(this.selectors.timeUnit, content, this.initTimeUnit);\r\n\r\n            this.refresh();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes timeline item element,\r\n         * e.g. establishes event listeners and applies data bindings.\r\n         *\r\n         * @param {HTMLElement} elem\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        initItem: function (elem) {\r\n            $(elem)\r\n                .bindings(this.getItemBindings)\r\n                .on('click', '._toend', this.onToEndClick)\r\n                .on('click', '._tostart', this.onToStartClick);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes timeline unit element.\r\n         *\r\n         * @param {HTMLElement} elem\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        initTimeUnit: function (elem) {\r\n            $(elem).bindings(this.getTimeUnitBindings());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates items positions in a\r\n         * loop if state of a view has changed.\r\n         */\r\n        refresh: function () {\r\n            raf(this.refresh);\r\n\r\n            if (this._update) {\r\n                this._update = false;\r\n\r\n                this.updateItemsPosition();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns object width additional bindings\r\n         * for a timeline unit element.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getTimeUnitBindings: function () {\r\n            return {\r\n                style: {\r\n                    width: ko.computed(function () {\r\n                        return this.getTimeUnitWidth() + '%';\r\n                    }.bind(this))\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Returns object with additional\r\n         * bindings for a timeline item element.\r\n         *\r\n         * @param {Object} ctx\r\n         * @returns {Object}\r\n         */\r\n        getItemBindings: function (ctx) {\r\n            return {\r\n                style: {\r\n                    width: ko.computed(function () {\r\n                        return this.getItemWidth(ctx.$row()) + '%';\r\n                    }.bind(this)),\r\n\r\n                    'margin-left': ko.computed(function () {\r\n                        return this.getItemMargin(ctx.$row()) + '%';\r\n                    }.bind(this))\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Calculates width in percents of a timeline unit element.\r\n         *\r\n         * @returns {Number}\r\n         */\r\n        getTimeUnitWidth: function () {\r\n            return 100 / this.model.scale;\r\n        },\r\n\r\n        /**\r\n         * Calculates width of a record in percents.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {String}\r\n         */\r\n        getItemWidth: function (record) {\r\n            var days = 0;\r\n\r\n            if (record) {\r\n                days = this.model.getDaysLength(record);\r\n            }\r\n\r\n            return this.getTimeUnitWidth()  * days;\r\n        },\r\n\r\n        /**\r\n         * Calculates left margin value for provided record.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {String}\r\n         */\r\n        getItemMargin: function (record) {\r\n            var offset = 0;\r\n\r\n            if (record) {\r\n                offset = this.model.getStartDelta(record);\r\n            }\r\n\r\n            return this.getTimeUnitWidth() * offset;\r\n        },\r\n\r\n        /**\r\n         * Returns collection of currently available\r\n         * timeline item elements.\r\n         *\r\n         * @returns {Array<HTMLElement>}\r\n         */\r\n        getItems: function () {\r\n            var items = this.$content.querySelectorAll(this.selectors.item);\r\n\r\n            return _.toArray(items);\r\n        },\r\n\r\n        /**\r\n         * Updates positions of timeline elements.\r\n         *\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        updateItemsPosition: function () {\r\n            this.getItems()\r\n                .forEach(this.updatePositionFor, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates position of provided timeline element.\r\n         *\r\n         * @param {HTMLElement} $elem\r\n         * @returns {TimelineView} Chainable.\r\n         */\r\n        updatePositionFor: function ($elem) {\r\n            var $event      = $elem.querySelector(this.selectors.event),\r\n                leftEdge    = this.getLeftEdgeFor($elem),\r\n                rightEdge   = this.getRightEdgeFor($elem);\r\n\r\n            if ($event) {\r\n                $event.style.left = Math.max(-leftEdge, 0) + 'px';\r\n                $event.style.right = Math.max(rightEdge, 0) + 'px';\r\n            }\r\n\r\n            toggleClass($elem, '_scroll-start', leftEdge < 0);\r\n            toggleClass($elem, '_scroll-end', rightEdge > 0);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Scrolls content area to the start of provided element.\r\n         *\r\n         * @param {HTMLElement} elem\r\n         * @returns {TimelineView}\r\n         */\r\n        toStartOf: function (elem) {\r\n            var leftEdge = this.getLeftEdgeFor(elem);\r\n\r\n            this.$content.scrollLeft += leftEdge;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Scrolls content area to the end of provided element.\r\n         *\r\n         * @param {HTMLElement} elem\r\n         * @returns {TimelineView}\r\n         */\r\n        toEndOf: function (elem) {\r\n            var rightEdge = this.getRightEdgeFor(elem);\r\n\r\n            this.$content.scrollLeft += rightEdge + 1;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calculates location of the left edge of an element\r\n         * relative to the contents' left edge.\r\n         *\r\n         * @param {HTMLElement} elem\r\n         * @returns {Number}\r\n         */\r\n        getLeftEdgeFor: function (elem) {\r\n            var leftOffset = elem.getBoundingClientRect().left;\r\n\r\n            return leftOffset - this.$content.getBoundingClientRect().left;\r\n        },\r\n\r\n        /**\r\n         * Calculates location of the right edge of an element\r\n         * relative to the contents' right edge.\r\n         *\r\n         * @param {HTMLElement} elem\r\n         * @returns {Number}\r\n         */\r\n        getRightEdgeFor: function (elem) {\r\n            var elemWidth   = elem.offsetWidth,\r\n                leftEdge    = this.getLeftEdgeFor(elem);\r\n\r\n            return leftEdge + elemWidth - this.$content.offsetWidth;\r\n        },\r\n\r\n        /**\r\n         * 'To Start' button 'click' event handler.\r\n         *\r\n         * @param {jQueryEvent} event\r\n         */\r\n        onToStartClick: function (event) {\r\n            var elem = event.originalEvent.currentTarget;\r\n\r\n            event.stopPropagation();\r\n\r\n            this.toStartOf(elem);\r\n        },\r\n\r\n        /**\r\n         * 'To End' button 'click' event handler.\r\n         *\r\n         * @param {jQueryEvent} event\r\n         */\r\n        onToEndClick: function (event) {\r\n            var elem = event.originalEvent.currentTarget;\r\n\r\n            event.stopPropagation();\r\n\r\n            this.toEndOf(elem);\r\n        },\r\n\r\n        /**\r\n         * Handler of the scale value 'change' event.\r\n         */\r\n        onScaleChange: function () {\r\n            this._update = true;\r\n        },\r\n\r\n        /**\r\n         * Callback function which is invoked\r\n         * when event element was rendered.\r\n         */\r\n        onEventElementRender: function () {\r\n            this._update = true;\r\n        },\r\n\r\n        /**\r\n         * Window 'resize' event handler.\r\n         */\r\n        onWindowResize: function () {\r\n            this._update = true;\r\n        },\r\n\r\n        /**\r\n         * Content container 'scroll' event handler.\r\n         */\r\n        onContentScroll: function () {\r\n            this._update = true;\r\n        },\r\n\r\n        /**\r\n         * Data 'reload' event handler.\r\n         */\r\n        onDataReloaded: function () {\r\n            this._update = true;\r\n        }\r\n    });\r\n});\r\n","Magento_Ui/js/timeline/timeline.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'underscore',\r\n    'moment',\r\n    'uiLayout',\r\n    'Magento_Ui/js/grid/listing'\r\n], function (_, moment, layout, Listing) {\r\n    'use strict';\r\n\r\n    var ONE_DAY = 86400000;\r\n\r\n    return Listing.extend({\r\n        defaults: {\r\n            recordTmpl: 'ui/timeline/record',\r\n            dateFormat: 'YYYY-MM-DD HH:mm:ss',\r\n            headerFormat: 'ddd MM/DD',\r\n            detailsFormat: 'DD/MM/YYYY HH:mm:ss',\r\n            scale: 7,\r\n            scaleStep: 1,\r\n            minScale: 7,\r\n            maxScale: 28,\r\n            minDays: 28,\r\n            displayMode: 'timeline',\r\n            displayModes: {\r\n                timeline: {\r\n                    label: 'Timeline',\r\n                    value: 'timeline',\r\n                    template: 'ui/timeline/timeline'\r\n                }\r\n            },\r\n            viewConfig: {\r\n                component: 'Magento_Ui/js/timeline/timeline-view',\r\n                name: '${ $.name }_view',\r\n                model: '${ $.name }'\r\n            },\r\n            tracks: {\r\n                scale: true\r\n            },\r\n            statefull: {\r\n                scale: true\r\n            },\r\n            range: {}\r\n        },\r\n\r\n        /**\r\n         * Initializes Timeline component.\r\n         *\r\n         * @returns {Timeline} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initView()\r\n                .updateRange();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes components configuration.\r\n         *\r\n         * @returns {Timeline} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n\r\n            this.maxScale = Math.min(this.minDays, this.maxScale);\r\n            this.minScale = Math.min(this.maxScale, this.minScale);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Timeline} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe.call(this.range, true, 'hasToday');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes TimelineView component.\r\n         *\r\n         * @returns {Timeline} Chainable.\r\n         */\r\n        initView: function () {\r\n            layout([this.viewConfig]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided event record is active,\r\n         * i.e. it has already started.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {Boolean}\r\n         */\r\n        isActive: function (record) {\r\n            return Number(record.status) === 1;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided event record is upcoming,\r\n         * i.e. it will start later on.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {Boolean}\r\n         */\r\n        isUpcoming: function (record) {\r\n            return Number(record.status) === 2;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided event record is permanent,\r\n         * i.e. it has no ending time.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {Boolean}\r\n         */\r\n        isPermanent: function (record) {\r\n            return !this.getEndDate(record);\r\n        },\r\n\r\n        /**\r\n         * Checks if provided date indicates current day.\r\n         *\r\n         * @param {(Number|Moment)} date\r\n         * @returns {Boolenan}\r\n         */\r\n        isToday: function (date) {\r\n            return moment().isSame(date, 'day');\r\n        },\r\n\r\n        /**\r\n         * Checks if range object contains todays date.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasToday: function () {\r\n            return this.range.hasToday;\r\n        },\r\n\r\n        /**\r\n         * Returns start date of provided record.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {String}\r\n         */\r\n        getStartDate: function (record) {\r\n            return record['start_time'];\r\n        },\r\n\r\n        /**\r\n         * Returns end date of provided record.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {String}\r\n         */\r\n        getEndDate: function (record) {\r\n            return record['end_time'];\r\n        },\r\n\r\n        /**\r\n         * Returns difference in days between records' start date\r\n         * and a first day of a range.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {Number}\r\n         */\r\n        getStartDelta: function (record) {\r\n            var start    = this.createDate(this.getStartDate(record)),\r\n                firstDay = this.range.firstDay;\r\n\r\n            return start.diff(firstDay, 'days', true);\r\n        },\r\n\r\n        /**\r\n         * Calculates the amount of days that provided event lasts.\r\n         *\r\n         * @param {Object} record\r\n         * @returns {Number}\r\n         */\r\n        getDaysLength: function (record) {\r\n            var start   = this.createDate(this.getStartDate(record)),\r\n                end     = this.createDate(this.getEndDate(record));\r\n\r\n            if (!end.isValid()) {\r\n                end = this.range.lastDay.endOf('day');\r\n            }\r\n\r\n            return end.diff(start, 'days', true);\r\n        },\r\n\r\n        /**\r\n         * Creates new date object based on provided date string value.\r\n         *\r\n         * @param {String} dateStr\r\n         * @returns {Moment}\r\n         */\r\n        createDate: function (dateStr) {\r\n            return moment(dateStr, this.dateFormat);\r\n        },\r\n\r\n        /**\r\n         * Converts days to weeks.\r\n         *\r\n         * @param {Number} days\r\n         * @returns {Number}\r\n         */\r\n        daysToWeeks: function (days) {\r\n            var weeks = days / 7;\r\n\r\n            if (weeks % 1) {\r\n                weeks = weeks.toFixed(1);\r\n            }\r\n\r\n            return weeks;\r\n        },\r\n\r\n        /**\r\n         * Updates data of a range object,\r\n         * e.g. total days, first day and last day, etc.\r\n         *\r\n         * @returns {Object} Range instance.\r\n         */\r\n        updateRange: function () {\r\n            var firstDay    = this._getFirstDay(),\r\n                lastDay     = this._getLastDay(),\r\n                totalDays   = lastDay.diff(firstDay, 'days'),\r\n                days        = [],\r\n                i           = -1;\r\n\r\n            if (totalDays < this.minDays) {\r\n                totalDays += this.minDays - totalDays - 1;\r\n            }\r\n\r\n            while (++i <= totalDays) {\r\n                days.push(+firstDay + ONE_DAY * i);\r\n            }\r\n\r\n            return _.extend(this.range, {\r\n                days:       days,\r\n                totalDays:  totalDays,\r\n                firstDay:   firstDay,\r\n                lastDay:    moment(_.last(days)),\r\n                hasToday:   this.isToday(firstDay)\r\n            });\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         * @param {String} key\r\n         * @returns {Array<Moment>}\r\n         */\r\n        _getDates: function (key) {\r\n            var dates = [];\r\n\r\n            this.rows.forEach(function (record) {\r\n                if (record[key]) {\r\n                    dates.push(this.createDate(record[key]));\r\n                }\r\n            }, this);\r\n\r\n            return dates;\r\n        },\r\n\r\n        /**\r\n         * Returns date which is closest to the current day.\r\n         *\r\n         * @private\r\n         * @returns {Moment}\r\n         */\r\n        _getFirstDay: function () {\r\n            var dates = this._getDates('start_time'),\r\n                first = moment.min(dates).subtract(1, 'day'),\r\n                today = moment();\r\n\r\n            if (!first.isValid() || first < today) {\r\n                first = today;\r\n            }\r\n\r\n            return first.startOf('day');\r\n        },\r\n\r\n        /**\r\n         * Returns the most distant date\r\n         * specified in available records.\r\n         *\r\n         * @private\r\n         * @returns {Moment}\r\n         */\r\n        _getLastDay: function () {\r\n            var startDates  = this._getDates('start_time'),\r\n                endDates    = this._getDates('end_time'),\r\n                last        = moment.max(startDates.concat(endDates));\r\n\r\n            return last.add(1, 'day').startOf('day');\r\n        },\r\n\r\n        /**\r\n         * TODO: remove after integration with date binding.\r\n         *\r\n         * @param {Number} timestamp\r\n         * @returns {String}\r\n         */\r\n        formatHeader: function (timestamp) {\r\n            return moment(timestamp).format(this.headerFormat);\r\n        },\r\n\r\n        /**\r\n         * TODO: remove after integration with date binding.\r\n         *\r\n         * @param {String} date\r\n         * @returns {String}\r\n         */\r\n        formatDetails: function (date) {\r\n            return moment(date).format(this.detailsFormat);\r\n        }\r\n    });\r\n});\r\n","Magento_UrlRewrite/js/url-rewrite-validation.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/backend/form',\r\n    'mage/backend/validation'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (data, element) {\r\n\r\n        $(element).form().validation({\r\n            validationUrl: data.url\r\n        });\r\n    };\r\n});\r\n","Magento_User/js/delete-user-account.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var postData;\r\n\r\n    return function (params, elem) {\r\n\r\n        elem.on('click', function () {\r\n\r\n            postData = {\r\n                'data': {\r\n                    'user_id': params.objId,\r\n                    'current_password': $('[name=\"current_password\"]').val()\r\n                }\r\n            };\r\n\r\n            if ($.validator.validateElement($('[name=\"current_password\"]'))) {\r\n                window.deleteConfirm(params.message, params.url, postData);\r\n            }\r\n        });\r\n    };\r\n});\r\n","Magento_User/js/roles-tree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'jquery/jstree/jquery.jstree'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.rolesTree', {\r\n        options: {\r\n            treeInitData: {},\r\n            editFormSelector: '',\r\n            resourceFieldName: 'resource[]',\r\n            checkboxVisible: true\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this.element.jstree({\r\n                plugins: ['checkbox'],\r\n                checkbox: {\r\n                    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n                    three_state: false,\r\n                    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n                    visible: this.options.checkboxVisible,\r\n                    cascade: 'undetermined'\r\n                },\r\n                core: {\r\n                    data: this.options.treeInitData,\r\n                    themes: {\r\n                        dots: false\r\n                    }\r\n                }\r\n            });\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            this.element.jstree('destroy');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this.element.on('select_node.jstree', $.proxy(this._selectChildNodes, this));\r\n            this.element.on('deselect_node.jstree', $.proxy(this._deselectChildNodes, this));\r\n            this.element.on('changed.jstree', $.proxy(this._changedNode, this));\r\n        },\r\n\r\n        /**\r\n         * @param {Event} event\r\n         * @param {Object} selected\r\n         * @private\r\n         */\r\n        _selectChildNodes: function (event, selected) {\r\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            selected.instance.open_node(selected.node);\r\n            selected.node.children.each(function (id) {\r\n                var selector = '[id=\"' + id + '\"]';\r\n\r\n                selected.instance.select_node(\r\n                    selected.instance.get_node($(selector), false)\r\n                );\r\n            });\r\n            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n        },\r\n\r\n        /**\r\n         * @param {Event} event\r\n         * @param {Object} selected\r\n         * @private\r\n         */\r\n        _deselectChildNodes: function (event, selected) {\r\n            selected.node.children.each(function (id) {\r\n                var selector = '[id=\"' + id + '\"]';\r\n\r\n                // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n                selected.instance.deselect_node(\r\n                    selected.instance.get_node($(selector), false)\r\n                );\r\n                // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Add selected resources to form to be send later\r\n         *\r\n         * @param {Event} event\r\n         * @param {Object} selected\r\n         * @private\r\n         */\r\n        _changedNode: function (event, selected) {\r\n            var form = $(this.options.editFormSelector),\r\n                fieldName = this.options.resourceFieldName,\r\n                items = selected.selected.concat($(this.element).jstree('get_undetermined'));\r\n\r\n            if (this.options.editFormSelector === '') {\r\n                return;\r\n            }\r\n            form.find('input[name=\"' + this.options.resourceFieldName +  '\"]').remove();\r\n            items.each(function (id) {\r\n                $('<input>', {\r\n                    type: 'hidden',\r\n                    name: fieldName,\r\n                    value: id\r\n                }).appendTo(form);\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.rolesTree;\r\n});\r\n","Magento_Variable/variables.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global Variables, updateElementAtCursor, MagentovariablePlugin, Base64 */\r\ndefine([\r\n    'jquery',\r\n    'mage/backend/notification',\r\n    'mage/translate',\r\n    'wysiwygAdapter',\r\n    'uiRegistry',\r\n    'mage/apply/main',\r\n    'mageUtils',\r\n    'Magento_Variable/js/config-directive-generator',\r\n    'Magento_Variable/js/custom-directive-generator',\r\n    'Magento_Ui/js/lib/spinner',\r\n    'jquery/ui',\r\n    'prototype',\r\n    'mage/adminhtml/tools'\r\n], function (jQuery, notification, $t, wysiwyg, registry, mageApply, utils, configGenerator, customGenerator, loader) {\r\n    'use strict';\r\n\r\n    window.Variables = {\r\n        textareaElementId: null,\r\n        variablesContent: null,\r\n        dialogWindow: null,\r\n        dialogWindowId: 'variables-chooser',\r\n        overlayShowEffectOptions: null,\r\n        overlayHideEffectOptions: null,\r\n        insertFunction: 'Variables.insertVariable',\r\n        selectedPlaceholder: null,\r\n        isEditMode: null,\r\n        editor: null,\r\n\r\n        /**\r\n         * Initialize Variables handler.\r\n         *\r\n         * @param {*} textareaElementId\r\n         * @param {Function} insertFunction\r\n         * @param {Object} editor\r\n         * @param {Object} selectedPlaceholder\r\n         */\r\n        init: function (textareaElementId, insertFunction, editor, selectedPlaceholder) {\r\n            if ($(textareaElementId)) {\r\n                this.textareaElementId = textareaElementId;\r\n            }\r\n\r\n            if (insertFunction) {\r\n                this.insertFunction = insertFunction;\r\n            }\r\n\r\n            if (selectedPlaceholder) {\r\n                this.selectedPlaceholder = selectedPlaceholder;\r\n            }\r\n\r\n            if (editor) {\r\n                this.editor = editor;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reset data.\r\n         */\r\n        resetData: function () {\r\n            this.variablesContent = null;\r\n            this.dialogWindow = null;\r\n        },\r\n\r\n        /**\r\n         * Open variables chooser slideout.\r\n         *\r\n         * @param {Object} variables\r\n         */\r\n        openVariableChooser: function (variables) {\r\n            if (variables) {\r\n                this.openDialogWindow(variables);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close variables chooser slideout dialog window.\r\n         */\r\n        closeDialogWindow: function () {\r\n            jQuery('#' + this.dialogWindowId).modal('closeModal');\r\n        },\r\n\r\n        /**\r\n         * Init ui component grid on the form\r\n         *\r\n         * @return void\r\n         */\r\n        initUiGrid: function () {\r\n            mageApply.apply(document.getElementById(this.dialogWindow));\r\n            jQuery('#' + this.dialogWindowId).applyBindings();\r\n            loader.get('variables_modal.variables_modal.variables').hide();\r\n        },\r\n\r\n        /**\r\n         * Open slideout dialog window.\r\n         *\r\n         * @param {*} variablesContent\r\n         * @param {Object} selectedElement\r\n         */\r\n        openDialogWindow: function (variablesContent, selectedElement) {\r\n\r\n            var html = utils.copy(variablesContent),\r\n                self = this;\r\n\r\n            jQuery('<div id=\"' + this.dialogWindowId + '\">' + html + '</div>').modal({\r\n                title: self.isEditMode ? $t('Edit Variable') : $t('Insert Variable'),\r\n                type: 'slide',\r\n                buttons: self.getButtonsConfig(self.isEditMode),\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 * @param {Object} modal\r\n                 */\r\n                closed: function (e, modal) {\r\n                    modal.modal.remove();\r\n                    registry.get(\r\n                        'variables_modal.variables_modal.variables.variable_selector',\r\n                        function (radioSelect) {\r\n                            radioSelect.selectedVariableCode('');\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n\r\n            this.selectedPlaceholder = selectedElement;\r\n\r\n            this.addNotAvailableMessage(selectedElement);\r\n\r\n            jQuery('#' + this.dialogWindowId).modal('openModal');\r\n\r\n            if (typeof selectedElement !== 'undefined') {\r\n                registry.get(\r\n                    'variables_modal.variables_modal.variables.variable_selector',\r\n                    function (radioSelect) {\r\n                        radioSelect.selectedVariableCode(MagentovariablePlugin.getElementVariablePath(selectedElement));\r\n                    }\r\n                );\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add message to slide out that variable is no longer available\r\n         *\r\n         * @param {Object} selectedElement\r\n         */\r\n        addNotAvailableMessage: function (selectedElement) {\r\n            var name,\r\n                msg,\r\n                variablePath,\r\n                $wrapper,\r\n                lostVariableClass = 'magento-placeholder-error';\r\n\r\n            if (\r\n                this.isEditMode &&\r\n                typeof selectedElement !== 'undefined' &&\r\n                jQuery(selectedElement).hasClass(lostVariableClass)\r\n            ) {\r\n\r\n                variablePath = MagentovariablePlugin.getElementVariablePath(selectedElement);\r\n                name = variablePath.split(':');\r\n                msg = $t('The variable %1 is no longer available. Select a different variable.')\r\n                    .replace('%1', name[1]);\r\n\r\n                jQuery('body').notification('clear')\r\n                    .notification('add', {\r\n                        error: true,\r\n                        message: msg,\r\n\r\n                        /**\r\n                         * @param {String} message\r\n                         */\r\n                        insertMethod: function (message) {\r\n                            $wrapper = jQuery('<div></div>').html(message);\r\n\r\n                            jQuery('.modal-header .page-main-actions').after($wrapper);\r\n                        }\r\n                    });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get selected variable directive.\r\n         *\r\n         * @returns {*}\r\n         */\r\n        getVariableCode: function () {\r\n            var code = registry.get('variables_modal.variables_modal.variables.variable_selector')\r\n                    .selectedVariableCode(),\r\n                directive = code;\r\n\r\n            // processing switch here as content must contain only path/code without type\r\n            if (typeof code !== 'undefined') {\r\n                if (code.match('^default:')) {\r\n                    directive = configGenerator.processConfig(code.replace('default:', ''));\r\n                } else if (code.match('^custom:')) {\r\n                    directive = customGenerator.processConfig(code.replace('custom:', ''));\r\n                }\r\n\r\n                return directive;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get buttons configuration for slideout dialog.\r\n         *\r\n         * @param {Boolean} isEditMode\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getButtonsConfig: function (isEditMode) {\r\n\r\n            var self = this,\r\n                buttonsData;\r\n\r\n            buttonsData = [\r\n                {\r\n\r\n                    text: $t('Cancel'),\r\n                    'class': 'action-scalable cancel',\r\n\r\n                    /**\r\n                     * @param {jQuery.Event} event\r\n                     */\r\n                    click: function (event) {\r\n                        this.closeModal(event);\r\n                    }\r\n                },\r\n                {\r\n\r\n                    text: isEditMode ? $t('Save') : $t('Insert Variable'),\r\n                    class: 'action-primary ' + (isEditMode ? '' : 'disabled'),\r\n                    attr: {\r\n                        'id': 'insert_variable'\r\n                    },\r\n\r\n                    /**\r\n                     * Insert Variable\r\n                     */\r\n                    click: function () {\r\n                        self.insertVariable(self.getVariableCode());\r\n                    }\r\n                }\r\n            ];\r\n\r\n            return buttonsData;\r\n        },\r\n\r\n        /**\r\n         * Prepare variables row.\r\n         *\r\n         * @param {String} varValue\r\n         * @param {*} varLabel\r\n         * @return {String}\r\n         * @deprecated This method isn't relevant after ui changes\r\n         */\r\n        prepareVariableRow: function (varValue, varLabel) {\r\n            var value = varValue.replace(/\"/g, '&quot;').replace(/'/g, '\\\\&#39;');\r\n\r\n            return '<a href=\"#\" onclick=\"' +\r\n                this.insertFunction +\r\n                '(\\'' +\r\n                value +\r\n                '\\');return false;\">' +\r\n                varLabel +\r\n                '</a>';\r\n        },\r\n\r\n        /**\r\n         * Insert variable into WYSIWYG editor.\r\n         *\r\n         * @param {*} value\r\n         * @return {Object}\r\n         */\r\n        insertVariable: function (value) {\r\n            var windowId = this.dialogWindowId,\r\n                textareaElm, scrollPos, wysiwygEditorFocused;\r\n\r\n            jQuery('#' + windowId).modal('closeModal');\r\n            textareaElm = $(this.textareaElementId);\r\n\r\n            //to support switching between wysiwyg editors\r\n            wysiwygEditorFocused = wysiwyg && wysiwyg.activeEditor();\r\n\r\n            if (wysiwygEditorFocused && wysiwyg.get(this.textareaElementId)) {\r\n                if (jQuery(this.selectedPlaceholder).hasClass('magento-placeholder')) {\r\n                    wysiwyg.setCaretOnElement(this.selectedPlaceholder, 1);\r\n                }\r\n                wysiwyg.insertContent(value, false);\r\n\r\n                if (this.selectedPlaceholder && jQuery(this.selectedPlaceholder).hasClass('magento-placeholder')) {\r\n                    this.selectedPlaceholder.remove();\r\n                }\r\n\r\n            } else if (textareaElm) {\r\n                scrollPos = textareaElm.scrollTop;\r\n                updateElementAtCursor(textareaElm, value);\r\n                textareaElm.focus();\r\n                textareaElm.scrollTop = scrollPos;\r\n                jQuery(textareaElm).trigger('change');\r\n                textareaElm = null;\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n    };\r\n\r\n    window.MagentovariablePlugin = {\r\n        editor: null,\r\n        variables: null,\r\n        textareaId: null,\r\n\r\n        /**\r\n         * Bind editor.\r\n         *\r\n         * @param {*} editor\r\n         */\r\n        setEditor: function (editor) {\r\n            this.editor = editor;\r\n        },\r\n\r\n        /**\r\n         * Load variables chooser.\r\n         *\r\n         * @param {String} url\r\n         * @param {*} textareaId\r\n         * @param {Object} selectedElement\r\n         *\r\n         * @return {Object}\r\n         */\r\n        loadChooser: function (url, textareaId, selectedElement) {\r\n            this.textareaId = textareaId;\r\n\r\n            new Ajax.Request(url, {\r\n                parameters: {},\r\n                onComplete: function (transport) {\r\n                    Variables.init(this.textareaId, 'MagentovariablePlugin.insertVariable', this.editor);\r\n                    Variables.isEditMode = !!this.getElementVariablePath(selectedElement);\r\n                    this.variablesContent = transport.responseText;\r\n                    Variables.openDialogWindow(this.variablesContent, selectedElement);\r\n                    Variables.initUiGrid();\r\n                }.bind(this)\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Open variables chooser window.\r\n         *\r\n         * @param {*} variables\r\n         * @deprecated This method isn't relevant after ui changes\r\n         */\r\n        openChooser: function (variables) {\r\n            Variables.openVariableChooser(variables);\r\n        },\r\n\r\n        /**\r\n         * Insert variable.\r\n         *\r\n         * @param {*} value\r\n         *\r\n         * @return {Object}\r\n         */\r\n        insertVariable: function (value) {\r\n            if (this.textareaId) {\r\n                Variables.init(this.textareaId);\r\n                Variables.insertVariable(value);\r\n            } else {\r\n                Variables.closeDialogWindow();\r\n                Variables.insertVariable(value);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get element variable path.\r\n         *\r\n         * @param {Object} element\r\n         * @returns {String}\r\n         */\r\n        getElementVariablePath: function (element) {\r\n            var type, code;\r\n\r\n            if (!element || !jQuery(element).hasClass('magento-variable')) {\r\n                return '';\r\n            }\r\n            type = jQuery(element).hasClass('magento-custom-var') ? 'custom' : 'default';\r\n            code = Base64.idDecode(element.getAttribute('id'));\r\n\r\n            return type + ':' + code;\r\n        }\r\n    };\r\n});\r\n","Magento_Variable/js/config-directive-generator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    return _.extend({\r\n        directiveTemplate: '{{config path=\"%s\"}}',\r\n\r\n        /**\r\n         * @param {String} path\r\n         * @return {String}\r\n         */\r\n        processConfig: function (path) {\r\n            return this.directiveTemplate.replace('%s', path);\r\n\r\n        }\r\n\r\n    });\r\n\r\n});\r\n","Magento_Variable/js/custom-directive-generator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    return _.extend({\r\n        directiveTemplate: '{{customVar code=%s}}',\r\n\r\n        /**\r\n         * @param {String} path\r\n         * @return {String}\r\n         */\r\n        processConfig: function (path) {\r\n            return this.directiveTemplate.replace('%s', path);\r\n        }\r\n\r\n    });\r\n\r\n});\r\n","Magento_Variable/js/grid/columns/radioselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mage/translate',\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'jquery'\r\n], function (_, $t, Column, jQuery) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_Variable/grid/cells/radioselect',\r\n            draggable: false,\r\n            sortable: false,\r\n            selectedVariableCode: null,\r\n            selectedVariableType: null\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['selectedVariableCode']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Remove disable class from Insert Variable button after Variable has been chosen.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        selectVariable: function () {\r\n            if (jQuery('#insert_variable').hasClass('disabled')) {\r\n                jQuery('#insert_variable').removeClass('disabled');\r\n            }\r\n\r\n            return true;\r\n        }\r\n    });\r\n});\r\n","Magento_Vault/js/vault.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\n/* @api */\r\ndefine([\r\n    'jquery',\r\n    'uiComponent'\r\n], function ($, Class) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            $selector: null,\r\n            selector: 'edit_form',\r\n            fieldset: '',\r\n            active: false,\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            var self = this,\r\n                paymentSelector = '[name=\"payment[method]\"][value=\"' + this.getCode() + '\"]:checked';\r\n\r\n            self.$selector = $('#' + self.selector);\r\n            this._super()\r\n                .observe(['active']);\r\n\r\n            if (self.$selector.find(paymentSelector).length !== 0) {\r\n                this.active(true);\r\n            }\r\n\r\n            $('#' + self.fieldset).find('[name=\"payment[token_switcher]\"]')\r\n                .on('click', this.rememberTokenSwitcher.bind(this));\r\n\r\n            // re-init payment method events\r\n            self.$selector.off('changePaymentMethod.' + this.getCode())\r\n                .on('changePaymentMethod.' + this.getCode(), this.changePaymentMethod.bind(this));\r\n\r\n            if (this.active()) {\r\n                this.chooseTokenSwitcher();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Enable/disable current payment method\r\n         * @param {Object} event\r\n         * @param {String} method\r\n         * @returns {exports.changePaymentMethod}\r\n         */\r\n        changePaymentMethod: function (event, method) {\r\n            this.active(method === this.getCode());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Save last chosen token switcher\r\n         * @param {Object} event\r\n         * @returns {exports.rememberTokenSwitcher}\r\n         */\r\n        rememberTokenSwitcher: function (event) {\r\n            $('#' + this.selector).data('lastTokenSwitcherId', event.target.id);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Select token switcher\r\n         * @returns {exports.chooseTokenSwitcher}\r\n         */\r\n        chooseTokenSwitcher: function () {\r\n            var lastTokenSwitcherId = $('#' + this.selector).data('lastTokenSwitcherId');\r\n\r\n            if (lastTokenSwitcherId) {\r\n                $('#' + lastTokenSwitcherId).trigger('click');\r\n            } else {\r\n                $('#' + this.fieldset + ' input:radio:first').trigger('click');\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggered when payment changed\r\n         * @param {Boolean} isActive\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            if (!isActive) {\r\n                this.$selector.trigger('setVaultNotActive.' + this.getCode());\r\n\r\n                return;\r\n            }\r\n            this.chooseTokenSwitcher();\r\n            window.order.addExcludedPaymentMethod(this.getCode());\r\n        },\r\n\r\n        /**\r\n         * Get payment method code\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return this.code;\r\n        }\r\n    });\r\n});\r\n","Magento_Weee/js/fpt-attribute.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global RegionUpdater */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui',\r\n    'mage/adminhtml/form'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.fptAttribute', {\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var widget = this;\r\n\r\n            this.rowTmpl = mageTemplate(this.element.find('[data-role=\"row-template\"]').html());\r\n\r\n            this._initOptionItem();\r\n\r\n            if ($(this.options.bundlePriceType).val() === '0') {\r\n                this.element.hide();\r\n            }\r\n\r\n            $.each(this.options.itemsData, function () {\r\n                widget.addItem(this);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _initOptionItem: function () {\r\n            var widget = this,\r\n                isOriginalRequired = $(widget.element).hasClass('required');\r\n\r\n            this._on({\r\n                /**\r\n                 * Add new tax item.\r\n                 *\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'click [data-action=add-fpt-item]': function (event) {\r\n                    this.addItem(event);\r\n                },\r\n\r\n                /**\r\n                 * Delete tax item.\r\n                 *\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'click [data-action=delete-fpt-item]': function (event) {\r\n                    var parent = $(event.target).closest('[data-role=\"fpt-item-row\"]');\r\n\r\n                    parent.find('[data-role=\"delete-fpt-item\"]').val(1);\r\n                    parent.addClass('ignore-validate').hide();\r\n                },\r\n\r\n                /**\r\n                 * Change tax item country/state.\r\n                 *\r\n                 * @param {jQuery.Event} event\r\n                 * @param {Object} data\r\n                 */\r\n                'change [data-role=\"select-country\"]': function (event, data) {\r\n                    var currentElement = event.target || event.srcElement || event.currentTarget,\r\n                        parentElement = $(currentElement).closest('[data-role=\"fpt-item-row\"]'),\r\n                        updater;\r\n\r\n                    data = data || {};\r\n                    updater = new RegionUpdater(\r\n                        parentElement.find('[data-role=\"select-country\"]').attr('id'), null,\r\n                        parentElement.find('[data-role=\"select-state\"]').attr('id'),\r\n                        widget.options.region, 'disable', true\r\n                    );\r\n                    updater.update();\r\n                    //set selected state value if set\r\n                    if (data.state) {\r\n                        parentElement.find('[data-role=\"select-state\"]').val(data.state);\r\n                    }\r\n\r\n                    if (!isOriginalRequired && $(widget.element).hasClass('required')) {\r\n                        $(widget.element).removeClass('required');\r\n                    }\r\n                }\r\n            });\r\n\r\n            $(this.options.bundlePriceType).on('change', function (event) {\r\n                var attributeItems = widget.element.find('[data-role=\"delete-fpt-item\"]');\r\n\r\n                if ($(event.target).val() === '0') {\r\n                    widget.element.hide();\r\n                    attributeItems.each(function () {\r\n                        $(this).val(1);\r\n                    });\r\n                } else {\r\n                    widget.element.show();\r\n                    attributeItems.each(function () {\r\n                        if ($(this).closest('[data-role=\"fpt-item-row\"]').is(':visible')) {\r\n                            $(this).val(0);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Add custom option.\r\n         *\r\n         * @param {jQuery.Event} event\r\n         */\r\n        addItem: function (event) {\r\n            var data = {},\r\n                currentElement = event.target || event.srcElement || event.currentTarget,\r\n                tmpl;\r\n\r\n            if (typeof currentElement !== 'undefined') {\r\n                data['website_id'] = 0;\r\n            } else {\r\n                data = event;\r\n            }\r\n\r\n            data.index = this.element.find('[data-role=\"fpt-item-row\"]').length;\r\n\r\n            tmpl = this.rowTmpl({\r\n                data: data\r\n            });\r\n\r\n            $(tmpl).appendTo(this.element.find('[data-role=\"fpt-item-container\"]'));\r\n\r\n            //set selected website_id value if set\r\n            if (data['website_id']) {\r\n                this.element.find('[data-role=\"select-website\"][id$=\"_' + data.index + '_website\"]')\r\n                    .val(data['website_id']);\r\n            }\r\n\r\n            //set selected country value if set\r\n            if (data.country) {\r\n                this.element.find('[data-role=\"select-country\"][id$=\"_' + data.index + '_country\"]')\r\n                    .val(data.country).trigger('change', data);\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.fptAttribute;\r\n});\r\n","Magento_Weee/js/fpt-group.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/group',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/lib/validation/validator',\r\n    'mage/translate',\r\n    'underscore'\r\n], function (Group, uiRegistry, validation, $t, _) {\r\n    'use strict';\r\n\r\n    return Group.extend({\r\n        defaults: {\r\n            visible: true,\r\n            label: '',\r\n            showLabel: true,\r\n            required: false,\r\n            template: 'ui/group/group',\r\n            fieldTemplate: 'ui/form/field',\r\n            breakLine: true,\r\n            validateWholeGroup: false,\r\n            additionalClasses: {}\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            validation.addRule('validate-fpt-group', function (value) {\r\n                if (value.indexOf('?') !== -1) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }, $t(\r\n                'Set unique country-state combinations within the same fixed product tax. ' +\r\n                'Verify the combinations and try again.'\r\n            ));\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _handleOptionsAvailability: function () {\r\n            var parent,\r\n                dup;\r\n\r\n            dup = {};\r\n            parent = uiRegistry.get(uiRegistry.get(this.parentName).parentName);\r\n            _.each(parent.elems(), function (elem) {\r\n                var country,\r\n                    state,\r\n                    val,\r\n                    key;\r\n\r\n                country = uiRegistry.get(elem.name + '.countryState.country');\r\n                state = uiRegistry.get(elem.name + '.countryState.state');\r\n                val = uiRegistry.get(elem.name + '.countryState.val');\r\n\r\n                key = country.value() + (state.value() > 0 ? state.value() : 0);\r\n                dup[key]++;\r\n\r\n                if (!dup[key]) {\r\n                    dup[key] = 1;\r\n                    val.value('');\r\n                } else {\r\n                    dup[key]++;\r\n                    val.value(country.value() + '?' + country.name);\r\n                }\r\n            });\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initElement: function (elem) {\r\n            var obj;\r\n\r\n            obj = this;\r\n            this._super();\r\n            elem.on('value', function () {\r\n                obj._handleOptionsAvailability();\r\n            });\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Weee/js/regions-tax-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/select'\r\n], function (Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            filterBy: {\r\n                field: 'country',\r\n                target: '${ $.parentName }.country:value'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        filter: function () {\r\n            this._super();\r\n            this.disableSelect();\r\n        },\r\n\r\n        /**\r\n         * Disables select if there's no regions/states\r\n         *\r\n         * @returns {*} instance - Chainable\r\n         */\r\n        disableSelect: function () {\r\n            var empty = !this.options().length;\r\n\r\n            this.disabled(empty);\r\n\r\n            if (empty) {\r\n                this.error('');\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Weee/js/price/adjustment.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_Weee/price/adjustment',\r\n            dataSource: '${ $.parentName }.provider',\r\n            //Weee configuration constants can be configured from backend\r\n            inclFptWithDesc: 1,//show FPT and description\r\n            inclFpt: 0, //show FPT attribute\r\n            exclFpt: 2, //do not show FPT\r\n            bothFptPrices: 3 //show price without FPT and with FPT and with description\r\n        },\r\n\r\n        /**\r\n         * Get Weee attributes.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} Weee html\r\n         */\r\n        getWeeeAttributes: function (row) {\r\n            return row['price_info']['extension_attributes']['weee_attributes'];\r\n        },\r\n\r\n        /**\r\n         * Get Weee without Tax attributes.\r\n         *\r\n         * @param {Object} taxAmount\r\n         * @return {HTMLElement} Weee html\r\n         */\r\n        getWeeeTaxWithoutTax: function (taxAmount) {\r\n            return taxAmount['amount_excl_tax'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getWeeeTaxWithoutTax.\r\n         *\r\n         * @param {Object} taxAmount\r\n         * @return {HTMLElement} Weee html\r\n         */\r\n        getWeeeTaxWithoutTaxUnsanitizedHtml: function (taxAmount) {\r\n            return this.getWeeeTaxWithoutTax(taxAmount);\r\n        },\r\n\r\n        /**\r\n         * Get Weee with Tax attributes.\r\n         *\r\n         * @param {Object} taxAmount\r\n         * @return {HTMLElement} Weee html\r\n         */\r\n        getWeeeTaxWithTax: function (taxAmount) {\r\n            return taxAmount['tax_amount_incl_tax'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getWeeeTaxWithTax.\r\n         *\r\n         * @param {Object} taxAmount\r\n         * @return {HTMLElement} Weee html\r\n         */\r\n        getWeeeTaxWithTaxUnsanitizedHtml: function (taxAmount) {\r\n            return this.getWeeeTaxWithTax(taxAmount);\r\n        },\r\n\r\n        /**\r\n         * Get Weee Tax name.\r\n         *\r\n         * @param {String} taxAmount\r\n         * @return {String} Weee name\r\n         */\r\n        getWeeTaxAttributeName: function (taxAmount) {\r\n            return taxAmount['attribute_code'];\r\n        },\r\n\r\n        /**\r\n         * Set price type.\r\n         *\r\n         * @param {String} priceType\r\n         * @return {Object}\r\n         */\r\n        setPriceType: function (priceType) {\r\n            this.taxPriceType = priceType;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check if Weee Tax must be shown.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        isShown: function (row) {\r\n            return row['price_info']['extension_attributes']['weee_attributes'].length;\r\n        },\r\n\r\n        /**\r\n         * Get Weee final price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} Weee final price html\r\n         */\r\n        getWeeeAdjustment: function (row) {\r\n            return row['price_info']['extension_attributes']['weee_adjustment'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getWeeeAdjustment.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} Weee final price html\r\n         */\r\n        getWeeeAdjustmentUnsanitizedHtml: function (row) {\r\n            return this.getWeeeAdjustment(row);\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price including FPT only.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceInclFpt: function () {\r\n            return +this.source.data.displayWeee === this.inclFpt;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display\r\n         * price including FPT and FPT description.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceInclFptDescr: function () {\r\n            return +this.source.data.displayWeee === this.inclFptWithDesc;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price\r\n         * excluding FPT but including FPT description and final price.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceExclFptDescr: function () {\r\n            return +this.source.data.displayWeee === this.exclFpt;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price excluding FPT.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceExclFpt: function () {\r\n            return +this.source.data.displayWeee === this.bothFptPrices;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price excluding tax.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceExclTax: function () {\r\n            return +this.source.data.displayTaxes === this.inclFptWithDesc;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display price including tax.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayPriceInclTax: function () {\r\n            return +this.source.data.displayTaxes === this.exclFpt;\r\n        },\r\n\r\n        /**\r\n         * Return whether display setting is to display\r\n         * both price including tax and price excluding tax.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        displayBothPricesTax: function () {\r\n            return +this.source.data.displayTaxes === this.bothFptPrices;\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/braintree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/lib/view/utils/dom-observer',\r\n    'mage/translate',\r\n    'PayPal_Braintree/js/validator',\r\n    'braintree',\r\n    'braintreeHostedFields'\r\n], function ($, Class, alert, domObserver, $t, validator, client, hostedFields) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n\r\n        defaults: {\r\n            $selector: null,\r\n            selector: 'edit_form',\r\n            container: 'payment_form_braintree',\r\n            active: false,\r\n            scriptLoaded: false,\r\n            braintree: null,\r\n            selectedCardType: null,\r\n            imports: {\r\n                onActiveChange: 'active'\r\n            },\r\n            hostedFieldsInstance: null\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            var self = this;\r\n\r\n            validator.setConfig(this);\r\n\r\n            self.$selector = $('#' + self.selector);\r\n            this._super()\r\n                .observe([\r\n                    'active',\r\n                    'scriptLoaded',\r\n                    'selectedCardType'\r\n                ]);\r\n\r\n            // re-init payment method events\r\n            self.$selector.off('changePaymentMethod.' + this.code)\r\n                .on('changePaymentMethod.' + this.code, this.changePaymentMethod.bind(this));\r\n\r\n            // listen block changes\r\n            domObserver.get('#' + self.container, function () {\r\n                if (self.scriptLoaded()) {\r\n                    self.$selector.off('submit');\r\n                    self.initBraintree();\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Enable/disable current payment method\r\n         * @param {Object} event\r\n         * @param {String} method\r\n         * @returns {exports.changePaymentMethod}\r\n         */\r\n        changePaymentMethod: function (event, method) {\r\n            this.active(method === this.code);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggered when payment changed\r\n         * @param {Boolean} isActive\r\n         */\r\n        onActiveChange: function (isActive) {\r\n            if (!isActive) {\r\n                this.$selector.off('submitOrder.braintree');\r\n                this.$selector.on('submitOrder', function () {\r\n                    $('#payment_form_braintree').find('[type=\"submit\"]').trigger('click');\r\n                    $('#edit_form').trigger('realOrder');\r\n                });\r\n\r\n                return;\r\n            }\r\n            this.disableEventListeners();\r\n\r\n            if (typeof window.order !== 'undefined') {\r\n                window.order.addExcludedPaymentMethod(this.code);\r\n            }\r\n\r\n            if (!this.clientToken) {\r\n                this.error($.mage.__('This payment is not available'));\r\n\r\n                return;\r\n            }\r\n\r\n            this.enableEventListeners();\r\n\r\n            if (!this.scriptLoaded()) {\r\n                this.initBraintree();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Setup Braintree SDK\r\n         */\r\n        initBraintree: function () {\r\n            var self = this;\r\n\r\n            this.scriptLoaded(true);\r\n\r\n            self.disableEventListeners();\r\n\r\n            try {\r\n                $('body').trigger('processStart');\r\n\r\n                client.create({\r\n                    authorization: self.clientToken\r\n                }, function (clientErr, clientInstance) {\r\n                    if (clientErr) {\r\n                        console.error('Error!', clientErr);\r\n                        return self.error(clientErr);\r\n                    }\r\n\r\n                    hostedFields.create({\r\n                        client: clientInstance,\r\n                        fields: self.getHostedFields()\r\n                    }, function (createErr, hostedFieldsInstance) {\r\n                        if (createErr) {\r\n                            self.error($t(createErr));\r\n                            console.error('Error!', createErr);\r\n                            return;\r\n                        }\r\n\r\n                        self.hostedFieldsInstance = hostedFieldsInstance;\r\n                        self.enableEventListeners();\r\n\r\n                        $('body').trigger('processStop');\r\n                    });\r\n                });\r\n            } catch (e) {\r\n                $('body').trigger('processStop');\r\n                self.error(e.message);\r\n                console.log(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get hosted fields configuration\r\n         * @returns {Object}\r\n         */\r\n        getHostedFields: function () {\r\n            var self = this,\r\n                fields = {\r\n                    number: {\r\n                        selector: self.getSelector('cc_number'),\r\n                        placeholder: $t('4111 1111 1111 1111')\r\n                    },\r\n                    expirationMonth: {\r\n                        selector: self.getSelector('cc_exp_month'),\r\n                        placeholder: $t('MM')\r\n                    },\r\n                    expirationYear: {\r\n                        selector: self.getSelector('cc_exp_year'),\r\n                        placeholder: $t('YY')\r\n                    }\r\n                };\r\n\r\n            if (self.useCvv) {\r\n                fields.cvv = {\r\n                    selector: self.getSelector('cc_cid'),\r\n                    placeholder: $t('123')\r\n                };\r\n            }\r\n\r\n            return fields;\r\n        },\r\n\r\n        /**\r\n         * Show alert message\r\n         * @param {String} message\r\n         */\r\n        error: function (message) {\r\n            alert({\r\n                content: message\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Enable form event listeners\r\n         */\r\n        enableEventListeners: function () {\r\n            this.$selector.on('submitOrder.braintree', this.submitOrder.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Disable form event listeners\r\n         */\r\n        disableEventListeners: function () {\r\n            this.$selector.off('submitOrder');\r\n            this.$selector.off('submit');\r\n        },\r\n\r\n        /**\r\n         * Store payment details\r\n         * @param {String} nonce\r\n         */\r\n        setPaymentDetails: function (nonce) {\r\n            var $container = $('#' + this.container);\r\n\r\n            $container.find('[name=\"payment[payment_method_nonce]\"]').val(nonce);\r\n        },\r\n\r\n        /**\r\n         * Trigger order submit\r\n         */\r\n        submitOrder: function () {\r\n            this.$selector.validate().form();\r\n            this.$selector.trigger('afterValidate.beforeSubmit');\r\n            $('body').trigger('processStop');\r\n\r\n            // validate parent form\r\n            if (this.$selector.validate().errorList.length) {\r\n                return false;\r\n            }\r\n\r\n            $('body').trigger('processStart');\r\n            this.tokenizeHostedFields();\r\n        },\r\n\r\n        /**\r\n         * Place order\r\n         */\r\n        placeOrder: function () {\r\n            $('#' + this.selector).trigger('realOrder');\r\n        },\r\n\r\n        /**\r\n         * Get list of currently available card types\r\n         * @returns {Array}\r\n         */\r\n        getCcAvailableTypes: function () {\r\n            var types = [],\r\n                $options = $(this.getSelector('cc_type')).find('option');\r\n\r\n            $.map($options, function (option) {\r\n                types.push($(option).val());\r\n            });\r\n\r\n            return types;\r\n        },\r\n\r\n        /**\r\n         * Get jQuery selector\r\n         * @param {String} field\r\n         * @returns {String}\r\n         */\r\n        getSelector: function (field) {\r\n            return '#' + this.code + '_' + field;\r\n        },\r\n\r\n        tokenizeHostedFields: function () {\r\n            this.hostedFieldsInstance.tokenize({\r\n                vault: false // vault or no?\r\n            }, function (tokenizeErr, payload) {\r\n                if (tokenizeErr) {\r\n                    $('body').trigger('processStop');\r\n                    switch (tokenizeErr.code) {\r\n                    case 'HOSTED_FIELDS_FIELDS_EMPTY':\r\n                        // occurs when none of the fields are filled in\r\n                        this.error($t('Please enter a card number, expiration date and CVV'));\r\n                        break;\r\n                    case 'HOSTED_FIELDS_FIELDS_INVALID':\r\n                        // occurs when certain fields do not pass client side validation\r\n                        this.error($t('Please correct the problems with the Credit Card fields.'));\r\n                        console.error('Some fields are invalid:', tokenizeErr.details.invalidFieldKeys);\r\n                        break;\r\n                    case 'HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE':\r\n                        // occurs when:\r\n                        //   * the client token used for client authorization was generated\r\n                        //     with a customer ID and the fail on duplicate payment method\r\n                        //     option is set to true\r\n                        //   * the card being tokenized has previously been vaulted (with any customer)\r\n                        // eslint-disable-next-line\r\n                            // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.fail_on_duplicate_payment_method\r\n                        // eslint-disable-next-line\r\n                            this.error($t('The payment method used, already exists in the user\\'s vault. Please use the vault option instead.'));\r\n                        break;\r\n                    case 'HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED':\r\n                        // occurs when:\r\n                        //   * the client token used for client authorization was generated\r\n                        //     with a customer ID and the verify card option is set to true\r\n                        //     and you have credit card verification turned on in the Braintree\r\n                        //     control panel\r\n                        //   * the cvv does not pass verfication\r\n                        /* eslint-disable */\r\n                            // (https://developers.braintreepayments.com/reference/general/testing/#avs-and-cvv/cid-responses)\r\n                            // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.verify_card\r\n                            /* eslint-enable */\r\n                        this.error($t('CVV did not pass verification'));\r\n                        break;\r\n                    case 'HOSTED_FIELDS_FAILED_TOKENIZATION':\r\n                        // occurs for any other tokenization error on the server\r\n                        this.error($t('There was an issue tokenizing the card. Please check the card is valid.'));\r\n                        console.error('Tokenization failed server side. Is the card valid?');\r\n                        break;\r\n                    case 'HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR':\r\n                        // occurs when the Braintree gateway cannot be contacted\r\n                        this.error($t('There was an error connecting to Braintree. Please try again.'));\r\n                        break;\r\n                    default:\r\n                        this.error($t('There was an issue processing the payment. Please try again.'));\r\n                        console.error('Braintree error', tokenizeErr);\r\n                        break;\r\n                    }\r\n                } else {\r\n                    this.setPaymentDetails(payload.nonce);\r\n                    $('#' + this.container).find('[type=\"submit\"]').trigger('click');\r\n                }\r\n            }.bind(this));\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/form-builder.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'underscore',\r\n        'mage/template'\r\n    ],\r\n    function ($, _, mageTemplate) {\r\n        'use strict';\r\n\r\n        return {\r\n\r\n            /**\r\n             * @param {Object} formData\r\n             * @returns {*|jQuery}\r\n             */\r\n            build: function (formData) {\r\n                var formTmpl = mageTemplate('<form action=\"<%= data.action %>\"' +\r\n                    ' method=\"POST\" hidden enctype=\"application/x-www-form-urlencoded\">' +\r\n                        '<% _.each(data.fields, function(val, key){ %>' +\r\n                            '<input value=\\'<%= val %>\\' name=\"<%= key %>\" type=\"hidden\">' +\r\n                        '<% }); %>' +\r\n                    '</form>');\r\n\r\n                return $(formTmpl({\r\n                    data: {\r\n                        action: formData.action,\r\n                        fields: formData.fields\r\n                    }\r\n                })).appendTo($('[data-container=\"body\"]'));\r\n            }\r\n        };\r\n    }\r\n);\r\n","PayPal_Braintree/js/paypalButtonPreview.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'braintree',\r\n    'braintreePayPalCheckout',\r\n    'domReady!'\r\n], function (_, $, braintree, paypalCheckout) {\r\n    'use strict';\r\n    let buttonIds = [];\r\n\r\n    return {\r\n        events: {\r\n            onClick: null\r\n        },\r\n\r\n        /**\r\n         * Initialize button\r\n         *\r\n         * @param payPalConfig\r\n         */\r\n        init: function (buttonConfig) {\r\n            buttonIds = [];\r\n            $('.action-braintree-paypal-logo').each(function () {\r\n                if (!$(this).hasClass('button-loaded')) {\r\n                    $(this).addClass('button-loaded');\r\n                    buttonIds.push($(this).attr('id'));\r\n                }\r\n            });\r\n\r\n            if (buttonIds.length > 0) {\r\n                this.loadSDK(buttonConfig);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Load Braintree PayPal SDK\r\n         * @param buttonConfig\r\n         */\r\n        loadSDK: function (buttonConfig) {\r\n            braintree.create({\r\n                authorization: buttonConfig.clientToken\r\n            }, function (clientErr, clientInstance) {\r\n                if (clientErr) {\r\n                    console.error('paypalCheckout error', clientErr);\r\n                    return this.showError('PayPal Checkout could not be initialized. Please contact the store owner.');\r\n                }\r\n                paypalCheckout.create({\r\n                    client: clientInstance\r\n                }, function (err, paypalCheckoutInstance) {\r\n                    if (typeof paypal !== 'undefined') {\r\n                        this.renderPayPalButtons(buttonIds);\r\n                        this.renderPayPalMessages();\r\n                    } else {\r\n                        let configSDK = {\r\n                                components: 'buttons,messages,funding-eligibility',\r\n                                'enable-funding': this.isCreditActive(buttonConfig) ? 'credit' : 'paylater',\r\n                                currency: buttonConfig.currency\r\n                            },\r\n\r\n                            buyerCountry = this.getMerchantCountry(buttonConfig);\r\n\r\n                        if (buttonConfig.environment === 'sandbox'\r\n                            && (buyerCountry !== '' || buyerCountry !== 'undefined'))\r\n                        {\r\n                            configSDK['buyer-country'] = buyerCountry;\r\n                        }\r\n                        paypalCheckoutInstance.loadPayPalSDK(configSDK, function () {\r\n                            this.renderPayPalButtons(buttonIds);\r\n                            this.renderPayPalMessages();\r\n                        }.bind(this));\r\n                    }\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Is Credit enabled\r\n         *\r\n         * @param buttonConfig\r\n         * @returns {boolean}\r\n         */\r\n        isCreditActive: function (buttonConfig) {\r\n            return buttonConfig.isCreditActive;\r\n        },\r\n\r\n        /**\r\n         * Get merchant country\r\n         *\r\n         * @param buttonConfig\r\n         * @returns {string}\r\n         */\r\n        getMerchantCountry: function (buttonConfig) {\r\n            return buttonConfig.merchantCountry;\r\n        },\r\n\r\n        /**\r\n         * Render PayPal buttons\r\n         * @param ids\r\n         */\r\n        renderPayPalButtons: function (ids) {\r\n            _.each(ids, function (id) {\r\n                this.payPalButton(id);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Render PayPal messages\r\n         */\r\n        renderPayPalMessages: function () {\r\n            $('.action-braintree-paypal-message').each(function () {\r\n                let messages = window.paypal.Messages({\r\n                    amount: $(this).data('pp-amount'),\r\n                    pageType: $(this).data('pp-type'),\r\n                    style: {\r\n                        layout: $(this).data('messaging-layout'),\r\n                        text: {\r\n                            color:   $(this).data('messaging-text-color')\r\n                        },\r\n                        logo: {\r\n                            type: $(this).data('messaging-logo'),\r\n                            position: $(this).data('messaging-logo-position')\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if ($('#' + $(this).attr('id')).length && $(this).data('messaging-show')) {\r\n                    messages.render('#' + $(this).attr('id'));\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param id\r\n         */\r\n        payPalButton: function (id) {\r\n            let buttonElement = $('#' + id),\r\n                fundingicons = buttonElement.data('fundingicons'),\r\n                style = {\r\n                    label: buttonElement.data('label'),\r\n                    color: buttonElement.data('color'),\r\n                    shape: buttonElement.data('shape'),\r\n                    fundingicons: fundingicons || ''\r\n                },\r\n\r\n                button = window.paypal.Buttons({\r\n                    fundingSource: buttonElement.data('funding'),\r\n                    style: style,\r\n\r\n                    onInit: function (data, actions) {\r\n                        actions.disable();\r\n                    }\r\n                });\r\n\r\n            if (!button.isEligible()) {\r\n                console.log('PayPal button is not eligible');\r\n                buttonElement.parent().remove();\r\n                return;\r\n            }\r\n            if ($('#' + buttonElement.attr('id')).length && buttonElement.data('show')) {\r\n                button.render('#' + buttonElement.attr('id'));\r\n            }\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/paypalStylingPreview.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\nrequire([\r\n    'underscore',\r\n    'jquery',\r\n    'domReady!'\r\n], function (_, $) {\r\n    'use strict';\r\n    let buttonIds = [], currentButtonId = '',\r\n\r\n        /**\r\n     * Update PayPal, Credit and Pay Later button styling if applicable\r\n     * @param location\r\n     * @param buttonType\r\n     * @param buttonShow\r\n     * @param buttonLabel\r\n     * @param buttonColor\r\n     * @param buttonShape\r\n     */\r\n        updatePayPalButtonStyling = function (buttonType, buttonShow, buttonLabel, buttonColor, buttonShape) {\r\n            $('.action-braintree-paypal-logo').each(function () {\r\n                if ($.inArray($(this).attr('id'), buttonIds) === -1) {\r\n                    buttonIds.push($(this).attr('id'));\r\n                }\r\n            });\r\n\r\n            buttonIds.each(function (id) {\r\n                let result = id.startsWith(buttonType);\r\n\r\n                if (result === true) {\r\n                    currentButtonId = id;\r\n                }\r\n            });\r\n\r\n            if (!currentButtonId) {\r\n                return;\r\n            }\r\n\r\n            let currentButtonElement = $('#' + currentButtonId),\r\n                style, fundingSource, button;\r\n\r\n            if (!currentButtonElement.length) {\r\n                return;\r\n            }\r\n\r\n            style = {\r\n                color: buttonColor,\r\n                shape: buttonShape,\r\n                label: buttonLabel\r\n            };\r\n            fundingSource = buttonType;\r\n            button;\r\n\r\n            style.fundingicons = true;\r\n\r\n            // Render\r\n            button = window.paypal.Buttons({\r\n                fundingSource: fundingSource,\r\n                style: style,\r\n\r\n                onInit: function (data, actions) {\r\n                    actions.disable();\r\n                }\r\n            });\r\n\r\n            if (!button.isEligible()) {\r\n                console.log('PayPal ' + buttonType.toUpperCase() + ' button is not eligible');\r\n                if (currentButtonElement.attr('id').startsWith(buttonType)) {\r\n                    currentButtonElement.parent().remove();\r\n                }\r\n                return;\r\n            }\r\n            if (currentButtonElement.length) {\r\n                currentButtonElement.empty();\r\n                if (buttonShow === '1') {\r\n                    button.render('#' + currentButtonElement.attr('id'));\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n     * Render and update Pay Later messaging style\r\n     * @param location\r\n     * @param messagingShow\r\n     * @param messagingLayout\r\n     * @param messagingLogo\r\n     * @param messagingLogoPosition\r\n     * @param messagingTextColor\r\n     */\r\n        renderPayLaterMessages = function (location, messagingShow, messagingLayout, messagingLogo,\r\n            messagingLogoPosition, messagingTextColor) {\r\n            $('.action-braintree-paypal-message').each(function () {\r\n                let messageElement = $('#' + $(this).attr('id')),\r\n\r\n                    payLaterMessageStyle = {\r\n                        layout: messagingLayout,\r\n                        text: {\r\n                            color: messagingTextColor\r\n                        },\r\n                        logo: {\r\n                            type: messagingLogo,\r\n                            position: messagingLogoPosition\r\n                        }\r\n                    },\r\n\r\n                    messageElementId = $(messageElement).attr('id'),\r\n                    messageAmount = $(messageElement).data('pp-amount'),\r\n                    parentElementId = messageElement.closest('tr').attr('id'),\r\n\r\n                    messages = window.paypal.Messages({\r\n                        amount: $(messageElement).data('pp-amount'),\r\n                        pageType: location,\r\n                        style: payLaterMessageStyle\r\n                    });\r\n\r\n                if (messageElement.length) {\r\n                    if (messagingShow === '1') {\r\n                        messageElement.remove();\r\n                        $('#' + parentElementId + ' td.value').append(`\r\n                        <div class=\"action-braintree-paypal-message\"\r\n                            id=\"${messageElementId}\"\r\n                            data-pp-amount=\"${messageAmount}\"\r\n                            data-pp-type=\"${location}\"\r\n                            data-messaging-show=\"${messagingShow}\"\r\n                            data-messaging-layout=\"${messagingLayout}\"\r\n                            data-messaging-logo=\"${messagingLogo}\"\r\n                            data-messaging-logo-position=\"${messagingLogoPosition}\"\r\n                            data-messaging-text-color=\"${messagingTextColor}\">\r\n                        </div>`);\r\n                        messages.render('#' + messageElementId);\r\n                    } else {\r\n                        messageElement.hide();\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n    $(document).ready(function () {\r\n        let location = $('.payment-location').val(),\r\n            buttonType = $('.' + location + '-button-type').val(),\r\n            buttonShow = '', buttonLabel = '', buttonColor = '', buttonShape = '',\r\n            messagingShow = '', messagingLayout = '', messagingLogo = '',\r\n            messagingLogoPosition = '', messagingTextColor = '';\r\n\r\n        $('.payment-location').on('change', function (customEvent) {\r\n            location = $(this).val();\r\n            buttonType = $('.' + location + '-button-type').val();\r\n            buttonShow = $('.' + location + '-' + buttonType + '-show').val();\r\n            buttonLabel = $('.' + location + '-' + buttonType + '-label').val();\r\n            buttonColor = $('.' + location + '-' + buttonType + '-color').val();\r\n            buttonShape = $('.' + location + '-' + buttonType + '-shape').val();\r\n\r\n            window.hidePaypalSections();\r\n            updatePayPalButtonStyling(buttonType, buttonShow, buttonLabel, buttonColor, buttonShape);\r\n\r\n            // render pay later messages when location changed\r\n            messagingShow = $('.' + location + '-messaging-show').val();\r\n            messagingLayout = $('.' + location + '-messaging-layout').val();\r\n            messagingLogo = $('.' + location + '-messaging-logo').val();\r\n            messagingLogoPosition = $('.' + location + '-messaging-logo-position').val();\r\n            messagingTextColor = $('.' + location + '-messaging-text-color').val();\r\n\r\n            renderPayLaterMessages(messagingShow, messagingLayout, messagingLogo,\r\n                messagingLogoPosition, messagingTextColor);\r\n            customEvent.stopImmediatePropagation();\r\n        });\r\n\r\n        $('select').change(function () {\r\n            $(document).on('change', '.' + location + '-button-type', function (customEvent) {\r\n                buttonType = $(this).val();\r\n                buttonShow = $('.' + location + '-' + buttonType + '-show').val();\r\n                buttonLabel = $('.' + location + '-' + buttonType + '-label').val();\r\n                buttonColor = $('.' + location + '-' + buttonType + '-color').val();\r\n                buttonShape = $('.' + location + '-' + buttonType + '-shape').val();\r\n\r\n                updatePayPalButtonStyling(buttonType, buttonShow, buttonLabel, buttonColor, buttonShape);\r\n                customEvent.stopImmediatePropagation();\r\n            });\r\n\r\n            $(document).on('change', '.' + location + '-' + buttonType + '-show', function (customEvent) {\r\n                buttonShow = $(this).val();\r\n                buttonLabel = $('.' + location + '-' + buttonType + '-label').val();\r\n                buttonColor = $('.' + location + '-' + buttonType + '-color').val();\r\n                buttonShape = $('.' + location + '-' + buttonType + '-shape').val();\r\n\r\n                updatePayPalButtonStyling(buttonType, buttonShow, buttonLabel, buttonColor, buttonShape);\r\n                customEvent.stopImmediatePropagation();\r\n            });\r\n\r\n\r\n            $(document).on('change', '.' + location + '-' + buttonType + '-label', function (customEvent) {\r\n                buttonLabel = $(this).val();\r\n                buttonShow = $('.' + location + '-' + buttonType + '-show').val();\r\n                buttonColor = $('.' + location + '-' + buttonType + '-color').val();\r\n                buttonShape = $('.' + location + '-' + buttonType + '-shape').val();\r\n\r\n                updatePayPalButtonStyling(buttonType, buttonShow, buttonLabel, buttonColor, buttonShape);\r\n                customEvent.stopImmediatePropagation();\r\n            });\r\n\r\n            $(document).on('change', '.' + location + '-' + buttonType + '-color', function (customEvent) {\r\n                buttonColor = $(this).val();\r\n                buttonShow = $('.' + location + '-' + buttonType + '-show').val();\r\n                buttonLabel = $('.' + location + '-' + buttonType + '-label').val();\r\n                buttonShape = $('.' + location + '-' + buttonType + '-shape').val();\r\n\r\n                updatePayPalButtonStyling(buttonType, buttonShow, buttonLabel, buttonColor, buttonShape);\r\n                customEvent.stopImmediatePropagation();\r\n            });\r\n\r\n            $(document).on('change', '.' + location + '-' + buttonType + '-shape', function (customEvent) {\r\n                buttonShape = $(this).val();\r\n                buttonShow = $('.' + location + '-' + buttonType + '-show').val();\r\n                buttonLabel = $('.' + location + '-' + buttonType + '-label').val();\r\n                buttonColor = $('.' + location + '-' + buttonType + '-color').val();\r\n\r\n                updatePayPalButtonStyling(buttonType, buttonShow, buttonLabel, buttonColor, buttonShape);\r\n                customEvent.stopImmediatePropagation();\r\n            });\r\n\r\n            $(document).on('change', '.' + location + '-messaging-show', function (customEvent) {\r\n                messagingShow = $(this).val();\r\n                messagingLayout = $('.' + location + '-messaging-layout').val();\r\n                messagingLogo = $('.' + location + '-messaging-logo').val();\r\n                messagingLogoPosition = $('.' + location + '-messaging-logo-position').val();\r\n                messagingTextColor = $('.' + location + '-messaging-text-color').val();\r\n\r\n                renderPayLaterMessages(location, messagingShow, messagingLayout,\r\n                    messagingLogo, messagingLogoPosition, messagingTextColor);\r\n                customEvent.stopImmediatePropagation();\r\n            });\r\n\r\n            $(document).on('change', '.' + location + '-messaging-layout', function (customEvent) {\r\n                messagingShow = $('.' + location + '-messaging-show').val();\r\n                messagingLayout = $(this).val();\r\n                messagingLogo = $('.' + location + '-messaging-logo').val();\r\n                messagingLogoPosition = $('.' + location + '-messaging-logo-position').val();\r\n                messagingTextColor = $('.' + location + '-messaging-text-color').val();\r\n\r\n                renderPayLaterMessages(location, messagingShow, messagingLayout,\r\n                    messagingLogo, messagingLogoPosition, messagingTextColor);\r\n                customEvent.stopImmediatePropagation();\r\n            });\r\n\r\n            $(document).on('change', '.' + location + '-messaging-logo', function (customEvent) {\r\n                messagingShow = $('.' + location + '-messaging-show').val();\r\n                messagingLayout = $('.' + location + '-messaging-layout').val();\r\n                messagingLogo = $(this).val();\r\n                messagingLogoPosition = $('.' + location + '-messaging-logo-position').val();\r\n                messagingTextColor = $('.' + location + '-messaging-text-color').val();\r\n\r\n                renderPayLaterMessages(location, messagingShow, messagingLayout,\r\n                    messagingLogo, messagingLogoPosition, messagingTextColor);\r\n                customEvent.stopImmediatePropagation();\r\n            });\r\n\r\n            $(document).on('change', '.' + location + '-messaging-logo-position', function (customEvent) {\r\n                messagingShow = $('.' + location + '-messaging-show').val();\r\n                messagingLayout = $('.' + location + '-messaging-layout').val();\r\n                messagingLogo = $('.' + location + '-messaging-logo').val();\r\n                messagingLogoPosition = $(this).val();\r\n                messagingTextColor = $('.' + location + '-messaging-text-color').val();\r\n\r\n                renderPayLaterMessages(location, messagingShow, messagingLayout,\r\n                    messagingLogo, messagingLogoPosition, messagingTextColor);\r\n                customEvent.stopImmediatePropagation();\r\n            });\r\n\r\n            $(document).on('change', '.' + location + '-messaging-text-color', function (customEvent) {\r\n                messagingShow = $('.' + location + '-messaging-show').val();\r\n                messagingLayout = $('.' + location + '-messaging-layout').val();\r\n                messagingLogo = $('.' + location + '-messaging-logo').val();\r\n                messagingLogoPosition = $('.' + location + '-messaging-logo-position').val();\r\n                messagingTextColor = $(this).val();\r\n\r\n                renderPayLaterMessages(location, messagingShow, messagingLayout,\r\n                    messagingLogo, messagingLogoPosition, messagingTextColor);\r\n                customEvent.stopImmediatePropagation();\r\n            });\r\n        });\r\n    });\r\n});\r\n","PayPal_Braintree/js/system.js":"require(['jquery', 'Magento_Ui/js/modal/alert', 'mage/translate', 'domReady!'], function ($, alert, $t) {\r\n    'use strict';\r\n\r\n    function disablePayLaterMessages()\r\n    {\r\n        /* eslint-disable */\r\n        let merchantCountry = $('[data-ui-id=\"adminhtml-system-config-field-country-0-select-groups-account-fields-merchant-country-value\"]').val(),\r\n         payPalCredit = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-fields-braintree-paypal-credit-active-value\"]').val(),\r\n         cart = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-button-cart-fields-message-cart-enable-value\"]'),\r\n         product = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-button-checkout-fields-message-checkout-enable-value\"]'),\r\n         checkout = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-button-productpage-fields-message-productpage-enable-value\"]'),\r\n         allowedCountries = ['GB', 'FR', 'US', 'DE', 'AU'];\r\n        /* eslint-enable */\r\n\r\n        if ($.inArray(merchantCountry, allowedCountries) === -1 || payPalCredit === 1) {\r\n            //hide pay later message\r\n            cart.val(0).attr('readonly',true).click();\r\n            product.val(0).attr('readonly',true).click();\r\n            checkout.val(0).attr('readonly',true).click();\r\n        }\r\n        if (merchantCountry) {\r\n            if (merchantCountry === 'GB') {\r\n                merchantCountry = 'UK';\r\n            }\r\n            cart.next().find('a').attr('href', cart.next().find('a').attr('href') + merchantCountry.toLowerCase());\r\n            product.next().find('a')\r\n                .attr('href', product.next().find('a').attr('href') + merchantCountry.toLowerCase());\r\n            checkout.next().find('a')\r\n                .attr('href', checkout.next().find('a').attr('href') + merchantCountry.toLowerCase());\r\n        }\r\n\r\n    }\r\n\r\n    window.braintreeValidator = function (endpoint, environmentId, skip = false) {\r\n        environmentId = $('[data-ui-id=\"' + environmentId + '\"]').val();\r\n\r\n        let merchantId = '', publicId = '', privateId = '', errors = [], self = this;\r\n\r\n        if (environmentId === 'sandbox') {\r\n            /* eslint-disable */\r\n            merchantId = $('[data-ui-id=\"text-groups-braintree-section-groups-braintree-groups-braintree-required-fields-sandbox-merchant-id-value\"]').val();\r\n            publicId = $('[data-ui-id=\"password-groups-braintree-section-groups-braintree-groups-braintree-required-fields-sandbox-public-key-value\"]').val();\r\n            privateId = $('[data-ui-id=\"password-groups-braintree-section-groups-braintree-groups-braintree-required-fields-sandbox-private-key-value\"]').val();\r\n            /* eslint-enable */\r\n        } else {\r\n            /* eslint-disable */\r\n            merchantId = $('[data-ui-id=\"text-groups-braintree-section-groups-braintree-groups-braintree-required-fields-merchant-id-value\"]').val();\r\n            publicId = $('[data-ui-id=\"password-groups-braintree-section-groups-braintree-groups-braintree-required-fields-public-key-value\"]').val();\r\n            privateId = $('[data-ui-id=\"password-groups-braintree-section-groups-braintree-groups-braintree-required-fields-private-key-value\"]').val();\r\n            /* eslint-enable */\r\n        }\r\n\r\n        /* Remove previous success message if present */\r\n        if ($('.braintree-credentials-success-message')) {\r\n            $('.braintree-credentials-success-message').remove();\r\n        }\r\n\r\n        /* Basic field validation */\r\n\r\n        if (!environmentId || environmentId !== 'sandbox' && environmentId !== 'production') {\r\n            errors.push($t('Please select an Environment'));\r\n        }\r\n\r\n        if (!merchantId) {\r\n            errors.push($t('Please enter a Merchant ID'));\r\n        }\r\n\r\n        if (!publicId) {\r\n            errors.push($t('Please enter a Public Key'));\r\n        }\r\n\r\n        if (!privateId) {\r\n            errors.push($t('Please enter a Private Key'));\r\n        }\r\n\r\n        if (errors.length > 0) {\r\n            alert({\r\n                title: $t('Braintree Credential Validation Failed'),\r\n                content:  errors.join('<br />')\r\n            });\r\n            return false;\r\n        }\r\n\r\n        $(this).text($t('We\\'re validating your credentials...')).attr('disabled', true);\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: endpoint,\r\n            data: {\r\n                environment: environmentId,\r\n                merchant_id: merchantId,\r\n                public_key: publicId,\r\n                private_key: privateId\r\n            },\r\n            showLoader: true,\r\n            success: function (result) {\r\n                if (result.success === 'true') {\r\n                    if (skip === true) {\r\n                        // eslint-disable-next-line\r\n                        $('<div class=\"message message-success braintree-credentials-success-message\">' + $t('Your credentials are valid.') + '</div>').insertAfter($('.paypal-styling-buttons'));\r\n                    } else {\r\n                        // eslint-disable-next-line\r\n                        $('<div class=\"message message-success braintree-credentials-success-message\">' + $t('Your credentials are valid.') + '</div>').insertAfter(self);\r\n                    }\r\n                } else {\r\n                    alert({\r\n                        title: $t('Braintree Credential Validation Failed'),\r\n                        // eslint-disable-next-line\r\n                        content: $t('Your Braintree Credentials could not be validated. Please ensure you have selected the correct environment and entered a valid Merchant ID, Public Key and Private Key.')\r\n                    });\r\n                }\r\n            }\r\n        }).always(function () {\r\n            $(self).text($t('Validate Credentials')).attr('disabled', false);\r\n        });\r\n    };\r\n\r\n    window.applyForAll = function () {\r\n        let buttonShowStatus = '', buttonLabel = '', buttonColor = '', buttonShape = '',\r\n            locations = ['checkout', 'productpage', 'cart'], buttonTypes = ['paypal', 'paylater', 'credit'],\r\n\r\n            /* eslint-disable */\r\n         location = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-fields-payment-location-value\"]').val(),\r\n         buttonType = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + location + '-fields-paypal-location-' + location + '-button-type-value\"]').val(),\r\n         messagingShow,\r\n         messagingLayout,\r\n         messagingLogo,\r\n         messagingLogoPosition,\r\n         messagingTextColor;\r\n\r\n        buttonShowStatus = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + location + '-groups-button-location-' + location + '-type-' + buttonType + '-fields-button-location-' + location + '-type-' + buttonType + '-show-value\"]').val();\r\n        buttonLabel = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + location + '-groups-button-location-' + location + '-type-' + buttonType + '-fields-button-location-' + location + '-type-' + buttonType + '-label-value\"]').val();\r\n        buttonColor = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + location + '-groups-button-location-' + location + '-type-' + buttonType + '-fields-button-location-' + location + '-type-' + buttonType + '-color-value\"]').val();\r\n        buttonShape = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + location + '-groups-button-location-' + location + '-type-' + buttonType + '-fields-button-location-' + location + '-type-' + buttonType + '-shape-value\"]').val();\r\n        /* eslint-enable */\r\n\r\n        // pay later messaging styling field values\r\n        messagingShow = $('.' + location + '-messaging-show').val(),\r\n        messagingLayout = $('.' + location + '-messaging-layout').val(),\r\n        messagingLogo = $('.' + location + '-messaging-logo').val(),\r\n        messagingLogoPosition = $('.' + location + '-messaging-logo-position').val(),\r\n        messagingTextColor = $('.' + location + '-messaging-text-color').val();\r\n\r\n        locations.each(function (loc) {\r\n            buttonTypes.each(function (type) {\r\n                /* eslint-disable */\r\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-show-value\"]').val(buttonShowStatus).click();\r\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-label-value\"]').val(buttonLabel).click();\r\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-color-value\"]').val(buttonColor).click();\r\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-shape-value\"]').val(buttonShape).click();\r\n                /* eslint-enable */\r\n            });\r\n\r\n            // apply pay later messaging styling for all locations\r\n            $('.' + loc + '-messaging-show').val(messagingShow).click();\r\n            $('.' + loc + '-messaging-layout').val(messagingLayout).click();\r\n            $('.' + loc + '-messaging-logo').val(messagingLogo).click();\r\n            $('.' + loc + '-messaging-logo-position').val(messagingLogoPosition).click();\r\n            $('.' + loc + '-messaging-text-color').val(messagingTextColor).click();\r\n        });\r\n        $('#save').click();\r\n    };\r\n\r\n    window.resetAll = function () {\r\n        let locations = ['checkout', 'productpage', 'cart'], buttonTypes = ['paypal', 'paylater', 'credit'],\r\n            buttonShowStatus = 1, buttonLabel = 'paypal', buttonColor = 'gold', buttonShape = 'rect';\r\n\r\n        locations.each(function (loc) {\r\n            buttonTypes.each(function (type) {\r\n                /* eslint-disable */\r\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-show-value\"]').val(buttonShowStatus).click();\r\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-label-value\"]').val(buttonLabel).click();\r\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-color-value\"]').val(buttonColor).click();\r\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-shape-value\"]').val(buttonShape).click();\r\n                /* eslint-enable */\r\n            });\r\n\r\n            // reset pay later messaging styling to recommended defaults\r\n            $('.' + loc + '-messaging-show').val(1).click();\r\n            $('.' + loc + '-messaging-layout').val('text').click();\r\n            $('.' + loc + '-messaging-logo').val('inline').click();\r\n            $('.' + loc + '-messaging-logo-position').val('left').click();\r\n            $('.' + loc + '-messaging-text-color').val('black').click();\r\n        });\r\n        $('#save').click();\r\n    };\r\n\r\n    window.applyButton = function () {\r\n        let locations = ['checkout', 'productpage', 'cart'], buttonTypes = ['paypal', 'paylater', 'credit'];\r\n\r\n        locations.each(function (loc) {\r\n            buttonTypes.each(function (type) {\r\n                /* eslint-disable */\r\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-show-value\"]').click();\r\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-label-value\"]').click();\r\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-color-value\"]').click();\r\n                $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-groups-button-location-' + loc + '-type-' + type + '-fields-button-location-' + loc + '-type-' + type + '-shape-value\"]').click();\r\n                /* eslint-enable */\r\n            });\r\n\r\n            // apply pay later messaging styling to current location\r\n            $('.' + loc + '-messaging-show').click();\r\n            $('.' + loc + '-messaging-layout').click();\r\n            $('.' + loc + '-messaging-logo').click();\r\n            $('.' + loc + '-messaging-logo-position').click();\r\n            $('.' + loc + '-messaging-text-color').click();\r\n        });\r\n        $('#save').click();\r\n    };\r\n\r\n    window.hidePaypalSections = function () {\r\n        let mainLocation, merchantCountryIndex, mainType,\r\n            locations = ['checkout', 'productpage', 'cart'], buttonTypes = ['paypal', 'paylater', 'credit'];\r\n\r\n        mainLocation = $('.payment-location');\r\n        if (mainLocation.length < 1) {\r\n            return false;\r\n        }\r\n        merchantCountryIndex = mainLocation.attr('id').split('_')[1];\r\n        // eslint-disable-next-line\r\n        mainType = $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + mainLocation.val() + '-fields-paypal-location-' + mainLocation.val() + '-button-type-value\"]');\r\n        locations.each(function (loc) {\r\n        // eslint-disable-next-line\r\n            $('#row_payment_' + merchantCountryIndex + '_braintree_section_braintree_braintree_paypal_styling_button_' + loc).hide();\r\n            buttonTypes.each(function (type) {\r\n            // eslint-disable-next-line\r\n                $('#row_payment_' + merchantCountryIndex + '_braintree_section_braintree_braintree_paypal_styling_button_' + loc + '_button_location_' + loc + '_type_' + type).hide();\r\n            });\r\n        });\r\n        // eslint-disable-next-line\r\n        $('#row_payment_' + merchantCountryIndex + '_braintree_section_braintree_braintree_paypal_styling_button_' + mainLocation.val() + '_button_location_' + mainLocation.val() + '_type_' + mainType.val()).show();\r\n        // eslint-disable-next-line\r\n        $('#row_payment_' + merchantCountryIndex + '_braintree_section_braintree_braintree_paypal_styling_button_' + mainLocation.val()).show();\r\n    };\r\n\r\n    let locations = ['checkout', 'productpage', 'cart'];\r\n\r\n    window.hidePaypalSections();\r\n    locations.each(function (loc) {\r\n        // eslint-disable-next-line\r\n        $('[data-ui-id=\"select-groups-braintree-section-groups-braintree-groups-braintree-paypal-groups-styling-groups-button-' + loc + '-fields-paypal-location-' + loc + '-button-type-value\"]').change(function () {\r\n            window.hidePaypalSections();\r\n        });\r\n    });\r\n    disablePayLaterMessages();\r\n});\r\n","PayPal_Braintree/js/validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    return {\r\n        config: {},\r\n\r\n        /**\r\n         * Set configuration\r\n         * @param {Object} config\r\n         */\r\n        setConfig: function (config) {\r\n            this.config = config;\r\n        },\r\n\r\n        /**\r\n         * Get List of available card types\r\n         * @returns {*|exports.defaults.availableCardTypes|{}}\r\n         */\r\n        getAvailableCardTypes: function () {\r\n            return this.config.availableCardTypes;\r\n        },\r\n\r\n        /**\r\n         * Get list of card types\r\n         * @returns {Object}\r\n         */\r\n        getCcTypesMapper: function () {\r\n            return this.config.ccTypesMapper;\r\n        },\r\n\r\n        /**\r\n         * Find mage card type by Braintree type\r\n         * @param {String} type\r\n         * @param {Object} availableTypes\r\n         * @returns {*}\r\n         */\r\n        getMageCardType: function (type, availableTypes) {\r\n            var storedCardType = null,\r\n                mapper = this.getCcTypesMapper();\r\n\r\n            if (type && typeof mapper[type] !== 'undefined') {\r\n                storedCardType = mapper[type];\r\n\r\n                if (_.indexOf(availableTypes, storedCardType) !== -1) {\r\n                    return storedCardType;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * Filter list of available card types\r\n         * @param {Object} availableTypes\r\n         * @param {Object} countrySpecificCardTypes\r\n         * @returns {Object}\r\n         */\r\n        collectTypes: function (availableTypes, countrySpecificCardTypes) {\r\n            var key,\r\n                filteredTypes = [];\r\n\r\n            for (key in availableTypes) {\r\n                if (_.indexOf(countrySpecificCardTypes, availableTypes[key]) !== -1) {\r\n                    filteredTypes.push(availableTypes[key]);\r\n                }\r\n            }\r\n\r\n            return filteredTypes;\r\n        },\r\n\r\n        /**\r\n         * Get list of card types for country\r\n         * @param {String} countryId\r\n         * @returns {*}\r\n         */\r\n        getCountrySpecificCardTypes: function (countryId) {\r\n            if (typeof this.config.countrySpecificCardTypes[countryId] !== 'undefined') {\r\n                return this.config.countrySpecificCardTypes[countryId];\r\n            }\r\n\r\n            return false;\r\n        }\r\n    };\r\n});\r\n","PayPal_Braintree/js/vault.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'Magento_Ui/js/modal/alert'\r\n], function ($, Class, alert) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n        defaults: {\r\n            $selector: null,\r\n            selector: 'edit_form',\r\n            $container: null\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            var self = this;\r\n\r\n            self.$selector = $('#' + self.selector);\r\n            self.$container =  $('#' + self.container);\r\n            self.$selector.on(\r\n                'setVaultNotActive.' + self.getCode(),\r\n                function () {\r\n                    self.$selector.off('submitOrder.' + self.getCode());\r\n                }\r\n            );\r\n            self._super();\r\n\r\n            self.initEventHandlers();\r\n\r\n            return self;\r\n        },\r\n\r\n        /**\r\n         * Get payment code\r\n         * @returns {String}\r\n         */\r\n        getCode: function () {\r\n            return this.code;\r\n        },\r\n\r\n        /**\r\n         * Init event handlers\r\n         */\r\n        initEventHandlers: function () {\r\n            $(this.$container).find('[name=\"payment[token_switcher]\"]')\r\n                .on('click', this.selectPaymentMethod.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Select current payment token\r\n         */\r\n        selectPaymentMethod: function () {\r\n            this.disableEventListeners();\r\n            this.enableEventListeners();\r\n        },\r\n\r\n        /**\r\n         * Enable form event listeners\r\n         */\r\n        enableEventListeners: function () {\r\n            this.$selector.on('submitOrder.' + this.getCode(), this.submitOrder.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Disable form event listeners\r\n         */\r\n        disableEventListeners: function () {\r\n            this.$selector.off('submitOrder');\r\n        },\r\n\r\n        /**\r\n         * Pre submit for order\r\n         * @returns {Boolean}\r\n         */\r\n        submitOrder: function () {\r\n            this.$selector.validate().form();\r\n            this.$selector.trigger('afterValidate.beforeSubmit');\r\n            $('body').trigger('processStop');\r\n\r\n            // validate parent form\r\n            if (this.$selector.validate().errorList.length) {\r\n                return false;\r\n            }\r\n            this.getPaymentMethodNonce();\r\n        },\r\n\r\n        /**\r\n         * Place order\r\n         */\r\n        placeOrder: function () {\r\n            this.$selector.trigger('realOrder');\r\n        },\r\n\r\n        /**\r\n         * Send request to get payment method nonce\r\n         */\r\n        getPaymentMethodNonce: function () {\r\n            var self = this;\r\n\r\n            $('body').trigger('processStart');\r\n\r\n            $.getJSON(self.nonceUrl, {\r\n                'public_hash': self.publicHash\r\n            }).done(function (response) {\r\n                self.setPaymentDetails(response.paymentMethodNonce);\r\n                self.placeOrder();\r\n            }).fail(function (response) {\r\n                var failed = JSON.parse(response.responseText);\r\n\r\n                self.error(failed.message);\r\n            }).always(function () {\r\n                $('body').trigger('processStop');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Store payment details\r\n         * @param {String} nonce\r\n         */\r\n        setPaymentDetails: function (nonce) {\r\n            this.createPublicHashSelector();\r\n\r\n            this.$selector.find('[name=\"payment[public_hash]\"]').val(this.publicHash);\r\n            this.$selector.find('[name=\"payment[payment_method_nonce]\"]').val(nonce).prop('disabled', false);\r\n        },\r\n\r\n        /**\r\n         * Creates public hash selector\r\n         */\r\n        createPublicHashSelector: function () {\r\n            var $input;\r\n\r\n            if (this.$selector.find('[name=\"payment[payment_method_nonce]\"]').length === 0) {\r\n                $input = $('<input>').attr(\r\n                    {\r\n                        type: 'hidden',\r\n                        id: this.getNonceSelectorName(),\r\n                        name: 'payment[payment_method_nonce]'\r\n                    }\r\n                );\r\n\r\n                $input.appendTo(this.$selector);\r\n                $input.prop('disabled', false);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show alert message\r\n         * @param {String} message\r\n         */\r\n        error: function (message) {\r\n            alert({\r\n                content: message\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get selector name for nonce input\r\n         * @returns {String}\r\n         */\r\n        getNonceSelectorName: function () {\r\n            return 'nonce_' + this.getCode();\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/virtual.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/*browser:true*/\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/lib/view/utils/dom-observer',\r\n    'mage/translate',\r\n    'PayPal_Braintree/js/validator',\r\n    'braintree',\r\n    'braintreeHostedFields'\r\n], function ($, Class, alert, domObserver, $t, validator, client, hostedFields) {\r\n    'use strict';\r\n\r\n    return Class.extend({\r\n\r\n        defaults: {\r\n            $container: null,\r\n            container: 'payment_form_braintree',\r\n            braintree: null,\r\n            selectedCardType: null,\r\n            hostedFieldsInstance: null\r\n        },\r\n\r\n        /**\r\n         * Set list of observable attributes\r\n         * @returns {exports.initObservable}\r\n         */\r\n        initObservable: function () {\r\n            var self = this;\r\n\r\n            validator.setConfig(this);\r\n\r\n            self.$container = $('#' + self.container);\r\n            this._super()\r\n                .observe([\r\n                    'selectedCardType'\r\n                ]);\r\n\r\n            domObserver.get('#' + self.container, function () {\r\n                self.initBraintree();\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Setup Braintree SDK\r\n         */\r\n        initBraintree: function () {\r\n            var self = this;\r\n\r\n            try {\r\n                $('body').trigger('processStart');\r\n\r\n                client.create({\r\n                    authorization: self.clientToken\r\n                }, function (clientErr, clientInstance) {\r\n                    if (clientErr) {\r\n                        alert({\r\n                            // eslint-disable-next-line\r\n                            content: $t('Please configure your Braintree Payments account in order to use the virtual terminal.')\r\n                        });\r\n                        console.error('Error!', clientErr);\r\n                        return self.error(clientErr);\r\n                    }\r\n\r\n                    hostedFields.create({\r\n                        client: clientInstance,\r\n                        fields: self.getHostedFields()\r\n                    }, function (createErr, hostedFieldsInstance) {\r\n                        if (createErr) {\r\n                            self.error($t(createErr));\r\n                            console.error('Error!', createErr);\r\n                            return;\r\n                        }\r\n\r\n                        self.hostedFieldsInstance = hostedFieldsInstance;\r\n                        self.$container.on('takePayment', self.submitOrder.bind(self));\r\n\r\n                        $('body').trigger('processStop');\r\n                    });\r\n                });\r\n            } catch (e) {\r\n                $('body').trigger('processStop');\r\n                self.error(e.message);\r\n                console.log(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get hosted fields configuration\r\n         * @returns {Object}\r\n         */\r\n        getHostedFields: function () {\r\n            return {\r\n                number: {\r\n                    selector: this.getSelector('cc_number'),\r\n                    placeholder: $t('4111 1111 1111 1111')\r\n                },\r\n                expirationMonth: {\r\n                    selector: this.getSelector('cc_exp_month'),\r\n                    placeholder: $t('MM')\r\n                },\r\n                expirationYear: {\r\n                    selector: this.getSelector('cc_exp_year'),\r\n                    placeholder: $t('YY')\r\n                },\r\n                cvv: {\r\n                    selector: this.getSelector('cc_cid'),\r\n                    placeholder: $t('123')\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Show alert message\r\n         * @param {String} message\r\n         */\r\n        error: function (message) {\r\n            alert({\r\n                content: message\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Store payment details\r\n         * @param {String} nonce\r\n         */\r\n        setPaymentDetails: function (nonce) {\r\n            var $container = $('#' + this.container);\r\n\r\n            $container.find('[name=\"payment_method_nonce\"]').val(nonce);\r\n        },\r\n\r\n        /**\r\n         * Trigger order submit\r\n         */\r\n        submitOrder: function (event) {\r\n            event.preventDefault();\r\n\r\n            this.$container.validate().form();\r\n            this.$container.trigger('afterValidate.beforeSubmit');\r\n            $('body').trigger('processStop');\r\n\r\n            // validate parent form\r\n            if (this.$container.validate().errorList.length) {\r\n                return false;\r\n            }\r\n\r\n            $('body').trigger('processStart');\r\n            this.tokenizeHostedFields();\r\n        },\r\n\r\n        /**\r\n         * Place order\r\n         */\r\n        placeOrder: function () {\r\n            this.$container.submit();\r\n        },\r\n\r\n        /**\r\n         * Get list of currently available card types\r\n         * @returns {Array}\r\n         */\r\n        getCcAvailableTypes: function () {\r\n            var types = [],\r\n                $options = $(this.getSelector('cc_type')).find('option');\r\n\r\n            $.map($options, function (option) {\r\n                types.push($(option).val());\r\n            });\r\n\r\n            return types;\r\n        },\r\n\r\n        /**\r\n         * Get jQuery selector\r\n         * @param {String} field\r\n         * @returns {String}\r\n         */\r\n        getSelector: function (field) {\r\n            return '#' + this.code + '_' + field;\r\n        },\r\n\r\n        tokenizeHostedFields: function () {\r\n            this.hostedFieldsInstance.tokenize({\r\n                vault: false // vault or no?\r\n            }, function (tokenizeErr, payload) {\r\n                if (tokenizeErr) {\r\n                    $('body').trigger('processStop');\r\n                    switch (tokenizeErr.code) {\r\n                    case 'HOSTED_FIELDS_FIELDS_EMPTY':\r\n                        // occurs when none of the fields are filled in\r\n                        this.error($t('Please enter a card number, expiration date and CVV'));\r\n                        break;\r\n                    case 'HOSTED_FIELDS_FIELDS_INVALID':\r\n                        // occurs when certain fields do not pass client side validation\r\n                        this.error($t('Please correct the problems with the Credit Card fields.'));\r\n                        console.error('Some fields are invalid:', tokenizeErr.details.invalidFieldKeys);\r\n                        break;\r\n                    case 'HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE':\r\n                        // occurs when:\r\n                        //   * the client token used for client authorization was generated\r\n                        //     with a customer ID and the fail on duplicate payment method\r\n                        //     option is set to true\r\n                        //   * the card being tokenized has previously been vaulted (with any customer)\r\n                        // eslint-disable-next-line\r\n                            // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.fail_on_duplicate_payment_method\r\n                        // eslint-disable-next-line\r\n                            this.error($t('The payment method used, already exists in the user\\'s vault. Please use the vault option instead.'));\r\n                        break;\r\n                    case 'HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED':\r\n                        // occurs when:\r\n                        //   * the client token used for client authorization was generated\r\n                        //     with a customer ID and the verify card option is set to true\r\n                        //     and you have credit card verification turned on in the Braintree\r\n                        //     control panel\r\n                        /* eslint-disable */\r\n                            //   * the cvv does not pass verfication (https://developers.braintreepayments.com/reference/general/testing/#avs-and-cvv/cid-responses)\r\n                            // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.verify_card\r\n                            /* eslint-enable */\r\n                        this.error($t('CVV did not pass verification'));\r\n                        break;\r\n                    case 'HOSTED_FIELDS_FAILED_TOKENIZATION':\r\n                        // occurs for any other tokenization error on the server\r\n                        this.error($t('There was an issue tokenizing the card. Please check the card is valid.'));\r\n                        console.error('Tokenization failed server side. Is the card valid?');\r\n                        break;\r\n                    case 'HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR':\r\n                        // occurs when the Braintree gateway cannot be contacted\r\n                        this.error($t('There was an error connecting to Braintree. Please try again.'));\r\n                        break;\r\n                    default:\r\n                        this.error($t('There was an issue processing the payment. Please try again.'));\r\n                        console.error('Braintree error', tokenizeErr);\r\n                        break;\r\n                    }\r\n                } else {\r\n                    this.setPaymentDetails(payload.nonce);\r\n                    this.placeOrder();\r\n                }\r\n            }.bind(this));\r\n        }\r\n    });\r\n});\r\n","PayPal_Braintree/js/grid/provider.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/grid/provider'\r\n], function (_, Provider) {\r\n    'use strict';\r\n\r\n    return Provider.extend({\r\n\r\n        /**\r\n         * Reload grid\r\n         * @returns {exports}\r\n         */\r\n        reload: function () {\r\n            if (this.hasFilters()) {\r\n                this._super();\r\n\r\n                return this;\r\n            }\r\n\r\n            this.trigger('reload');\r\n\r\n            this.onReload({\r\n                items: [],\r\n                totalRecords: 0\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Has filters checker\r\n         * @returns {Boolean}\r\n         */\r\n        hasFilters: function () {\r\n            var params = this.params,\r\n                filters = params.filters || {};\r\n\r\n            return _.keys(filters).length > 1;\r\n        }\r\n    });\r\n});\r\n","requirejs/domReady.js":"/**\r\n * @license RequireJS domReady 2.0.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/requirejs/domReady for details\r\n */\r\n/*jslint */\r\n/*global require: false, define: false, requirejs: false,\r\n  window: false, clearInterval: false, document: false,\r\n  self: false, setInterval: false */\r\n\r\n\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    var isTop, testDiv, scrollIntervalId,\r\n        isBrowser = typeof window !== \"undefined\" && window.document,\r\n        isPageLoaded = !isBrowser,\r\n        doc = isBrowser ? document : null,\r\n        readyCalls = [];\r\n\r\n    function runCallbacks(callbacks) {\r\n        var i;\r\n        for (i = 0; i < callbacks.length; i += 1) {\r\n            callbacks[i](doc);\r\n        }\r\n    }\r\n\r\n    function callReady() {\r\n        var callbacks = readyCalls;\r\n\r\n        if (isPageLoaded) {\r\n            //Call the DOM ready callbacks\r\n            if (callbacks.length) {\r\n                readyCalls = [];\r\n                runCallbacks(callbacks);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the page as loaded.\r\n     */\r\n    function pageLoaded() {\r\n        if (!isPageLoaded) {\r\n            isPageLoaded = true;\r\n            if (scrollIntervalId) {\r\n                clearInterval(scrollIntervalId);\r\n            }\r\n\r\n            callReady();\r\n        }\r\n    }\r\n\r\n    if (isBrowser) {\r\n        if (document.addEventListener) {\r\n            //Standards. Hooray! Assumption here that if standards based,\r\n            //it knows about DOMContentLoaded.\r\n            document.addEventListener(\"DOMContentLoaded\", pageLoaded, false);\r\n            window.addEventListener(\"load\", pageLoaded, false);\r\n        } else if (window.attachEvent) {\r\n            window.attachEvent(\"onload\", pageLoaded);\r\n\r\n            testDiv = document.createElement('div');\r\n            try {\r\n                isTop = window.frameElement === null;\r\n            } catch (e) {}\r\n\r\n            //DOMContentLoaded approximation that uses a doScroll, as found by\r\n            //Diego Perini: http://javascript.nwbox.com/IEContentLoaded/,\r\n            //but modified by other contributors, including jdalton\r\n            if (testDiv.doScroll && isTop && window.external) {\r\n                scrollIntervalId = setInterval(function () {\r\n                    try {\r\n                        testDiv.doScroll();\r\n                        pageLoaded();\r\n                    } catch (e) {}\r\n                }, 30);\r\n            }\r\n        }\r\n\r\n        //Check if document is no longer loading, and if so, just trigger page load\r\n        //listeners. Latest webkit browsers also use \"interactive\", and\r\n        //will fire the onDOMContentLoaded before \"interactive\" but not after\r\n        //entering \"interactive\" or \"complete\". More details:\r\n        //http://dev.w3.org/html5/spec/the-end.html#the-end\r\n        //http://stackoverflow.com/questions/3665561/document-readystate-of-interactive-vs-ondomcontentloaded\r\n        //Hmm, this is more complicated on further use, see \"firing too early\"\r\n        //bug: https://github.com/requirejs/domReady/issues/1\r\n        //so removing the || document.readyState === \"interactive\" test.\r\n        //There is still a window.onload binding that should get fired if\r\n        //DOMContentLoaded is missed.\r\n        if (document.readyState !== \"loading\") {\r\n            // Handle it asynchronously to allow scripts the opportunity to delay ready\r\n            setTimeout(pageLoaded);\r\n        }\r\n    }\r\n\r\n    /** START OF PUBLIC API **/\r\n\r\n    /**\r\n     * Registers a callback for DOM ready. If DOM is already ready, the\r\n     * callback is called immediately.\r\n     * @param {Function} callback\r\n     */\r\n    function domReady(callback) {\r\n        if (isPageLoaded) {\r\n            callback(doc);\r\n        } else {\r\n            readyCalls.push(callback);\r\n        }\r\n        return domReady;\r\n    }\r\n\r\n    domReady.version = '2.0.1';\r\n\r\n    /**\r\n     * Loader Plugin API method\r\n     */\r\n    domReady.load = function (name, req, onLoad, config) {\r\n        if (config.isBuild) {\r\n            onLoad(null);\r\n        } else {\r\n            domReady(onLoad);\r\n        }\r\n    };\r\n\r\n    /** END OF PUBLIC API **/\r\n\r\n    return domReady;\r\n});\r\n","vimeo/player.min.js":"/*! @vimeo/player v2.16.4 | (c) 2022 Vimeo | MIT License | https://github.com/vimeo/player.js */\r\n!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):((e=\"undefined\"!=typeof globalThis?globalThis:e||self).Vimeo=e.Vimeo||{},e.Vimeo.Player=t())}(this,function(){\"use strict\";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var e=\"undefined\"!=typeof global&&\"[object global]\"==={}.toString.call(global);function i(e,t){return 0===e.indexOf(t.toLowerCase())?e:\"\".concat(t.toLowerCase()).concat(e.substr(0,1).toUpperCase()).concat(e.substr(1))}function l(e){return/^(https?:)?\\/\\/((player|www)\\.)?vimeo\\.com(?=$|\\/)/.test(e)}function u(e){var t=0<arguments.length&&void 0!==e?e:{},n=t.id,e=t.url,t=n||e;if(!t)throw new Error(\"An id or url must be passed, either in an options object or as a data-vimeo-id or data-vimeo-url attribute.\");if(e=t,!isNaN(parseFloat(e))&&isFinite(e)&&Math.floor(e)==e)return\"https://vimeo.com/\".concat(t);if(l(t))return t.replace(\"http:\",\"https:\");if(n)throw new TypeError(\"\u201c\".concat(n,\"\u201d is not a valid video id.\"));throw new TypeError(\"\u201c\".concat(t,\"\u201d is not a vimeo.com url.\"))}var t=void 0!==Array.prototype.indexOf,Player=\"undefined\"!=typeof window&&void 0!==window.postMessage;if(!(e||t&&Player))throw new Error(\"Sorry, the Vimeo Player API is not available in this browser.\");var n,o,a=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{};function c(){if(void 0===this)throw new TypeError(\"Constructor WeakMap requires 'new'\");if(o(this,\"_id\",\"_WeakMap_\"+f()+\".\"+f()),0<arguments.length)throw new TypeError(\"WeakMap iterable is not supported\")}function s(e,t){if(!d(e)||!n.call(e,\"_id\"))throw new TypeError(t+\" method called on incompatible receiver \"+typeof e)}function f(){return Math.random().toString().substring(2)}function d(e){return Object(e)===e}(Player=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:a).WeakMap||(n=Object.prototype.hasOwnProperty,Player.WeakMap=((o=function(e,t,n){Object.defineProperty?Object.defineProperty(e,t,{configurable:!0,writable:!0,value:n}):e[t]=n})(c.prototype,\"delete\",function(e){if(s(this,\"delete\"),!d(e))return!1;var t=e[this._id];return!(!t||t[0]!==e)&&(delete e[this._id],!0)}),o(c.prototype,\"get\",function(e){if(s(this,\"get\"),d(e)){var t=e[this._id];return t&&t[0]===e?t[1]:void 0}}),o(c.prototype,\"has\",function(e){if(s(this,\"has\"),!d(e))return!1;var t=e[this._id];return!(!t||t[0]!==e)}),o(c.prototype,\"set\",function(e,t){if(s(this,\"set\"),!d(e))throw new TypeError(\"Invalid value used as weak map key\");var n=e[this._id];return n&&n[0]===e?n[1]=t:o(e,this._id,[e,t]),this}),o(c,\"_polyfill\",!0),c));var h,m=(function(e){var t,n,r;r=function(){var t,n,r,o,i,e=Object.prototype.toString,a=\"undefined\"!=typeof setImmediate?function(e){return setImmediate(e)}:setTimeout;try{Object.defineProperty({},\"x\",{}),t=function(e,t,n,r){return Object.defineProperty(e,t,{value:n,writable:!0,configurable:!1!==r})}}catch(e){t=function(e,t,n){return e[t]=n,e}}function u(e,t){this.fn=e,this.self=t,this.next=void 0}function l(e,t){y.add(e,t),n=n||a(y.drain)}function c(e){var t,n=typeof e;return\"function\"==typeof(t=null!=e&&(\"object\"==n||\"function\"==n)?e.then:t)&&t}function s(){for(var e=0;e<this.chain.length;e++)!function(e,t,n){var r,o;try{!1===t?n.reject(e.msg):(r=!0===t?e.msg:t.call(void 0,e.msg))===n.promise?n.reject(TypeError(\"Promise-chain cycle\")):(o=c(r))?o.call(r,n.resolve,n.reject):n.resolve(r)}catch(e){n.reject(e)}}(this,1===this.state?this.chain[e].success:this.chain[e].failure,this.chain[e]);this.chain.length=0}function f(e){var n,r=this;if(!r.triggered){r.triggered=!0,r.def&&(r=r.def);try{(n=c(e))?l(function(){var t=new m(r);try{n.call(e,function(){f.apply(t,arguments)},function(){d.apply(t,arguments)})}catch(e){d.call(t,e)}}):(r.msg=e,r.state=1,0<r.chain.length&&l(s,r))}catch(e){d.call(new m(r),e)}}}function d(e){var t=this;t.triggered||(t.triggered=!0,(t=t.def?t.def:t).msg=e,t.state=2,0<t.chain.length&&l(s,t))}function h(e,n,r,o){for(var t=0;t<n.length;t++)!function(t){e.resolve(n[t]).then(function(e){r(t,e)},o)}(t)}function m(e){this.def=e,this.triggered=!1}function v(e){this.promise=e,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}function p(e){if(\"function\"!=typeof e)throw TypeError(\"Not a function\");if(0!==this.__NPO__)throw TypeError(\"Not a promise\");this.__NPO__=1;var r=new v(this);this.then=function(e,t){var n={success:\"function\"!=typeof e||e,failure:\"function\"==typeof t&&t};return n.promise=new this.constructor(function(e,t){if(\"function\"!=typeof e||\"function\"!=typeof t)throw TypeError(\"Not a function\");n.resolve=e,n.reject=t}),r.chain.push(n),0!==r.state&&l(s,r),n.promise},this.catch=function(e){return this.then(void 0,e)};try{e.call(void 0,function(e){f.call(r,e)},function(e){d.call(r,e)})}catch(e){d.call(r,e)}}var y={add:function(e,t){i=new u(e,t),o?o.next=i:r=i,o=i,i=void 0},drain:function(){var e=r;for(r=o=n=void 0;e;)e.fn.call(e.self),e=e.next}},g=t({},\"constructor\",p,!1);return t(p.prototype=g,\"__NPO__\",0,!1),t(p,\"resolve\",function(n){return n&&\"object\"==typeof n&&1===n.__NPO__?n:new this(function(e,t){if(\"function\"!=typeof e||\"function\"!=typeof t)throw TypeError(\"Not a function\");e(n)})}),t(p,\"reject\",function(n){return new this(function(e,t){if(\"function\"!=typeof e||\"function\"!=typeof t)throw TypeError(\"Not a function\");t(n)})}),t(p,\"all\",function(t){var a=this;return\"[object Array]\"!=e.call(t)?a.reject(TypeError(\"Not an array\")):0===t.length?a.resolve([]):new a(function(n,e){if(\"function\"!=typeof n||\"function\"!=typeof e)throw TypeError(\"Not a function\");var r=t.length,o=Array(r),i=0;h(a,t,function(e,t){o[e]=t,++i===r&&n(o)},e)})}),t(p,\"race\",function(t){var r=this;return\"[object Array]\"!=e.call(t)?r.reject(TypeError(\"Not an array\")):new r(function(n,e){if(\"function\"!=typeof n||\"function\"!=typeof e)throw TypeError(\"Not a function\");h(r,t,function(e,t){n(t)},e)})}),p},(n=a)[t=\"Promise\"]=n[t]||r(),e.exports&&(e.exports=n[t])}(h={exports:{}}),h.exports),v=new WeakMap;function p(e,t,n){var r=v.get(e.element)||{};t in r||(r[t]=[]),r[t].push(n),v.set(e.element,r)}function y(e,t){return(v.get(e.element)||{})[t]||[]}function g(e,t,n){var r=v.get(e.element)||{};if(!r[t])return!0;if(!n)return r[t]=[],v.set(e.element,r),!0;n=r[t].indexOf(n);return-1!==n&&r[t].splice(n,1),v.set(e.element,r),r[t]&&0===r[t].length}var w=[\"autopause\",\"autoplay\",\"background\",\"byline\",\"color\",\"controls\",\"dnt\",\"height\",\"id\",\"interactive_params\",\"keyboard\",\"loop\",\"maxheight\",\"maxwidth\",\"muted\",\"playsinline\",\"portrait\",\"responsive\",\"speed\",\"texttrack\",\"title\",\"transparent\",\"url\",\"width\"];function b(r,e){return w.reduce(function(e,t){var n=r.getAttribute(\"data-vimeo-\".concat(t));return!n&&\"\"!==n||(e[t]=\"\"===n?1:n),e},1<arguments.length&&void 0!==e?e:{})}function k(e,t){var n=e.html;if(!t)throw new TypeError(\"An element must be provided\");if(null!==t.getAttribute(\"data-vimeo-initialized\"))return t.querySelector(\"iframe\");e=document.createElement(\"div\");return e.innerHTML=n,t.appendChild(e.firstChild),t.setAttribute(\"data-vimeo-initialized\",\"true\"),t.querySelector(\"iframe\")}function E(i,e,t){var a=1<arguments.length&&void 0!==e?e:{},u=2<arguments.length?t:void 0;return new Promise(function(t,n){if(!l(i))throw new TypeError(\"\u201c\".concat(i,\"\u201d is not a vimeo.com url.\"));var e,r=\"https://vimeo.com/api/oembed.json?url=\".concat(encodeURIComponent(i));for(e in a)a.hasOwnProperty(e)&&(r+=\"&\".concat(e,\"=\").concat(encodeURIComponent(a[e])));var o=new(\"XDomainRequest\"in window?XDomainRequest:XMLHttpRequest);o.open(\"GET\",r,!0),o.onload=function(){if(404!==o.status)if(403!==o.status)try{var e=JSON.parse(o.responseText);if(403===e.domain_status_code)return k(e,u),void n(new Error(\"\u201c\".concat(i,\"\u201d is not embeddable.\")));t(e)}catch(e){n(e)}else n(new Error(\"\u201c\".concat(i,\"\u201d is not embeddable.\")));else n(new Error(\"\u201c\".concat(i,\"\u201d was not found.\")))},o.onerror=function(){var e=o.status?\" (\".concat(o.status,\")\"):\"\";n(new Error(\"There was an error fetching the embed code from Vimeo\".concat(e,\".\")))},o.send()})}function T(e){function n(e){\"console\"in window&&console.error&&console.error(\"There was an error creating an embed: \".concat(e))}e=0<arguments.length&&void 0!==e?e:document,e=[].slice.call(e.querySelectorAll(\"[data-vimeo-id], [data-vimeo-url]\"));e.forEach(function(t){try{if(null!==t.getAttribute(\"data-vimeo-defer\"))return;var e=b(t);E(u(e),e,t).then(function(e){return k(e,t)}).catch(n)}catch(e){n(e)}})}function P(e){if(\"string\"==typeof e)try{e=JSON.parse(e)}catch(e){return console.warn(e),{}}return e}function _(e,t,n){e.element.contentWindow&&e.element.contentWindow.postMessage&&(t={method:t},void 0!==n&&(t.value=n),8<=(n=parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\\d+).*$/,\"$1\")))&&n<10&&(t=JSON.stringify(t)),e.element.contentWindow.postMessage(t,e.origin))}function M(n,r){var t,e,o,i,a=[];(r=P(r)).event?(\"error\"===r.event&&y(n,r.data.method).forEach(function(e){var t=new Error(r.data.message);t.name=r.data.name,e.reject(t),g(n,r.data.method,e)}),a=y(n,\"event:\".concat(r.event)),t=r.data):r.method&&(e=n,o=r.method,(i=!((i=y(e,o)).length<1)&&(i=i.shift(),g(e,o,i),i))&&(a.push(i),t=r.value)),a.forEach(function(e){try{if(\"function\"==typeof e)return void e.call(n,t);e.resolve(t)}catch(e){}})}var N,F,x,C=new WeakMap,j=new WeakMap,A={},Player=function(){function Player(i){var e,a=this,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,Player),window.jQuery&&i instanceof jQuery&&(1<i.length&&window.console&&console.warn&&console.warn(\"A jQuery object with multiple elements was passed, using the first element.\"),i=i[0]),\"undefined\"!=typeof document&&\"string\"==typeof i&&(i=document.getElementById(i)),e=i,!Boolean(e&&1===e.nodeType&&\"nodeName\"in e&&e.ownerDocument&&e.ownerDocument.defaultView))throw new TypeError(\"You must pass either a valid element or a valid id.\");if(\"IFRAME\"===i.nodeName||(r=i.querySelector(\"iframe\"))&&(i=r),\"IFRAME\"===i.nodeName&&!l(i.getAttribute(\"src\")||\"\"))throw new Error(\"The player element passed isn\u2019t a Vimeo embed.\");if(C.has(i))return C.get(i);this._window=i.ownerDocument.defaultView,this.element=i,this.origin=\"*\";var n,r=new m(function(r,o){var e;a._onMessage=function(e){if(l(e.origin)&&a.element.contentWindow===e.source){\"*\"===a.origin&&(a.origin=e.origin);var t=P(e.data);if(t&&\"error\"===t.event&&t.data&&\"ready\"===t.data.method){var n=new Error(t.data.message);return n.name=t.data.name,void o(n)}e=t&&\"ready\"===t.event,n=t&&\"ping\"===t.method;if(e||n)return a.element.setAttribute(\"data-ready\",\"true\"),void r();M(a,t)}},a._window.addEventListener(\"message\",a._onMessage),\"IFRAME\"!==a.element.nodeName&&E(u(e=b(i,t)),e,i).then(function(e){var t,n,r=k(e,i);return a.element=r,a._originalElement=i,t=i,n=r,r=v.get(t),v.set(n,r),v.delete(t),C.set(a.element,a),e}).catch(o)});return j.set(this,r),C.set(this.element,this),\"IFRAME\"===this.element.nodeName&&_(this,\"ping\"),A.isEnabled&&(n=function(){return A.exit()},this.fullscreenchangeHandler=function(){(A.isFullscreen?p:g)(a,\"event:exitFullscreen\",n),a.ready().then(function(){_(a,\"fullscreenchange\",A.isFullscreen)})},A.on(\"fullscreenchange\",this.fullscreenchangeHandler)),this}var e,t,n;return e=Player,(t=[{key:\"callMethod\",value:function(n){var r=this,o=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return new m(function(e,t){return r.ready().then(function(){p(r,n,{resolve:e,reject:t}),_(r,n,o)}).catch(t)})}},{key:\"get\",value:function(n){var r=this;return new m(function(e,t){return n=i(n,\"get\"),r.ready().then(function(){p(r,n,{resolve:e,reject:t}),_(r,n)}).catch(t)})}},{key:\"set\",value:function(n,r){var o=this;return new m(function(e,t){if(n=i(n,\"set\"),null==r)throw new TypeError(\"There must be a value to set.\");return o.ready().then(function(){p(o,n,{resolve:e,reject:t}),_(o,n,r)}).catch(t)})}},{key:\"on\",value:function(e,t){if(!e)throw new TypeError(\"You must pass an event name.\");if(!t)throw new TypeError(\"You must pass a callback function.\");if(\"function\"!=typeof t)throw new TypeError(\"The callback must be a function.\");0===y(this,\"event:\".concat(e)).length&&this.callMethod(\"addEventListener\",e).catch(function(){}),p(this,\"event:\".concat(e),t)}},{key:\"off\",value:function(e,t){if(!e)throw new TypeError(\"You must pass an event name.\");if(t&&\"function\"!=typeof t)throw new TypeError(\"The callback must be a function.\");g(this,\"event:\".concat(e),t)&&this.callMethod(\"removeEventListener\",e).catch(function(e){})}},{key:\"loadVideo\",value:function(e){return this.callMethod(\"loadVideo\",e)}},{key:\"ready\",value:function(){var e=j.get(this)||new m(function(e,t){t(new Error(\"Unknown player. Probably unloaded.\"))});return m.resolve(e)}},{key:\"addCuePoint\",value:function(e){return this.callMethod(\"addCuePoint\",{time:e,data:1<arguments.length&&void 0!==arguments[1]?arguments[1]:{}})}},{key:\"removeCuePoint\",value:function(e){return this.callMethod(\"removeCuePoint\",e)}},{key:\"enableTextTrack\",value:function(e,t){if(!e)throw new TypeError(\"You must pass a language.\");return this.callMethod(\"enableTextTrack\",{language:e,kind:t})}},{key:\"disableTextTrack\",value:function(){return this.callMethod(\"disableTextTrack\")}},{key:\"pause\",value:function(){return this.callMethod(\"pause\")}},{key:\"play\",value:function(){return this.callMethod(\"play\")}},{key:\"requestFullscreen\",value:function(){return A.isEnabled?A.request(this.element):this.callMethod(\"requestFullscreen\")}},{key:\"exitFullscreen\",value:function(){return A.isEnabled?A.exit():this.callMethod(\"exitFullscreen\")}},{key:\"getFullscreen\",value:function(){return A.isEnabled?m.resolve(A.isFullscreen):this.get(\"fullscreen\")}},{key:\"requestPictureInPicture\",value:function(){return this.callMethod(\"requestPictureInPicture\")}},{key:\"exitPictureInPicture\",value:function(){return this.callMethod(\"exitPictureInPicture\")}},{key:\"getPictureInPicture\",value:function(){return this.get(\"pictureInPicture\")}},{key:\"unload\",value:function(){return this.callMethod(\"unload\")}},{key:\"destroy\",value:function(){var n=this;return new m(function(e){var t;j.delete(n),C.delete(n.element),n._originalElement&&(C.delete(n._originalElement),n._originalElement.removeAttribute(\"data-vimeo-initialized\")),n.element&&\"IFRAME\"===n.element.nodeName&&n.element.parentNode&&(n.element.parentNode.parentNode&&n._originalElement&&n._originalElement!==n.element.parentNode?n.element.parentNode.parentNode.removeChild(n.element.parentNode):n.element.parentNode.removeChild(n.element)),n.element&&\"DIV\"===n.element.nodeName&&n.element.parentNode&&(n.element.removeAttribute(\"data-vimeo-initialized\"),(t=n.element.querySelector(\"iframe\"))&&t.parentNode&&(t.parentNode.parentNode&&n._originalElement&&n._originalElement!==t.parentNode?t.parentNode.parentNode.removeChild(t.parentNode):t.parentNode.removeChild(t))),n._window.removeEventListener(\"message\",n._onMessage),A.isEnabled&&A.off(\"fullscreenchange\",n.fullscreenchangeHandler),e()})}},{key:\"getAutopause\",value:function(){return this.get(\"autopause\")}},{key:\"setAutopause\",value:function(e){return this.set(\"autopause\",e)}},{key:\"getBuffered\",value:function(){return this.get(\"buffered\")}},{key:\"getCameraProps\",value:function(){return this.get(\"cameraProps\")}},{key:\"setCameraProps\",value:function(e){return this.set(\"cameraProps\",e)}},{key:\"getChapters\",value:function(){return this.get(\"chapters\")}},{key:\"getCurrentChapter\",value:function(){return this.get(\"currentChapter\")}},{key:\"getColor\",value:function(){return this.get(\"color\")}},{key:\"setColor\",value:function(e){return this.set(\"color\",e)}},{key:\"getCuePoints\",value:function(){return this.get(\"cuePoints\")}},{key:\"getCurrentTime\",value:function(){return this.get(\"currentTime\")}},{key:\"setCurrentTime\",value:function(e){return this.set(\"currentTime\",e)}},{key:\"getDuration\",value:function(){return this.get(\"duration\")}},{key:\"getEnded\",value:function(){return this.get(\"ended\")}},{key:\"getLoop\",value:function(){return this.get(\"loop\")}},{key:\"setLoop\",value:function(e){return this.set(\"loop\",e)}},{key:\"setMuted\",value:function(e){return this.set(\"muted\",e)}},{key:\"getMuted\",value:function(){return this.get(\"muted\")}},{key:\"getPaused\",value:function(){return this.get(\"paused\")}},{key:\"getPlaybackRate\",value:function(){return this.get(\"playbackRate\")}},{key:\"setPlaybackRate\",value:function(e){return this.set(\"playbackRate\",e)}},{key:\"getPlayed\",value:function(){return this.get(\"played\")}},{key:\"getQualities\",value:function(){return this.get(\"qualities\")}},{key:\"getQuality\",value:function(){return this.get(\"quality\")}},{key:\"setQuality\",value:function(e){return this.set(\"quality\",e)}},{key:\"getSeekable\",value:function(){return this.get(\"seekable\")}},{key:\"getSeeking\",value:function(){return this.get(\"seeking\")}},{key:\"getTextTracks\",value:function(){return this.get(\"textTracks\")}},{key:\"getVideoEmbedCode\",value:function(){return this.get(\"videoEmbedCode\")}},{key:\"getVideoId\",value:function(){return this.get(\"videoId\")}},{key:\"getVideoTitle\",value:function(){return this.get(\"videoTitle\")}},{key:\"getVideoWidth\",value:function(){return this.get(\"videoWidth\")}},{key:\"getVideoHeight\",value:function(){return this.get(\"videoHeight\")}},{key:\"getVideoUrl\",value:function(){return this.get(\"videoUrl\")}},{key:\"getVolume\",value:function(){return this.get(\"volume\")}},{key:\"setVolume\",value:function(e){return this.set(\"volume\",e)}}])&&r(e.prototype,t),n&&r(e,n),Player}();return e||(N=function(){for(var e,t=[[\"requestFullscreen\",\"exitFullscreen\",\"fullscreenElement\",\"fullscreenEnabled\",\"fullscreenchange\",\"fullscreenerror\"],[\"webkitRequestFullscreen\",\"webkitExitFullscreen\",\"webkitFullscreenElement\",\"webkitFullscreenEnabled\",\"webkitfullscreenchange\",\"webkitfullscreenerror\"],[\"webkitRequestFullScreen\",\"webkitCancelFullScreen\",\"webkitCurrentFullScreenElement\",\"webkitCancelFullScreen\",\"webkitfullscreenchange\",\"webkitfullscreenerror\"],[\"mozRequestFullScreen\",\"mozCancelFullScreen\",\"mozFullScreenElement\",\"mozFullScreenEnabled\",\"mozfullscreenchange\",\"mozfullscreenerror\"],[\"msRequestFullscreen\",\"msExitFullscreen\",\"msFullscreenElement\",\"msFullscreenEnabled\",\"MSFullscreenChange\",\"MSFullscreenError\"]],n=0,r=t.length,o={};n<r;n++)if((e=t[n])&&e[1]in document){for(n=0;n<e.length;n++)o[t[0][n]]=e[n];return o}return!1}(),F={fullscreenchange:N.fullscreenchange,fullscreenerror:N.fullscreenerror},x={request:function(o){return new Promise(function(e,t){function n(){x.off(\"fullscreenchange\",n),e()}x.on(\"fullscreenchange\",n);var r=(o=o||document.documentElement)[N.requestFullscreen]();r instanceof Promise&&r.then(n).catch(t)})},exit:function(){return new Promise(function(t,e){var n,r;x.isFullscreen?(n=function e(){x.off(\"fullscreenchange\",e),t()},x.on(\"fullscreenchange\",n),(r=document[N.exitFullscreen]())instanceof Promise&&r.then(n).catch(e)):t()})},on:function(e,t){e=F[e];e&&document.addEventListener(e,t)},off:function(e,t){e=F[e];e&&document.removeEventListener(e,t)}},Object.defineProperties(x,{isFullscreen:{get:function(){return Boolean(document[N.fullscreenElement])}},element:{enumerable:!0,get:function(){return document[N.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(document[N.fullscreenEnabled])}}}),A=x,T(),function(e){var r=0<arguments.length&&void 0!==e?e:document;window.VimeoPlayerResizeEmbeds_||(window.VimeoPlayerResizeEmbeds_=!0,window.addEventListener(\"message\",function(e){if(l(e.origin)&&e.data&&\"spacechange\"===e.data.event)for(var t=r.querySelectorAll(\"iframe\"),n=0;n<t.length;n++)if(t[n].contentWindow===e.source){t[n].parentElement.style.paddingBottom=\"\".concat(e.data.data[0].bottom,\"px\");break}}))}()),Player});\r\n","vimeo/vimeo-wrapper.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'vimeo'\r\n], function (Player) {\r\n    'use strict';\r\n\r\n    window.Vimeo = window.Vimeo || {\r\n        'Player': Player\r\n    };\r\n});\r\n"}
}});
